{"version":3,"file":"static/304.37cb572e80b98cd2dd86.chunk.js","mappings":"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","sources":["webpack://automata-neural-nexus-portal/./src/components/TrendGraph.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';\nconst TrendGraph = () => {\n    const [graphType, setGraphType] = useState('temperature');\n    const [data, setData] = useState([]);\n    const [timeRange, setTimeRange] = useState(8); // hours\n    const [isConnected, setIsConnected] = useState(false);\n    const [currentSensorNames, setCurrentSensorNames] = useState(new Map());\n    const [thresholds] = useState({\n        tempHigh: 85,\n        tempLow: 65,\n        ampsHigh: 40,\n        ampsLow: 5\n    });\n    // Fetch real sensor data from boards\n    const fetchSensorData = async () => {\n        try {\n            // Fetch real data from board readings API\n            const response = await fetch('/api/boards/current-readings');\n            if (response.ok) {\n                const boardData = await response.json();\n                const now = new Date();\n                // For longer time ranges, include date info\n                const timeStr = timeRange > 8\n                    ? now.toLocaleString('en-US', {\n                        month: 'numeric',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        timeZone: 'America/New_York'\n                    })\n                    : now.toLocaleTimeString('en-US', {\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        timeZone: 'America/New_York'\n                    });\n                const newPoint = {\n                    time: timeStr\n                };\n                // Map board data to chart data based on configuration\n                if (boardData.inputs) {\n                    // Track current sensor indices\n                    let currentIndex = 1;\n                    const sensorNameMap = new Map();\n                    // Map all available inputs\n                    Object.entries(boardData.inputs).forEach(([key, value]) => {\n                        const keyLower = key.toLowerCase();\n                        // Map to chart data points based on input names\n                        if ((keyLower.includes('supply') && keyLower.includes('air')) || (keyLower.includes('tower') && keyLower.includes('supply'))) {\n                            newPoint.supply = parseFloat(value);\n                        }\n                        else if (keyLower.includes('tower') && keyLower.includes('return')) {\n                            newPoint.return = parseFloat(value);\n                        }\n                        else if (keyLower.includes('hp') && keyLower.includes('supply')) {\n                            // Store HP loop supply separately for display\n                            newPoint.hpSupply = parseFloat(value);\n                            // Also use as backup for supply if tower supply not available\n                            if (!newPoint.supply) {\n                                newPoint.supply = parseFloat(value);\n                            }\n                        }\n                        else if (keyLower.includes('hp') && keyLower.includes('return')) {\n                            // Use HP loop return as secondary option for return if tower return not available\n                            if (!newPoint.return) {\n                                newPoint.return = parseFloat(value);\n                            }\n                        }\n                        else if (keyLower.includes('outdoor_air') || keyLower.includes('oat')) {\n                            newPoint.oat = parseFloat(value);\n                        }\n                        else if (keyLower === 'space' || keyLower.includes('space_temp')) {\n                            newPoint.space = parseFloat(value);\n                        }\n                        else if (keyLower.includes('current') || keyLower.includes('amps') || keyLower.includes('vfd')) {\n                            // Map all current sensors dynamically\n                            const ampKey = `amps${currentIndex}`;\n                            newPoint[ampKey] = parseFloat(value);\n                            sensorNameMap.set(ampKey, key); // Store original name for legend\n                            currentIndex++;\n                        }\n                        else if (keyLower === 'setpoint') {\n                            newPoint.setpoint = parseFloat(value);\n                        }\n                    });\n                    // Update sensor names if we found any\n                    if (sensorNameMap.size > 0) {\n                        setCurrentSensorNames(sensorNameMap);\n                    }\n                }\n                // Triac states from outputs\n                if (boardData.outputs && boardData.outputs.triacs) {\n                    newPoint.triac1 = boardData.outputs.triacs.triac1 ? 1 : 0;\n                    newPoint.triac2 = boardData.outputs.triacs.triac2 ? 1 : 0;\n                    newPoint.triac3 = boardData.outputs.triacs.triac3 ? 1 : 0;\n                    newPoint.triac4 = boardData.outputs.triacs.triac4 ? 1 : 0;\n                }\n                // Only add data if we have some readings\n                if (Object.keys(newPoint).length > 1) {\n                    setIsConnected(true);\n                    setData(prevData => {\n                        const updated = [...prevData, newPoint];\n                        const intervalMinutes = timeRange <= 1 ? 1 : timeRange <= 4 ? 5 : 15;\n                        const maxPoints = Math.floor((timeRange * 60) / intervalMinutes);\n                        if (updated.length > maxPoints) {\n                            return updated.slice(-maxPoints);\n                        }\n                        return updated;\n                    });\n                }\n            }\n        }\n        catch (err) {\n            console.error('Failed to fetch sensor data:', err);\n            setIsConnected(false);\n        }\n    };\n    // Load historical data when component mounts or time range changes\n    useEffect(() => {\n        const loadHistoricalData = async () => {\n            try {\n                // Fetch historical data from database\n                const response = await fetch(`/api/boards/historical-data?hours=${timeRange}`);\n                if (response.ok) {\n                    const historicalData = await response.json();\n                    if (historicalData && historicalData.length > 0) {\n                        setData(historicalData);\n                        setIsConnected(true);\n                    }\n                }\n            }\n            catch (err) {\n                console.error('Failed to load historical data:', err);\n            }\n        };\n        loadHistoricalData();\n    }, [timeRange]);\n    // Poll for new sensor data\n    useEffect(() => {\n        fetchSensorData();\n        const interval = setInterval(fetchSensorData, 30000);\n        return () => clearInterval(interval);\n    }, [timeRange]);\n    const graphTitles = {\n        temperature: 'Temperature Trends',\n        amps: 'Current Trends',\n        triacs: 'VFD Enable Status'\n    };\n    const handleNextGraph = () => {\n        const types = ['temperature', 'amps', 'triacs'];\n        const currentIndex = types.indexOf(graphType);\n        setGraphType(types[(currentIndex + 1) % types.length]);\n    };\n    const handlePrevGraph = () => {\n        const types = ['temperature', 'amps', 'triacs'];\n        const currentIndex = types.indexOf(graphType);\n        setGraphType(types[(currentIndex - 1 + types.length) % types.length]);\n    };\n    const renderChart = () => {\n        // Show \"Connect Sensors\" message if no data\n        if (!isConnected || data.length === 0) {\n            return (_jsxs(\"div\", { style: {\n                    height: 250,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    background: '#f9fafb',\n                    borderRadius: '8px',\n                    border: '2px dashed #d1d5db'\n                }, children: [_jsx(\"svg\", { width: \"64\", height: \"64\", viewBox: \"0 0 24 24\", fill: \"none\", stroke: \"#9ca3af\", strokeWidth: \"2\", children: _jsx(\"path\", { d: \"M22 12h-4l-3 9L9 3l-3 9H2\" }) }), _jsx(\"h3\", { style: {\n                            marginTop: '1rem',\n                            marginBottom: '0.5rem',\n                            color: '#6b7280',\n                            fontSize: '1.125rem',\n                            fontWeight: 600\n                        }, children: \"Connect Sensors\" }), _jsx(\"p\", { style: {\n                            color: '#9ca3af',\n                            fontSize: '0.875rem',\n                            textAlign: 'center',\n                            maxWidth: '250px'\n                        }, children: \"No sensor data available. Please ensure boards are connected and configured.\" })] }));\n        }\n        if (graphType === 'temperature') {\n            return (_jsx(ResponsiveContainer, { width: \"100%\", height: 250, children: _jsxs(LineChart, { data: data, margin: { top: 5, right: 30, left: 20, bottom: 5 }, children: [_jsx(CartesianGrid, { strokeDasharray: \"3 3\", stroke: \"#e5e7eb\" }), _jsx(XAxis, { dataKey: \"time\", stroke: \"#9ca3af\", fontSize: 12, interval: (() => {\n                                // Calculate proper interval based on time range and data points\n                                const totalPoints = data.length;\n                                if (timeRange <= 1) {\n                                    // 1 hour: show every 10 minutes (20 points)\n                                    return Math.max(1, Math.floor(totalPoints / 6));\n                                }\n                                else if (timeRange <= 4) {\n                                    // 4 hours: show every 30 minutes\n                                    return Math.max(1, Math.floor(totalPoints / 8));\n                                }\n                                else if (timeRange <= 8) {\n                                    // 8 hours: show every hour\n                                    return Math.max(1, Math.floor(totalPoints / 8));\n                                }\n                                else {\n                                    // 24 hours: show every 2-3 hours\n                                    return Math.max(1, Math.floor(totalPoints / 10));\n                                }\n                            })(), angle: -45, textAnchor: \"end\", height: 60 }), _jsx(YAxis, { stroke: \"#9ca3af\", fontSize: 12, domain: [50, 95], tickFormatter: (value) => `${value.toFixed(0)}°F` }), _jsx(Tooltip, { contentStyle: {\n                                backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                                border: '1px solid #e5e7eb',\n                                borderRadius: '0.375rem'\n                            }, formatter: (value) => [`${value?.toFixed(1)}°F`, ''] }), _jsx(Legend, { iconType: \"line\", formatter: (value, entry) => (_jsx(\"span\", { style: {\n                                    color: entry.color && entry.color.includes('rgba')\n                                        ? entry.color.replace(/[\\d.]+\\)/, '1)') // Make legend text fully opaque\n                                        : entry.color,\n                                    fontWeight: 600\n                                }, children: value })) }), _jsx(ReferenceLine, { y: thresholds.tempHigh, stroke: \"rgba(239, 68, 68, 0.3)\", strokeDasharray: \"5 5\" }), _jsx(ReferenceLine, { y: thresholds.tempLow, stroke: \"rgba(239, 68, 68, 0.3)\", strokeDasharray: \"5 5\" }), _jsx(ReferenceLine, { y: 70, stroke: \"rgba(34, 197, 94, 0.3)\", strokeDasharray: \"3 3\", label: \"Setpoint\" }), data.some(d => d.supply !== undefined) && (_jsx(Line, { type: \"monotone\", dataKey: \"supply\", stroke: \"#fed7aa\", strokeWidth: 2.5, dot: false, name: \"Supply Air\", legendType: \"line\" })), data.some(d => d.return !== undefined) && (_jsx(Line, { type: \"monotone\", dataKey: \"return\", stroke: \"rgba(245, 158, 11, 0.3)\", strokeWidth: 2.5, dot: false, name: \"Tower Return\", legendType: \"line\" })), data.some(d => d.oat !== undefined) && (_jsx(Line, { type: \"monotone\", dataKey: \"oat\", stroke: \"#8b5cf6\", strokeWidth: 2, dot: false, name: \"Outside Air\" })), data.some(d => d.space !== undefined) && (_jsx(Line, { type: \"monotone\", dataKey: \"space\", stroke: \"#10b981\", strokeWidth: 2, dot: false, name: \"Space\" })), data.some(d => d.hpSupply !== undefined) && (_jsx(Line, { type: \"monotone\", dataKey: \"hpSupply\", stroke: \"rgba(239, 68, 68, 0.5)\", strokeWidth: 2, dot: false, name: \"HP Loop Supply\", legendType: \"line\" }))] }) }));\n        }\n        else if (graphType === 'amps') {\n            // Define colors for different current sensors\n            const ampColors = ['#f59e0b', '#0ea5e9', '#10b981', '#8b5cf6', '#ec4899', '#06b6d4'];\n            // Find all amp keys in the data\n            const ampKeys = new Set();\n            data.forEach(point => {\n                Object.keys(point).forEach(key => {\n                    if (key.startsWith('amps') && key !== 'amps') {\n                        ampKeys.add(key);\n                    }\n                });\n            });\n            return (_jsx(ResponsiveContainer, { width: \"100%\", height: 250, children: _jsxs(LineChart, { data: data, margin: { top: 5, right: 30, left: 20, bottom: 5 }, children: [_jsx(CartesianGrid, { strokeDasharray: \"3 3\", stroke: \"#e5e7eb\" }), _jsx(XAxis, { dataKey: \"time\", stroke: \"#9ca3af\", fontSize: 12, interval: timeRange <= 1 ? 'preserveStartEnd' : timeRange <= 4 ? Math.floor(data.length / 8) : Math.floor(data.length / 6), angle: -45, textAnchor: \"end\", height: 60 }), _jsx(YAxis, { stroke: \"#9ca3af\", fontSize: 12, domain: [0, 50], tickFormatter: (value) => `${value.toFixed(0)}A` }), _jsx(Tooltip, { contentStyle: {\n                                backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                                border: '1px solid #e5e7eb',\n                                borderRadius: '0.375rem'\n                            }, formatter: (value) => [`${value?.toFixed(1)}A`, ''] }), _jsx(Legend, { iconType: \"line\", formatter: (value, entry) => (_jsx(\"span\", { style: {\n                                    color: entry.color && entry.color.includes('rgba')\n                                        ? entry.color.replace(/[\\d.]+\\)/, '1)') // Make legend text fully opaque\n                                        : entry.color,\n                                    fontWeight: 600\n                                }, children: value })) }), _jsx(ReferenceLine, { y: thresholds.ampsHigh, stroke: \"rgba(239, 68, 68, 0.3)\", strokeDasharray: \"5 5\", label: \"High Limit\" }), _jsx(ReferenceLine, { y: thresholds.ampsLow, stroke: \"rgba(34, 197, 94, 0.3)\", strokeDasharray: \"5 5\", label: \"Running\" }), Array.from(ampKeys).sort().map((key, index) => {\n                            const sensorName = currentSensorNames.get(key) || key;\n                            const displayName = sensorName\n                                .replace(/_/g, ' ')\n                                .replace(/tower/gi, 'Tower')\n                                .replace(/pump/gi, 'Pump')\n                                .replace(/vfd/gi, 'VFD')\n                                .replace(/current/gi, '')\n                                .replace(/amps/gi, '')\n                                .trim();\n                            return (_jsx(Line, { type: \"monotone\", dataKey: key, stroke: ampColors[index % ampColors.length], strokeWidth: 2.5, dot: false, name: displayName || `Current ${index + 1}` }, key));\n                        })] }) }));\n        }\n        else {\n            // Triacs graph\n            return (_jsx(ResponsiveContainer, { width: \"100%\", height: 250, children: _jsxs(LineChart, { data: data, margin: { top: 5, right: 30, left: 20, bottom: 5 }, children: [_jsx(CartesianGrid, { strokeDasharray: \"3 3\", stroke: \"#e5e7eb\" }), _jsx(XAxis, { dataKey: \"time\", stroke: \"#9ca3af\", fontSize: 12, interval: (() => {\n                                // Calculate proper interval based on time range and data points\n                                const totalPoints = data.length;\n                                if (timeRange <= 1) {\n                                    // 1 hour: show every 10 minutes (20 points)\n                                    return Math.max(1, Math.floor(totalPoints / 6));\n                                }\n                                else if (timeRange <= 4) {\n                                    // 4 hours: show every 30 minutes\n                                    return Math.max(1, Math.floor(totalPoints / 8));\n                                }\n                                else if (timeRange <= 8) {\n                                    // 8 hours: show every hour\n                                    return Math.max(1, Math.floor(totalPoints / 8));\n                                }\n                                else {\n                                    // 24 hours: show every 2-3 hours\n                                    return Math.max(1, Math.floor(totalPoints / 10));\n                                }\n                            })(), angle: -45, textAnchor: \"end\", height: 60 }), _jsx(YAxis, { stroke: \"#9ca3af\", fontSize: 12, domain: [0, 1], ticks: [0, 1], tickFormatter: (value) => value > 0.5 ? 'ON' : 'OFF' }), _jsx(Tooltip, { contentStyle: {\n                                backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                                border: '1px solid #e5e7eb',\n                                borderRadius: '0.375rem'\n                            }, formatter: (value) => value > 0.5 ? 'ON' : 'OFF' }), _jsx(Legend, { iconType: \"line\", formatter: (value, entry) => (_jsx(\"span\", { style: {\n                                    color: entry.color && entry.color.includes('rgba')\n                                        ? entry.color.replace(/[\\d.]+\\)/, '1)') // Make legend text fully opaque\n                                        : entry.color,\n                                    fontWeight: 600\n                                }, children: value })) }), _jsx(Line, { type: \"stepAfter\", dataKey: \"triac1\", stroke: \"#0ea5e9\", strokeWidth: 2.5, dot: false, name: \"Tower 1 VFD\" }), _jsx(Line, { type: \"stepAfter\", dataKey: \"triac2\", stroke: \"#10b981\", strokeWidth: 2.5, dot: false, name: \"Tower 2 VFD\" }), _jsx(Line, { type: \"stepAfter\", dataKey: \"triac3\", stroke: \"#f59e0b\", strokeWidth: 2.5, dot: false, name: \"Tower 3 VFD\" }), _jsx(Line, { type: \"stepAfter\", dataKey: \"triac4\", stroke: \"#8b5cf6\", strokeWidth: 2, strokeDasharray: \"5 5\", dot: false, name: \"Spare\" })] }) }));\n        }\n    };\n    return (_jsxs(\"div\", { className: \"trend-graph-card\", children: [_jsxs(\"div\", { className: \"trend-header\", children: [_jsx(\"button\", { className: \"trend-nav-btn\", onClick: handlePrevGraph, children: \"\\u2039\" }), _jsx(\"h3\", { style: { display: 'flex', flexDirection: 'column', alignItems: 'center' }, children: _jsx(\"span\", { children: graphTitles[graphType] }) }), _jsxs(\"div\", { className: \"trend-controls\", children: [_jsxs(\"select\", { className: \"time-range-select\", value: timeRange, onChange: (e) => setTimeRange(Number(e.target.value)), children: [_jsx(\"option\", { value: 1, children: \"1 Hour\" }), _jsx(\"option\", { value: 4, children: \"4 Hours\" }), _jsx(\"option\", { value: 8, children: \"8 Hours\" }), _jsx(\"option\", { value: 24, children: \"24 Hours\" })] }), _jsxs(\"div\", { className: \"trend-status\", children: [_jsx(\"span\", { className: `status-dot ${isConnected ? 'connected' : 'disconnected'}` }), isConnected ? 'Live' : 'Offline'] })] }), _jsx(\"button\", { className: \"trend-nav-btn\", onClick: handleNextGraph, children: \"\\u203A\" })] }), _jsx(\"div\", { style: { padding: '1rem' }, children: renderChart() })] }));\n};\nexport default TrendGraph;\n"],"names":["graphType","setGraphType","useState","data","setData","timeRange","setTimeRange","isConnected","setIsConnected","currentSensorNames","setCurrentSensorNames","Map","thresholds","tempHigh","tempLow","ampsHigh","ampsLow","fetchSensorData","async","response","fetch","ok","boardData","json","now","Date","newPoint","time","toLocaleString","month","day","hour","minute","timeZone","toLocaleTimeString","inputs","currentIndex","sensorNameMap","Object","entries","forEach","key","value","keyLower","toLowerCase","includes","supply","parseFloat","return","hpSupply","oat","space","ampKey","set","setpoint","size","outputs","triacs","triac1","triac2","triac3","triac4","keys","length","prevData","updated","intervalMinutes","maxPoints","Math","floor","slice","err","console","error","useEffect","historicalData","loadHistoricalData","interval","setInterval","clearInterval","className","children","onClick","types","indexOf","style","display","flexDirection","alignItems","temperature","amps","onChange","e","Number","target","padding","height","justifyContent","background","borderRadius","border","width","viewBox","fill","stroke","strokeWidth","d","marginTop","marginBottom","color","fontSize","fontWeight","textAlign","maxWidth","margin","top","right","left","bottom","strokeDasharray","dataKey","totalPoints","max","angle","textAnchor","domain","tickFormatter","toFixed","contentStyle","backgroundColor","formatter","iconType","entry","replace","y","label","some","undefined","type","dot","name","legendType","ampColors","ampKeys","Set","point","startsWith","add","Array","from","sort","map","index","displayName","get","trim","ticks","renderChart"],"sourceRoot":""}