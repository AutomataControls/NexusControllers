{"version":3,"file":"static/123.c5cdc8ccae868592d967.chunk.js","mappings":"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","sources":["webpack://automata-neural-nexus-portal/./src/styles/switch.css?1f95","webpack://automata-neural-nexus-portal/./src/components/Switch.tsx","webpack://automata-neural-nexus-portal/./src/styles/switch.css","webpack://automata-neural-nexus-portal/./src/pages/Controls.tsx"],"sourcesContent":["\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./switch.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./switch.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as SwitchPrimitive from '@radix-ui/react-switch';\nimport '../styles/switch.css';\nconst Switch = ({ checked, onCheckedChange, disabled = false, className = '' }) => {\n    return (_jsx(SwitchPrimitive.Root, { className: `switch-root ${className}`, checked: checked, onCheckedChange: onCheckedChange, disabled: disabled, children: _jsx(SwitchPrimitive.Thumb, { className: \"switch-thumb\" }) }));\n};\nexport default Switch;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Sleek Switch Component Styles */\n.switch-root {\n  width: 36px;\n  height: 18px;\n  background-color: #d1d5db;\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  border: none;\n  padding: 0;\n}\n\n.switch-root[data-state='checked'] {\n  background-color: #14b8a6;\n}\n\n.switch-root[data-disabled] {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.switch-thumb {\n  display: block;\n  width: 14px;\n  height: 14px;\n  background-color: white;\n  border-radius: 9999px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n  transition: transform 0.2s ease;\n  transform: translateX(2px);\n  will-change: transform;\n}\n\n.switch-thumb[data-state='checked'] {\n  transform: translateX(20px);\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/switch.css\"],\"names\":[],\"mappings\":\"AAAA,kCAAkC;AAClC;EACE,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,qBAAqB;EACrB,kBAAkB;EAClB,8CAA8C;EAC9C,eAAe;EACf,sCAAsC;EACtC,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,qBAAqB;EACrB,wCAAwC;EACxC,+BAA+B;EAC/B,0BAA0B;EAC1B,sBAAsB;AACxB;;AAEA;EACE,2BAA2B;AAC7B\",\"sourcesContent\":[\"/* Sleek Switch Component Styles */\\n.switch-root {\\n  width: 36px;\\n  height: 18px;\\n  background-color: #d1d5db;\\n  border-radius: 9999px;\\n  position: relative;\\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\\n  cursor: pointer;\\n  transition: background-color 0.2s ease;\\n  border: none;\\n  padding: 0;\\n}\\n\\n.switch-root[data-state='checked'] {\\n  background-color: #14b8a6;\\n}\\n\\n.switch-root[data-disabled] {\\n  opacity: 0.5;\\n  cursor: not-allowed;\\n}\\n\\n.switch-thumb {\\n  display: block;\\n  width: 14px;\\n  height: 14px;\\n  background-color: white;\\n  border-radius: 9999px;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\\n  transition: transform 0.2s ease;\\n  transform: translateX(2px);\\n  will-change: transform;\\n}\\n\\n.switch-thumb[data-state='checked'] {\\n  transform: translateX(20px);\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { AlertCircle } from 'lucide-react';\nimport Switch from '../components/Switch';\nimport { authenticatedFetch } from '../services/api';\nconst Controls = () => {\n    const [activeTab, setActiveTab] = useState('megabas');\n    const [boards, setBoards] = useState({\n        megabas: false,\n        relay16: false,\n        relay8: false,\n        input16: false\n    });\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [boardConfigs, setBoardConfigs] = useState([]);\n    // MegaBAS states\n    const [triacs, setTriacs] = useState([\n        { id: 1, state: false, mode: 'auto' },\n        { id: 2, state: false, mode: 'auto' },\n        { id: 3, state: false, mode: 'auto' },\n        { id: 4, state: false, mode: 'auto' }\n    ]);\n    const [analogOutputs, setAnalogOutputs] = useState([\n        { id: 1, value: 0, mode: 'auto' },\n        { id: 2, value: 0, mode: 'auto' },\n        { id: 3, value: 0, mode: 'auto' },\n        { id: 4, value: 0, mode: 'auto' }\n    ]);\n    const [universalInputs, setUniversalInputs] = useState([]);\n    const [inputs16, setInputs16] = useState([]);\n    const [relays16, setRelays16] = useState([]);\n    const [relays8, setRelays8] = useState([]);\n    // Detect connected boards on component mount\n    useEffect(() => {\n        detectBoards();\n        const interval = setInterval(fetchBoardStates, 5000); // Poll every 5 seconds\n        return () => clearInterval(interval);\n    }, []);\n    // Conversion function for sensor values\n    const convertValue = (rawValue, conversionType) => {\n        if (!conversionType || conversionType === 'raw') {\n            return { converted: rawValue.toFixed(0), unit: '' };\n        }\n        switch (conversionType) {\n            case 'temperature':\n                // Check if this is a 1k RTD or 10k thermistor based on the value range\n                // rawValue is resistance in ohms\n                if (rawValue < 2000) {\n                    // BALCO 1000Ω temperature sensor\n                    // Formula from Schneider Electric spec sheet:\n                    // Temperature = (SQRT((0.00644 × R) - 1.6597) - 1.961) / 0.00322\n                    const tempF = (Math.sqrt((0.00644 * rawValue) - 1.6597) - 1.961) / 0.00322;\n                    const clampedTemp = Math.max(-40, Math.min(250, tempF));\n                    return { converted: clampedTemp.toFixed(1), unit: '°F' };\n                }\n                else {\n                    // 10k thermistor\n                    const tempC = 1 / (Math.log(rawValue / 10000) / 3950 + 1 / 298.15) - 273.15;\n                    const tempF = tempC * 9 / 5 + 32;\n                    return { converted: tempF.toFixed(1), unit: '°F' };\n                }\n            case 'humidity':\n                // Convert to humidity percentage (you'll need to adjust this based on your sensor)\n                const humidity = (rawValue / 10000) * 100;\n                return { converted: humidity.toFixed(1), unit: '%' };\n            case 'pressure':\n                // Convert to PSI (adjust based on your pressure sensor specs)\n                const pressure = (rawValue / 1000) * 15; // Example conversion\n                return { converted: pressure.toFixed(1), unit: 'PSI' };\n            case 'voltage':\n                // Direct voltage reading\n                return { converted: (rawValue / 1000).toFixed(2), unit: 'V' };\n            case 'resistance':\n                return { converted: rawValue.toFixed(0), unit: 'Ω' };\n            default:\n                return { converted: rawValue.toFixed(0), unit: '' };\n        }\n    };\n    const detectBoards = async () => {\n        try {\n            const response = await authenticatedFetch('/api/boards/detect');\n            if (response.ok) {\n                const data = await response.json();\n                setBoards(data);\n                // Set first available tab as active\n                if (data.megabas)\n                    setActiveTab('megabas');\n                else if (data.input16)\n                    setActiveTab('input16');\n                else if (data.relay16)\n                    setActiveTab('relay16');\n                else if (data.relay8)\n                    setActiveTab('relay8');\n                else\n                    setActiveTab('megabas'); // Default to megabas tab\n            }\n            // Also fetch board configurations\n            const configResponse = await authenticatedFetch('/api/logic/boards');\n            if (configResponse.ok) {\n                const configs = await configResponse.json();\n                setBoardConfigs(configs);\n            }\n            setLoading(false);\n        }\n        catch (err) {\n            setError('Failed to detect boards');\n            setLoading(false);\n        }\n    };\n    const fetchBoardStates = async () => {\n        try {\n            const response = await authenticatedFetch('/api/boards/states');\n            if (response.ok) {\n                const data = await response.json();\n                if (data.megabas) {\n                    setTriacs(data.megabas.triacs || triacs);\n                    setAnalogOutputs(data.megabas.analogOutputs || analogOutputs);\n                    setUniversalInputs(data.megabas.inputs || []);\n                }\n                if (data.input16) {\n                    setInputs16(data.input16.inputs || []);\n                }\n                if (data.relay16) {\n                    setRelays16(data.relay16.relays || []);\n                }\n                if (data.relay8) {\n                    setRelays8(data.relay8.relays || []);\n                }\n            }\n        }\n        catch (err) {\n            console.error('Failed to fetch board states:', err);\n        }\n    };\n    const toggleRelay = async (board, relayId, state) => {\n        try {\n            const response = await authenticatedFetch('/api/boards/relay', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ board, relayId, state })\n            });\n            if (response.ok) {\n                // Update local state\n                if (board === 'megabas') {\n                    setTriacs(prev => prev.map(t => t.id === relayId ? { ...t, state } : t));\n                }\n                else if (board === 'relay16') {\n                    setRelays16(prev => prev.map(r => r.id === relayId ? { ...r, state } : r));\n                }\n                else if (board === 'relay8') {\n                    setRelays8(prev => prev.map(r => r.id === relayId ? { ...r, state } : r));\n                }\n            }\n        }\n        catch (err) {\n            console.error('Failed to toggle relay:', err);\n        }\n    };\n    const toggleMode = async (board, outputId, mode) => {\n        try {\n            const response = await authenticatedFetch('/api/boards/mode', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ board, outputId, mode })\n            });\n            if (response.ok) {\n                // Update local state based on board type\n                if (board === 'megabas-triac') {\n                    setTriacs(prev => prev.map(t => t.id === outputId ? { ...t, mode } : t));\n                }\n                else if (board === 'megabas-analog') {\n                    setAnalogOutputs(prev => prev.map(a => a.id === outputId ? { ...a, mode } : a));\n                }\n                else if (board === 'relay16') {\n                    setRelays16(prev => prev.map(r => r.id === outputId ? { ...r, mode } : r));\n                }\n                else if (board === 'relay8') {\n                    setRelays8(prev => prev.map(r => r.id === outputId ? { ...r, mode } : r));\n                }\n            }\n        }\n        catch (err) {\n            console.error('Failed to toggle mode:', err);\n        }\n    };\n    const updateAnalogOutput = async (outputId, value) => {\n        try {\n            const response = await authenticatedFetch('/api/boards/analog', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ board: 'megabas', outputId, value })\n            });\n            if (response.ok) {\n                setAnalogOutputs(prev => prev.map(a => a.id === outputId ? { ...a, value } : a));\n            }\n        }\n        catch (err) {\n            console.error('Failed to update analog output:', err);\n        }\n    };\n    const renderMegaBASTab = () => {\n        // Find the MegaBAS board config\n        const megabasConfig = boardConfigs.find(c => c.boardType === 'megabas' && c.enabled);\n        return (_jsxs(\"div\", { className: \"controls-tab-content\", children: [_jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"Triac Outputs\" }), _jsx(\"div\", { className: \"outputs-grid\", children: triacs.map(triac => {\n                                const triacConfig = megabasConfig?.outputs?.[`triac${triac.id}`];\n                                const triacName = triacConfig?.name || `Triac ${triac.id}`;\n                                return (_jsxs(\"div\", { className: \"output-card\", children: [_jsxs(\"div\", { className: \"output-header\", children: [_jsx(\"span\", { children: triacName }), _jsx(\"button\", { className: `mode-toggle ${triac.mode}`, onClick: () => toggleMode('megabas-triac', triac.id, triac.mode === 'auto' ? 'manual' : 'auto'), children: triac.mode === 'auto' ? 'AUTO' : 'MANUAL' })] }), _jsx(Switch, { checked: triac.state, onCheckedChange: (checked) => triac.mode === 'manual' && toggleRelay('megabas', triac.id, checked), disabled: triac.mode === 'auto' })] }, triac.id));\n                            }) })] }), _jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"Analog Outputs (0-10V)\" }), _jsx(\"div\", { className: \"outputs-grid\", children: analogOutputs.map(output => {\n                                const aoConfig = megabasConfig?.outputs?.[`ao${output.id}`];\n                                const aoName = aoConfig?.name || `AO ${output.id}`;\n                                return (_jsxs(\"div\", { className: \"output-card\", children: [_jsxs(\"div\", { className: \"output-header\", children: [_jsx(\"span\", { children: aoName }), _jsx(\"button\", { className: `mode-toggle ${output.mode}`, onClick: () => toggleMode('megabas-analog', output.id, output.mode === 'auto' ? 'manual' : 'auto'), children: output.mode === 'auto' ? 'AUTO' : 'MANUAL' })] }), _jsx(\"input\", { type: \"range\", min: \"0\", max: \"10\", step: \"0.1\", value: output.value, onChange: (e) => output.mode === 'manual' && updateAnalogOutput(output.id, parseFloat(e.target.value)), disabled: output.mode === 'auto', className: output.mode }), _jsxs(\"span\", { className: \"output-value\", children: [output.value.toFixed(1), \"V\"] })] }, output.id));\n                            }) })] }), _jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"Universal Inputs\" }), _jsx(\"div\", { className: \"inputs-grid\", children: universalInputs.map(input => {\n                                const inputConfig = megabasConfig?.inputs?.[input.id];\n                                const conversionType = inputConfig?.conversionType || 'raw';\n                                const { converted, unit } = convertValue(input.value, conversionType);\n                                return (_jsxs(\"div\", { className: \"input-card\", children: [_jsxs(\"div\", { className: \"input-header\", children: [_jsx(\"span\", { children: inputConfig?.name || input.label || `Input ${input.id}` }), _jsx(\"span\", { className: \"input-type\", children: conversionType })] }), _jsxs(\"div\", { className: \"input-values\", children: [_jsxs(\"div\", { className: \"input-value-converted\", children: [converted, unit] }), _jsxs(\"div\", { className: \"input-value-raw\", children: [input.value.toFixed(0), \" raw\"] })] })] }, input.id));\n                            }) })] })] }));\n    };\n    const render16InputTab = () => (_jsx(\"div\", { className: \"controls-tab-content\", children: _jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"16 Universal Inputs\" }), _jsx(\"div\", { className: \"inputs-grid large\", children: inputs16.map(input => {\n                        // Find the board config for this input\n                        const input16Config = boardConfigs.find(c => c.boardType === '16univin' && c.enabled);\n                        const inputConfig = input16Config?.inputs?.[input.id];\n                        const conversionType = inputConfig?.conversionType || 'raw';\n                        const { converted, unit } = convertValue(input.value, conversionType);\n                        return (_jsxs(\"div\", { className: \"input-card\", children: [_jsxs(\"div\", { className: \"input-header\", children: [_jsx(\"span\", { children: inputConfig?.name || input.label || `Input ${input.id}` }), _jsx(\"span\", { className: \"input-type\", children: conversionType })] }), _jsxs(\"div\", { className: \"input-values\", children: [_jsxs(\"div\", { className: \"input-value-converted\", children: [converted, unit] }), _jsxs(\"div\", { className: \"input-value-raw\", children: [input.value.toFixed(0), \" raw\"] })] })] }, input.id));\n                    }) })] }) }));\n    const render16RelayTab = () => (_jsx(\"div\", { className: \"controls-tab-content\", children: _jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"16 Relay Outputs\" }), _jsx(\"div\", { className: \"outputs-grid large\", children: relays16.map(relay => {\n                        // Find the board config for this relay\n                        const relay16Config = boardConfigs.find(c => c.boardType === '16relay' && c.enabled);\n                        const relayConfig = relay16Config?.outputs?.[relay.id];\n                        const relayName = relayConfig?.name || `Relay ${relay.id}`;\n                        return (_jsxs(\"div\", { className: \"output-card\", children: [_jsxs(\"div\", { className: \"output-header\", children: [_jsx(\"span\", { children: relayName }), _jsx(\"button\", { className: `mode-toggle ${relay.mode}`, onClick: () => toggleMode('relay16', relay.id, relay.mode === 'auto' ? 'manual' : 'auto'), children: relay.mode === 'auto' ? 'AUTO' : 'MANUAL' })] }), _jsx(Switch, { checked: relay.state, onCheckedChange: (checked) => relay.mode === 'manual' && toggleRelay('relay16', relay.id, checked), disabled: relay.mode === 'auto' })] }, relay.id));\n                    }) })] }) }));\n    const render8RelayTab = () => (_jsx(\"div\", { className: \"controls-tab-content\", children: _jsxs(\"div\", { className: \"controls-section\", children: [_jsx(\"h3\", { children: \"8 Relay Outputs\" }), _jsx(\"div\", { className: \"outputs-grid\", children: relays8.map(relay => (_jsxs(\"div\", { className: \"output-card\", children: [_jsxs(\"div\", { className: \"output-header\", children: [_jsxs(\"span\", { children: [\"Relay \", relay.id] }), _jsx(\"button\", { className: `mode-toggle ${relay.mode}`, onClick: () => toggleMode('relay8', relay.id, relay.mode === 'auto' ? 'manual' : 'auto'), children: relay.mode === 'auto' ? 'AUTO' : 'MANUAL' })] }), _jsx(Switch, { checked: relay.state, onCheckedChange: (checked) => relay.mode === 'manual' && toggleRelay('relay8', relay.id, checked), disabled: relay.mode === 'auto' })] }, relay.id))) })] }) }));\n    if (loading) {\n        return _jsx(\"div\", { className: \"controls-loading\", children: \"Detecting boards...\" });\n    }\n    if (error) {\n        return _jsxs(\"div\", { className: \"controls-error\", children: [_jsx(AlertCircle, {}), \" \", error] });\n    }\n    return (_jsxs(\"div\", { className: \"controls-container\", children: [_jsxs(\"div\", { className: \"controls-header\", children: [_jsx(\"h1\", { children: \"Manual I/O Controls\" }), _jsxs(\"div\", { className: \"board-status\", children: [boards.megabas && _jsx(\"span\", { className: \"board-chip\", children: \"MegaBAS\" }), boards.input16 && _jsx(\"span\", { className: \"board-chip\", children: \"16-Input\" }), boards.relay16 && _jsx(\"span\", { className: \"board-chip\", children: \"16-Relay\" }), boards.relay8 && _jsx(\"span\", { className: \"board-chip\", children: \"8-Relay\" })] })] }), _jsxs(\"div\", { className: \"controls-tabs\", children: [boards.megabas && (_jsx(\"button\", { className: `tab-button ${activeTab === 'megabas' ? 'active' : ''}`, onClick: () => setActiveTab('megabas'), children: \"MegaBAS\" })), boards.input16 && (_jsx(\"button\", { className: `tab-button ${activeTab === 'input16' ? 'active' : ''}`, onClick: () => setActiveTab('input16'), children: \"16 Inputs\" })), boards.relay16 && (_jsx(\"button\", { className: `tab-button ${activeTab === 'relay16' ? 'active' : ''}`, onClick: () => setActiveTab('relay16'), children: \"16 Relays\" })), boards.relay8 && (_jsx(\"button\", { className: `tab-button ${activeTab === 'relay8' ? 'active' : ''}`, onClick: () => setActiveTab('relay8'), children: \"8 Relays\" }))] }), _jsxs(\"div\", { className: \"controls-content\", children: [activeTab === 'megabas' && boards.megabas && renderMegaBASTab(), activeTab === 'input16' && boards.input16 && render16InputTab(), activeTab === 'relay16' && boards.relay16 && render16RelayTab(), activeTab === 'relay8' && boards.relay8 && render8RelayTab()] })] }));\n};\nexport default Controls;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","checked","onCheckedChange","disabled","className","children","___CSS_LOADER_EXPORT___","push","module","id","activeTab","setActiveTab","useState","boards","setBoards","megabas","relay16","relay8","input16","loading","setLoading","error","setError","boardConfigs","setBoardConfigs","triacs","setTriacs","state","mode","analogOutputs","setAnalogOutputs","value","universalInputs","setUniversalInputs","inputs16","setInputs16","relays16","setRelays16","relays8","setRelays8","useEffect","detectBoards","interval","setInterval","fetchBoardStates","clearInterval","convertValue","rawValue","conversionType","converted","toFixed","unit","tempF","Math","sqrt","max","min","log","async","response","ok","data","json","configResponse","configs","err","inputs","relays","console","toggleRelay","board","relayId","method","headers","body","JSON","stringify","prev","map","t","r","toggleMode","outputId","a","A","onClick","megabasConfig","find","c","boardType","enabled","triac","triacConfig","outputs","triacName","name","output","aoConfig","aoName","type","step","onChange","e","updateAnalogOutput","parseFloat","target","input","inputConfig","label","renderMegaBASTab","input16Config","relay","relay16Config","relayConfig","relayName"],"sourceRoot":""}