{"version":3,"file":"static/408.e5461a3488f3f59b7d19.chunk.js","mappings":"2MAgBA,MA4EA,EA5EgB,KACZ,MAAOA,EAASC,IAAc,IAAAC,WAAS,GACjCC,GAAY,IAAAC,QAAO,MAwEzB,OAvEA,IAAAC,WAAU,KAEN,MAAMC,EAAgBC,MAAOC,IAEzB,GAAIA,EAAMC,MAAQD,EAAMC,KAAKC,KAAM,CAC/B,MAAMC,EAAQC,eAAeC,QAAQ,SACrC,IAAKF,EACD,OACJ,IAC4B,oBAApBH,EAAMC,KAAKC,YAEL,IAAMI,KAAK,4BAA6B,CAC1CC,WAAYP,EAAMC,KAAKA,KAAKM,WAC5BC,UAAWR,EAAMC,KAAKA,KAAKO,UAC3BC,UAAWT,EAAMC,KAAKA,KAAKQ,UAC3BC,UAAWV,EAAMC,KAAKA,KAAKS,WAC5B,CACCC,QAAS,CAAEC,cAAe,UAAUT,OAExCU,QAAQC,IAAI,gCAAiCd,EAAMC,KAAKA,OAE/B,kBAApBD,EAAMC,KAAKC,WAEV,IAAMI,KAAK,uBAAwB,CACrCS,WAAY,gBACZC,YAAa,uBACbC,UAAW,WACXC,QAASlB,EAAMC,KAAKA,MACrB,CACCU,QAAS,CAAEC,cAAe,UAAUT,OAGf,yBAApBH,EAAMC,KAAKC,YAEV,IAAMI,KAAK,uBAAwB,CACrCS,WAAY,gBACZC,YAAa,yBAAyBhB,EAAMC,KAAKA,KAAKkB,SACtDF,UAAW,WACXC,QAASlB,EAAMC,KAAKA,MACrB,CACCU,QAAS,CAAEC,cAAe,UAAUT,MAGhD,CACA,MAAOiB,GACHP,QAAQO,MAAM,gCAAiCA,EACnD,CACJ,GAGJ,OADAC,OAAOC,iBAAiB,UAAWxB,GAC5B,KACHuB,OAAOE,oBAAoB,UAAWzB,KAE3C,KAkBK,UAAM,MAAO,CAAE0B,UAAW,mBAAoBC,SAAU,CAACjC,IAAY,SAAK,MAAO,CAAEgC,UAAW,iBAAkBC,UAAU,UAAM,MAAO,CAAED,UAAW,oBAAqBC,SAAU,EAAC,SAAK,MAAO,CAAED,UAAW,aAAc,SAAK,IAAK,CAAEA,UAAW,eAAgBC,SAAU,yBAA0B,SAAK,IAAK,CAAED,UAAW,kBAAmBC,SAAU,2CAA+C,SAAK,SAAU,CAAEC,IAAK/B,EAAWgC,IAAK,aAAcH,UAAW,cAAeI,OAjBtc,KACrBnC,GAAW,GAEX,IACI,GAAIE,EAAUkC,SAAWlC,EAAUkC,QAAQC,cAAe,CACtD,MAAMC,EAASpC,EAAUkC,QAAQG,iBAAiBC,cAAc,UAC5DF,IACAA,EAAOJ,IAAM,qBACbhC,EAAUkC,QAAQG,iBAAiBE,KAAKC,YAAYJ,GAE5D,CACJ,CACA,MAAOX,GAEHP,QAAQC,IAAI,wEAChB,GAEqfsB,MAAO,CAAEC,QAAS7C,EAAU,OAAS,SAAW8C,MAAO,gB","sources":["webpack://automata-neural-nexus-portal/./src/pages/NodeRED.tsx"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*\n * AutomataControls™ Remote Portal\n * Copyright © 2024 AutomataNexus, LLC. All rights reserved.\n *\n * PROPRIETARY AND CONFIDENTIAL\n * This software is proprietary to AutomataNexus and constitutes valuable\n * trade secrets. This software may not be copied, distributed, modified,\n * or disclosed to third parties without prior written authorization from\n * AutomataNexus. Use of this software is governed by a commercial license\n * agreement. Unauthorized use is strictly prohibited.\n *\n * AutomataNexusBms Controller Software\n */\nimport { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nconst NodeRED = () => {\n    const [loading, setLoading] = useState(true);\n    const iframeRef = useRef(null);\n    useEffect(() => {\n        // Listen for audit messages from iframe\n        const handleMessage = async (event) => {\n            // Verify origin if needed\n            if (event.data && event.data.type) {\n                const token = sessionStorage.getItem('token');\n                if (!token)\n                    return;\n                try {\n                    if (event.data.type === 'NODE_RED_DEPLOY') {\n                        // Log Node-RED deploy action\n                        await axios.post('/api/audit/nodered-deploy', {\n                            deployType: event.data.data.deployType,\n                            flowCount: event.data.data.flowCount,\n                            nodeCount: event.data.data.nodeCount,\n                            timestamp: event.data.data.timestamp\n                        }, {\n                            headers: { Authorization: `Bearer ${token}` }\n                        });\n                        console.log('Node-RED deploy audit logged:', event.data.data);\n                    }\n                    else if (event.data.type === 'NODE_RED_SAVE') {\n                        // Log save action\n                        await axios.post('/api/audit/ui-change', {\n                            actionType: 'NODE_RED_SAVE',\n                            description: 'Node-RED flows saved',\n                            component: 'Node-RED',\n                            details: event.data.data\n                        }, {\n                            headers: { Authorization: `Bearer ${token}` }\n                        });\n                    }\n                    else if (event.data.type === 'NODE_RED_MENU_ACTION') {\n                        // Log menu actions\n                        await axios.post('/api/audit/ui-change', {\n                            actionType: 'NODE_RED_MENU',\n                            description: `Node-RED menu action: ${event.data.data.action}`,\n                            component: 'Node-RED',\n                            details: event.data.data\n                        }, {\n                            headers: { Authorization: `Bearer ${token}` }\n                        });\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to log Node-RED audit:', error);\n                }\n            }\n        };\n        window.addEventListener('message', handleMessage);\n        return () => {\n            window.removeEventListener('message', handleMessage);\n        };\n    }, []);\n    const handleIframeLoad = () => {\n        setLoading(false);\n        // Inject audit script into iframe\n        try {\n            if (iframeRef.current && iframeRef.current.contentWindow) {\n                const script = iframeRef.current.contentDocument?.createElement('script');\n                if (script) {\n                    script.src = '/node-red-audit.js';\n                    iframeRef.current.contentDocument?.head.appendChild(script);\n                }\n            }\n        }\n        catch (error) {\n            // Cross-origin restriction, try alternative method\n            console.log('Could not inject audit script directly, Node-RED audit may be limited');\n        }\n    };\n    return (_jsxs(\"div\", { className: \"iframe-container\", children: [loading && (_jsx(\"div\", { className: \"iframe-loading\", children: _jsxs(\"div\", { className: \"spinner-container\", children: [_jsx(\"div\", { className: \"spinner\" }), _jsx(\"p\", { className: \"loading-text\", children: \"Loading Node-RED...\" }), _jsx(\"p\", { className: \"loading-subtext\", children: \"Flow-based programming interface\" })] }) })), _jsx(\"iframe\", { ref: iframeRef, src: \"/node-red/\", className: \"full-iframe\", onLoad: handleIframeLoad, style: { display: loading ? 'none' : 'block' }, title: \"Node-RED\" })] }));\n};\nexport default NodeRED;\n"],"names":["loading","setLoading","useState","iframeRef","useRef","useEffect","handleMessage","async","event","data","type","token","sessionStorage","getItem","post","deployType","flowCount","nodeCount","timestamp","headers","Authorization","console","log","actionType","description","component","details","action","error","window","addEventListener","removeEventListener","className","children","ref","src","onLoad","current","contentWindow","script","contentDocument","createElement","head","appendChild","style","display","title"],"sourceRoot":""}