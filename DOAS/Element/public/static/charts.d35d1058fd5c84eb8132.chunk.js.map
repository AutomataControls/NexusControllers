{"version":3,"file":"static/charts.d35d1058fd5c84eb8132.chunk.js","mappings":";oQAYI,SAASA,IACF,CAGP,MAAMC,EAAM,MACZ,IAAIC,EAAK,EACT,MAAO,IAAIA,GACd,EAHe,GAQZ,SAASC,EAAcC,GACvB,OAAOA,OACX,CAKI,SAASC,EAAQD,GACjB,GAAIE,MAAMD,SAAWC,MAAMD,QAAQD,GAC/B,OAAO,EAEX,MAAMG,EAAOC,OAAOC,UAAUC,SAASC,KAAKP,GAC5C,MAAyB,YAArBG,EAAKK,MAAM,EAAG,IAAuC,WAAnBL,EAAKK,OAAO,EAItD,CAKI,SAASC,EAAST,GAClB,OAAiB,OAAVA,GAA4D,oBAA1CI,OAAOC,UAAUC,SAASC,KAAKP,EAC5D,CAII,SAASU,EAAeV,GACxB,OAAyB,iBAAVA,GAAsBA,aAAiBW,SAAWC,UAAUZ,EAC/E,CAKI,SAASa,EAAgBb,EAAOc,GAChC,OAAOJ,EAAeV,GAASA,EAAQc,CAC3C,CAKI,SAASC,EAAef,EAAOc,GAC/B,YAAwB,IAAVd,EAAwBc,EAAed,CACzD,CASI,SAASgB,EAASC,EAAIC,EAAMC,GAC5B,GAAIF,GAAyB,mBAAZA,EAAGV,KAChB,OAAOU,EAAGG,MAAMD,EAASD,EAEjC,CACA,SAASG,EAAKC,EAAUL,EAAIE,EAASI,GACjC,IAAIC,EAAGC,EAAKC,EACZ,GAAIzB,EAAQqB,GAER,GADAG,EAAMH,EAASK,OACXJ,EACA,IAAIC,EAAIC,EAAM,EAAGD,GAAK,EAAGA,IACrBP,EAAGV,KAAKY,EAASG,EAASE,GAAIA,QAGlC,IAAIA,EAAI,EAAGA,EAAIC,EAAKD,IAChBP,EAAGV,KAAKY,EAASG,EAASE,GAAIA,QAGnC,GAAIf,EAASa,GAGhB,IAFAI,EAAOtB,OAAOsB,KAAKJ,GACnBG,EAAMC,EAAKC,OACPH,EAAI,EAAGA,EAAIC,EAAKD,IAChBP,EAAGV,KAAKY,EAASG,EAASI,EAAKF,IAAKE,EAAKF,GAGrD,CAMI,SAASI,EAAeC,EAAIC,GAC5B,IAAIN,EAAGO,EAAMC,EAAIC,EACjB,IAAKJ,IAAOC,GAAMD,EAAGF,SAAWG,EAAGH,OAC/B,OAAO,EAEX,IAAIH,EAAI,EAAGO,EAAOF,EAAGF,OAAQH,EAAIO,IAAQP,EAGrC,GAFAQ,EAAKH,EAAGL,GACRS,EAAKH,EAAGN,GACJQ,EAAGE,eAAiBD,EAAGC,cAAgBF,EAAGG,QAAUF,EAAGE,MACvD,OAAO,EAGf,OAAO,CACX,CAII,SAASC,EAAMC,GACf,GAAIpC,EAAQoC,GACR,OAAOA,EAAOC,IAAIF,GAEtB,GAAI3B,EAAS4B,GAAS,CAClB,MAAME,EAASnC,OAAOoC,OAAO,MACvBd,EAAOtB,OAAOsB,KAAKW,GACnBI,EAAOf,EAAKC,OAClB,IAAIe,EAAI,EACR,KAAMA,EAAID,IAAQC,EACdH,EAAOb,EAAKgB,IAAMN,EAAMC,EAAOX,EAAKgB,KAExC,OAAOH,CACX,CACA,OAAOF,CACX,CACA,SAASM,EAAWC,GAChB,OAIoB,IAJb,CACH,YACA,YACA,eACFC,QAAQD,EACd,CAKI,SAASE,EAAQF,EAAKL,EAAQF,EAAQU,GACtC,IAAKJ,EAAWC,GACZ,OAEJ,MAAMI,EAAOT,EAAOK,GACdK,EAAOZ,EAAOO,GAChBnC,EAASuC,IAASvC,EAASwC,GAE3BC,EAAMF,EAAMC,EAAMF,GAElBR,EAAOK,GAAOR,EAAMa,EAE5B,CACA,SAASC,EAAMX,EAAQF,EAAQU,GAC3B,MAAMI,EAAUlD,EAAQoC,GAAUA,EAAS,CACvCA,GAEEN,EAAOoB,EAAQxB,OACrB,IAAKlB,EAAS8B,GACV,OAAOA,EAGX,MAAMa,GADNL,EAAUA,GAAW,CAAC,GACCK,QAAUN,EACjC,IAAIO,EACJ,IAAI,IAAI7B,EAAI,EAAGA,EAAIO,IAAQP,EAAE,CAEzB,GADA6B,EAAUF,EAAQ3B,IACbf,EAAS4C,GACV,SAEJ,MAAM3B,EAAOtB,OAAOsB,KAAK2B,GACzB,IAAI,IAAIX,EAAI,EAAGD,EAAOf,EAAKC,OAAQe,EAAID,IAAQC,EAC3CU,EAAO1B,EAAKgB,GAAIH,EAAQc,EAASN,EAEzC,CACA,OAAOR,CACX,CACA,SAASe,EAAQf,EAAQF,GAErB,OAAOa,EAAMX,EAAQF,EAAQ,CACzBe,OAAQG,GAEhB,CAII,SAASA,EAAUX,EAAKL,EAAQF,GAChC,IAAKM,EAAWC,GACZ,OAEJ,MAAMI,EAAOT,EAAOK,GACdK,EAAOZ,EAAOO,GAChBnC,EAASuC,IAASvC,EAASwC,GAC3BK,EAAQN,EAAMC,GACN7C,OAAOC,UAAUmD,eAAejD,KAAKgC,EAAQK,KACrDL,EAAOK,GAAOR,EAAMa,GAE5B,CASA,MAAMQ,EAAe,CAEjB,GAAKC,GAAIA,EAETC,EAAIC,GAAIA,EAAED,EACVE,EAAID,GAAIA,EAAEC,GA+Bd,SAASC,EAAiBC,EAAKnB,GAC3B,MAAMoB,EAAWP,EAAab,KAASa,EAAab,GAbxD,SAAyBA,GACrB,MAAMlB,EAhBN,SAAmBkB,GACnB,MAAMqB,EAAQrB,EAAIsB,MAAM,KAClBxC,EAAO,GACb,IAAIyC,EAAM,GACV,IAAK,MAAMC,KAAQH,EACfE,GAAOC,EACHD,EAAIE,SAAS,MACbF,EAAMA,EAAI3D,MAAM,GAAI,GAAK,KAEzBkB,EAAK4C,KAAKH,GACVA,EAAM,IAGd,OAAOzC,CACX,CAEiB6C,CAAU3B,GACvB,OAAQmB,IACJ,IAAK,MAAMrB,KAAKhB,EAAK,CACjB,GAAU,KAANgB,EACA,MAEJqB,EAAMA,GAAOA,EAAIrB,EACrB,CACA,OAAOqB,EAEf,CAE+DS,CAAgB5B,IAC3E,OAAOoB,EAASD,EACpB,CAGI,SAASU,EAAYC,GACrB,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIlE,MAAM,EACnD,CACA,MAAMqE,EAAW7E,QAAyB,IAAVA,EAC1B8E,EAAc9E,GAAyB,mBAAVA,EAE7B+E,EAAY,CAACC,EAAGC,KAClB,GAAID,EAAEE,OAASD,EAAEC,KACb,OAAO,EAEX,IAAK,MAAMC,KAAQH,EACf,IAAKC,EAAEG,IAAID,GACP,OAAO,EAGf,OAAO,GAYDE,EAAKC,KAAKD,GACdE,EAAM,EAAIF,EACVG,EAAQD,EAAMF,EACdI,EAAW9E,OAAO+E,kBAClBC,EAAcN,EAAK,IACnBO,EAAUP,EAAK,EACfQ,EAAaR,EAAK,EAClBS,EAAqB,EAALT,EAAS,EACzBU,EAAQT,KAAKS,MACbC,EAAOV,KAAKU,KAClB,SAASC,EAAatC,EAAGE,EAAGqC,GACxB,OAAOZ,KAAKa,IAAIxC,EAAIE,GAAKqC,CAC7B,CAGI,SAASE,EAAQC,GACjB,MAAMC,EAAehB,KAAKiB,MAAMF,GAChCA,EAAQJ,EAAaI,EAAOC,EAAcD,EAAQ,KAAQC,EAAeD,EACzE,MAAMG,EAAYlB,KAAKmB,IAAI,GAAInB,KAAKoB,MAAMX,EAAMM,KAC1CM,EAAWN,EAAQG,EAEzB,OADqBG,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAI,IAC3DH,CAC1B,CAyBA,SAASI,EAASC,GACd,OAJA,SAAwBA,GACxB,MAAoB,iBAANA,GAA+B,iBAANA,GAAwB,OAANA,KAAgBC,OAAOC,eAAeF,GAAK,aAAcA,GAAK,YAAaA,EACxI,CAEYG,CAAeH,KAAOI,MAAMC,WAAWL,KAAOjG,SAASiG,EACnE,CAiBA,SAASM,EAAUC,GACf,OAAOA,GAAW/B,EAAK,IAC3B,CAUI,SAASgC,EAAe1D,GACxB,IAAKjD,EAAeiD,GAChB,OAEJ,IAAI2D,EAAI,EACJC,EAAI,EACR,KAAMjC,KAAKiB,MAAM5C,EAAI2D,GAAKA,IAAM3D,GAC5B2D,GAAK,GACLC,IAEJ,OAAOA,CACX,CAeA,SAASC,EAAsBC,EAAKC,GAChC,OAAOpC,KAAKqC,KAAKrC,KAAKmB,IAAIiB,EAAI/D,EAAI8D,EAAI9D,EAAG,GAAK2B,KAAKmB,IAAIiB,EAAI7D,EAAI4D,EAAI5D,EAAG,GAC1E,CAII,SAAS+D,EAAW5C,EAAGC,GACvB,OAAQD,EAAIC,EAAIO,GAASD,EAAMF,CACnC,CAII,SAASwC,EAAgB7C,GACzB,OAAQA,EAAIO,EAAMA,GAAOA,CAC7B,CAGI,SAASuC,EAAcC,EAAOC,EAAOC,EAAKC,GAC1C,MAAMlD,EAAI6C,EAAgBE,GACpBI,EAAIN,EAAgBG,GACpBV,EAAIO,EAAgBI,GACpBG,EAAeP,EAAgBM,EAAInD,GACnCqD,EAAaR,EAAgBP,EAAItC,GACjCsD,EAAeT,EAAgB7C,EAAImD,GACnCI,EAAaV,EAAgB7C,EAAIsC,GACvC,OAAOtC,IAAMmD,GAAKnD,IAAMsC,GAAKY,GAAyBC,IAAMb,GAAKc,EAAeC,GAAcC,EAAeC,CACjH,CAOI,SAASC,EAAYxI,EAAOyI,EAAKC,GACjC,OAAOpD,KAAKoD,IAAID,EAAKnD,KAAKmD,IAAIC,EAAK1I,GACvC,CAaI,SAAS2I,EAAW3I,EAAOgI,EAAOC,EAAK/B,EAAU,MACjD,OAAOlG,GAASsF,KAAKmD,IAAIT,EAAOC,GAAO/B,GAAWlG,GAASsF,KAAKoD,IAAIV,EAAOC,GAAO/B,CACtF,CAEA,SAAS0C,EAAQC,EAAO7I,EAAO8I,GAC3BA,EAAMA,GAAO,CAAE3G,GAAQ0G,EAAM1G,GAASnC,GACtC,IAEI+I,EAFAC,EAAKH,EAAMlH,OAAS,EACpBsH,EAAK,EAET,KAAMD,EAAKC,EAAK,GACZF,EAAME,EAAKD,GAAM,EACbF,EAAIC,GACJE,EAAKF,EAELC,EAAKD,EAGb,MAAO,CACHE,KACAD,KAER,CAQI,MAAME,EAAe,CAACL,EAAOjG,EAAK5C,EAAOmJ,IAAOP,EAAQC,EAAO7I,EAAOmJ,EAAQhH,IAC1E,MAAMiH,EAAKP,EAAM1G,GAAOS,GACxB,OAAOwG,EAAKpJ,GAASoJ,IAAOpJ,GAAS6I,EAAM1G,EAAQ,GAAGS,KAAS5C,GAC9DmC,GAAQ0G,EAAM1G,GAAOS,GAAO5C,GAO3BqJ,EAAgB,CAACR,EAAOjG,EAAK5C,IAAQ4I,EAAQC,EAAO7I,EAAQmC,GAAQ0G,EAAM1G,GAAOS,IAAQ5C,GAkB7FsJ,EAAc,CAChB,OACA,MACA,QACA,SACA,WAkCJ,SAASC,EAAoBC,EAAOC,GAChC,MAAMC,EAAOF,EAAMG,SACnB,IAAKD,EACD,OAEJ,MAAME,EAAYF,EAAKE,UACjBzH,EAAQyH,EAAU/G,QAAQ4G,IACjB,IAAXtH,GACAyH,EAAUC,OAAO1H,EAAO,GAExByH,EAAUjI,OAAS,IAGvB2H,EAAYQ,QAASlH,WACV4G,EAAM5G,YAEV4G,EAAMG,SACjB,CAgBG,MAAMI,EACiB,oBAAXC,OACA,SAAShJ,GACZ,OAAOA,GACX,EAEGgJ,OAAOC,sBAKd,SAASC,GAAUjJ,EAAIE,GACvB,IAAIgJ,EAAY,GACZC,GAAU,EACd,OAAO,YAAYlJ,GAEfiJ,EAAYjJ,EACPkJ,IACDA,GAAU,EACVL,EAAiBxJ,KAAKyJ,OAAQ,KAC1BI,GAAU,EACVnJ,EAAGG,MAAMD,EAASgJ,KAG9B,CACJ,CAkBI,MAAME,GAAsBC,GAAkB,UAAVA,EAAoB,OAAmB,QAAVA,EAAkB,QAAU,SAIvFC,GAAiB,CAACD,EAAOtC,EAAOC,IAAgB,UAAVqC,EAAoBtC,EAAkB,QAAVsC,EAAkBrC,GAAOD,EAAQC,GAAO,EAsEpH,MAAMuC,GAAUC,GAAU,IAANA,GAAiB,IAANA,EACzBC,GAAY,CAACD,EAAGtC,EAAGZ,KAAMjC,KAAKmB,IAAI,EAAG,IAAMgE,GAAK,IAAMnF,KAAKqF,KAAKF,EAAItC,GAAK5C,EAAMgC,GAC/EqD,GAAa,CAACH,EAAGtC,EAAGZ,IAAIjC,KAAKmB,IAAI,GAAI,GAAKgE,GAAKnF,KAAKqF,KAAKF,EAAItC,GAAK5C,EAAMgC,GAAK,EAKzEsD,GAAU,CAChBC,OAASL,GAAIA,EACbM,WAAaN,GAAIA,EAAIA,EACrBO,YAAcP,IAAKA,GAAKA,EAAI,GAC5BQ,cAAgBR,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,GAAK,MAASA,GAAKA,EAAI,GAAK,GAC3ES,YAAcT,GAAIA,EAAIA,EAAIA,EAC1BU,aAAeV,IAAKA,GAAK,GAAKA,EAAIA,EAAI,EACtCW,eAAiBX,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAI,GAClFY,YAAcZ,GAAIA,EAAIA,EAAIA,EAAIA,EAC9Ba,aAAeb,MAAOA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC5Cc,eAAiBd,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,GAAK,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC3Fe,YAAcf,GAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAClCgB,aAAehB,IAAKA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,EAC9CiB,eAAiBjB,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAClGkB,WAAalB,GAA6B,EAAxBnF,KAAKsG,IAAInB,EAAI7E,GAC/BiG,YAAcpB,GAAInF,KAAKqF,IAAIF,EAAI7E,GAC/BkG,cAAgBrB,IAAK,IAAOnF,KAAKsG,IAAIvG,EAAKoF,GAAK,GAC/CsB,WAAatB,GAAU,IAANA,EAAU,EAAInF,KAAKmB,IAAI,EAAG,IAAMgE,EAAI,IACrDuB,YAAcvB,GAAU,IAANA,EAAU,EAA4B,EAAvBnF,KAAKmB,IAAI,GAAI,GAAKgE,GACnDwB,cAAgBxB,GAAID,GAAOC,GAAKA,EAAIA,EAAI,GAAM,GAAMnF,KAAKmB,IAAI,EAAG,IAAU,EAAJgE,EAAQ,IAAM,IAAyC,EAAjCnF,KAAKmB,IAAI,GAAI,IAAU,EAAJgE,EAAQ,KACvHyB,WAAazB,GAAIA,GAAK,EAAIA,IAAMnF,KAAKqC,KAAK,EAAI8C,EAAIA,GAAK,GACvD0B,YAAc1B,GAAInF,KAAKqC,KAAK,GAAK8C,GAAK,GAAKA,GAC3C2B,cAAgB3B,IAAKA,GAAK,IAAO,GAAK,IAAOnF,KAAKqC,KAAK,EAAI8C,EAAIA,GAAK,GAAK,IAAOnF,KAAKqC,KAAK,GAAK8C,GAAK,GAAKA,GAAK,GAC9G4B,cAAgB5B,GAAID,GAAOC,GAAKA,EAAIC,GAAUD,EAAG,KAAO,IACxD6B,eAAiB7B,GAAID,GAAOC,GAAKA,EAAIG,GAAWH,EAAG,KAAO,IAC1D,gBAAA8B,CAAkB9B,GACd,MAAMtC,EAAI,MAEV,OAAOqC,GAAOC,GAAKA,EAAIA,EAAI,GAAM,GAAMC,GAAc,EAAJD,EAAOtC,EAD9C,KACsD,GAAM,GAAMyC,GAAe,EAAJH,EAAQ,EAAGtC,EADxF,IAEd,EACA,UAAAqE,CAAY/B,GACR,MAAMtC,EAAI,QACV,OAAOsC,EAAIA,IAAMtC,EAAI,GAAKsC,EAAItC,EAClC,EACA,WAAAsE,CAAahC,GACT,MAAMtC,EAAI,QACV,OAAQsC,GAAK,GAAKA,IAAMtC,EAAI,GAAKsC,EAAItC,GAAK,CAC9C,EACA,aAAAuE,CAAejC,GACX,IAAItC,EAAI,QACR,OAAKsC,GAAK,IAAO,EACCA,EAAIA,IAAqB,GAAdtC,GAAK,QAAcsC,EAAItC,GAAzC,GAEJ,KAAQsC,GAAK,GAAKA,IAAqB,GAAdtC,GAAK,QAAcsC,EAAItC,GAAK,EAChE,EACAwE,aAAelC,GAAI,EAAII,GAAQ+B,cAAc,EAAInC,GACjD,aAAAmC,CAAenC,GACX,MAAMoC,EAAI,OACJC,EAAI,KACV,OAAIrC,EAAI,EAAIqC,EACDD,EAAIpC,EAAIA,EAEfA,EAAI,EAAIqC,EACDD,GAAKpC,GAAK,IAAMqC,GAAKrC,EAAI,IAEhCA,EAAI,IAAMqC,EACHD,GAAKpC,GAAK,KAAOqC,GAAKrC,EAAI,MAE9BoC,GAAKpC,GAAK,MAAQqC,GAAKrC,EAAI,OACtC,EACAsC,gBAAkBtC,GAAIA,EAAI,GAAoC,GAA9BI,GAAQ8B,aAAiB,EAAJlC,GAAkD,GAAnCI,GAAQ+B,cAAkB,EAAJnC,EAAQ,GAAW,IAGjH,SAASuC,GAAoBhN,GACzB,GAAIA,GAA0B,iBAAVA,EAAoB,CACpC,MAAMG,EAAOH,EAAMM,WACnB,MAAgB,2BAATH,GAA8C,4BAATA,CAChD,CACA,OAAO,CACX,CACA,SAAS8M,GAAMjN,GACX,OAAOgN,GAAoBhN,GAASA,EAAQ,IAAI,KAAMA,EAC1D,CACA,SAASkN,GAAclN,GACnB,OAAOgN,GAAoBhN,GAASA,EAAQ,IAAI,KAAMA,GAAOmN,SAAS,IAAKC,OAAO,IAAKC,WAC3F,CAEA,MAAMC,GAAU,CACZ,IACA,IACA,cACA,SACA,WAEEC,GAAS,CACX,QACA,cACA,mBAgFEC,GAAY,IAAIC,IAWtB,SAASC,GAAaC,EAAKC,EAAQ7K,GAC/B,OAXJ,SAAyB6K,EAAQ7K,GAC7BA,EAAUA,GAAW,CAAC,EACtB,MAAM8K,EAAWD,EAASE,KAAKC,UAAUhL,GACzC,IAAIiL,EAAYR,GAAUS,IAAIJ,GAK9B,OAJKG,IACDA,EAAY,IAAIE,KAAKC,aAAaP,EAAQ7K,GAC1CyK,GAAUY,IAAIP,EAAUG,IAErBA,CACX,CAEWK,CAAgBT,EAAQ7K,GAASuL,OAAOX,EACnD,CAEA,MAAMY,GAAa,CAClBC,OAAQxO,GACMC,EAAQD,GAAUA,EAAQ,GAAKA,EAE7C,OAAAyO,CAASC,EAAWvM,EAAOwM,GACpB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMd,EAASgB,KAAKC,MAAM9L,QAAQ6K,OAClC,IAAIkB,EACAC,EAAQL,EACZ,GAAIC,EAAMhN,OAAS,EAAG,CAClB,MAAMqN,EAAU1J,KAAKoD,IAAIpD,KAAKa,IAAIwI,EAAM,GAAG3O,OAAQsF,KAAKa,IAAIwI,EAAMA,EAAMhN,OAAS,GAAG3B,SAChFgP,EAAU,MAAQA,EAAU,QAC5BF,EAAW,cAEfC,EA8BZ,SAAwBL,EAAWC,GAC/B,IAAII,EAAQJ,EAAMhN,OAAS,EAAIgN,EAAM,GAAG3O,MAAQ2O,EAAM,GAAG3O,MAAQ2O,EAAM,GAAG3O,MAAQ2O,EAAM,GAAG3O,MAI3F,OAHIsF,KAAKa,IAAI4I,IAAU,GAAKL,IAAcpJ,KAAKoB,MAAMgI,KACjDK,EAAQL,EAAYpJ,KAAKoB,MAAMgI,IAE5BK,CACX,CApCoBE,CAAeP,EAAWC,EACtC,CACA,MAAMO,EAAWnJ,EAAMT,KAAKa,IAAI4I,IAC1BI,EAAalI,MAAMiI,GAAY,EAAI5J,KAAKoD,IAAIpD,KAAKmD,KAAK,EAAInD,KAAKoB,MAAMwI,GAAW,IAAK,GACrFnM,EAAU,CACZ+L,WACAM,sBAAuBD,EACvBE,sBAAuBF,GAG3B,OADA/O,OAAOkP,OAAOvM,EAAS6L,KAAK7L,QAAQ4L,MAAML,QACnCZ,GAAagB,EAAWd,EAAQ7K,EAC3C,EACH,WAAAwM,CAAab,EAAWvM,EAAOwM,GACxB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMc,EAASb,EAAMxM,GAAOsN,aAAef,EAAYpJ,KAAKmB,IAAI,GAAInB,KAAKoB,MAAMX,EAAM2I,KACrF,MAAI,CACA,EACA,EACA,EACA,EACA,GACA,IACFgB,SAASF,IAAWrN,EAAQ,GAAMwM,EAAMhN,OAC/B4M,GAAWE,QAAQlO,KAAKqO,KAAMF,EAAWvM,EAAOwM,GAEpD,EACX,GASH,IAAIgB,GAAQ,CACTpB,eA2EJ,MAAMqB,GAAYxP,OAAOoC,OAAO,MAC1BqN,GAAczP,OAAOoC,OAAO,MACjC,SAASsN,GAAWC,EAAMnN,GACvB,IAAKA,EACD,OAAOmN,EAEX,MAAMrO,EAAOkB,EAAIsB,MAAM,KACvB,IAAI,IAAI1C,EAAI,EAAGqF,EAAInF,EAAKC,OAAQH,EAAIqF,IAAKrF,EAAE,CACvC,MAAMkB,EAAIhB,EAAKF,GACfuO,EAAOA,EAAKrN,KAAOqN,EAAKrN,GAAKtC,OAAOoC,OAAO,MAC/C,CACA,OAAOuN,CACX,CACA,SAAS3B,GAAI4B,EAAMC,EAAOzB,GACtB,MAAqB,iBAAVyB,EACA/M,EAAM4M,GAAWE,EAAMC,GAAQzB,GAEnCtL,EAAM4M,GAAWE,EAAM,IAAKC,EACvC,CACC,MAAMC,GACH,WAAAC,CAAYC,EAAcC,GACtBzB,KAAK0B,eAAYC,EACjB3B,KAAK4B,gBAAkB,kBACvB5B,KAAK6B,YAAc,kBACnB7B,KAAK3B,MAAQ,OACb2B,KAAK8B,SAAW,CAAC,EACjB9B,KAAK+B,iBAAoBC,GAAUA,EAAQ/B,MAAMgC,SAASC,sBAC1DlC,KAAKmC,SAAW,CAAC,EACjBnC,KAAKoC,OAAS,CACV,YACA,WACA,QACA,aACA,aAEJpC,KAAKqC,KAAO,CACRC,OAAQ,qDACRhM,KAAM,GACNiM,MAAO,SACPC,WAAY,IACZC,OAAQ,MAEZzC,KAAK0C,MAAQ,CAAC,EACd1C,KAAK2C,qBAAuB,CAACC,EAAKzO,IAAUmK,GAAcnK,EAAQyN,iBAClE5B,KAAK6C,iBAAmB,CAACD,EAAKzO,IAAUmK,GAAcnK,EAAQ0N,aAC9D7B,KAAK8C,WAAa,CAACF,EAAKzO,IAAUmK,GAAcnK,EAAQkK,OACxD2B,KAAK+C,UAAY,IACjB/C,KAAKgD,YAAc,CACfC,KAAM,UACNC,WAAW,EACXC,kBAAkB,GAEtBnD,KAAKoD,qBAAsB,EAC3BpD,KAAKqD,QAAU,KACfrD,KAAKsD,QAAU,KACftD,KAAKuD,SAAU,EACfvD,KAAKwD,QAAU,CAAC,EAChBxD,KAAKyD,YAAa,EAClBzD,KAAK0D,WAAQ/B,EACb3B,KAAK2D,OAAS,CAAC,EACf3D,KAAK4D,UAAW,EAChB5D,KAAK6D,yBAA0B,EAC/B7D,KAAK8D,SAAStC,GACdxB,KAAKxN,MAAMiP,EACf,CACH,GAAAjC,CAAI6B,EAAOzB,GACJ,OAAOJ,GAAIQ,KAAMqB,EAAOzB,EAC5B,CACH,GAAAP,CAAIgC,GACG,OAAOH,GAAWlB,KAAMqB,EAC5B,CACH,QAAAyC,CAASzC,EAAOzB,GACT,OAAOJ,GAAIyB,GAAaI,EAAOzB,EACnC,CACA,QAAAmE,CAAS1C,EAAOzB,GACZ,OAAOJ,GAAIwB,GAAWK,EAAOzB,EACjC,CACH,KAAAoE,CAAM3C,EAAO4C,EAAMC,EAAaC,GACzB,MAAMC,EAAclD,GAAWlB,KAAMqB,GAC/BgD,EAAoBnD,GAAWlB,KAAMkE,GACrCI,EAAc,IAAML,EAC1BzS,OAAO+S,iBAAiBH,EAAa,CACjC,CAACE,GAAc,CACXlT,MAAOgT,EAAYH,GACnBO,UAAU,GAEd,CAACP,GAAO,CACJQ,YAAY,EACZ,GAAApF,GACI,MAAMqF,EAAQ1E,KAAKsE,GACb3Q,EAAS0Q,EAAkBF,GACjC,OAAItS,EAAS6S,GACFlT,OAAOkP,OAAO,CAAC,EAAG/M,EAAQ+Q,GAE9BvS,EAAeuS,EAAO/Q,EACjC,EACA,GAAA6L,CAAKpO,GACD4O,KAAKsE,GAAelT,CACxB,IAGZ,CACA,KAAAoB,CAAMmS,GACFA,EAASzJ,QAAS1I,GAAQA,EAAMwN,MACpC,EAEJ,IAAI4E,GAA2B,IAAItD,GAAS,CACxCuD,YAAcZ,IAAQA,EAAKa,WAAW,MACtCC,WAAad,GAAgB,WAATA,EACpBvB,MAAO,CACHsC,UAAW,eAEfhC,YAAa,CACT6B,aAAa,EACbE,YAAY,IAEjB,CAlVH,SAAiCH,GAC7BA,EAASpF,IAAI,YAAa,CACtByF,WAAOtD,EACPuD,SAAU,IACVC,OAAQ,eACR9S,QAAIsP,EACJyD,UAAMzD,EACN0D,UAAM1D,EACN2D,QAAI3D,EACJpQ,UAAMoQ,IAEViD,EAASd,SAAS,YAAa,CAC3BkB,WAAW,EACXD,YAAY,EACZF,YAAcZ,GAAgB,eAATA,GAAkC,eAATA,GAAkC,OAATA,IAE3EW,EAASpF,IAAI,aAAc,CACvBb,OAAQ,CACJpN,KAAM,QACNgU,WAAY5G,IAEhBD,QAAS,CACLnN,KAAM,SACNgU,WAAY7G,MAGpBkG,EAASd,SAAS,aAAc,CAC5BkB,UAAW,cAEfJ,EAASpF,IAAI,cAAe,CACxBgG,OAAQ,CACJ9D,UAAW,CACPwD,SAAU,MAGlBO,OAAQ,CACJ/D,UAAW,CACPwD,SAAU,IAGlBQ,KAAM,CACFC,WAAY,CACRhH,OAAQ,CACJyG,KAAM,eAEVQ,QAAS,CACLrU,KAAM,UACN2T,SAAU,KAItBW,KAAM,CACFF,WAAY,CACRhH,OAAQ,CACJ2G,GAAI,eAERM,QAAS,CACLrU,KAAM,UACN4T,OAAQ,SACR9S,GAAKyC,GAAQ,EAAJA,MAK7B,EAEA,SAA8B8P,GAC1BA,EAASpF,IAAI,SAAU,CACnBsG,aAAa,EACbC,QAAS,CACLC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAGlB,EA0EA,SAA4BvB,GACxBA,EAASpF,IAAI,QAAS,CAClB4G,SAAS,EACTC,QAAQ,EACR1T,SAAS,EACT2T,aAAa,EACpBC,OAAQ,QACDC,MAAM,EACbC,MAAO,EACAC,KAAM,CACFN,SAAS,EACTO,UAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAY,EACZC,UAAW,CAACC,EAAM7S,IAAUA,EAAQwS,UACpCM,UAAW,CAACD,EAAM7S,IAAUA,EAAQkK,MACpCgI,QAAQ,GAEZa,OAAQ,CACJd,SAAS,EACTe,KAAM,GACNC,WAAY,EACZC,MAAO,GAEXC,MAAO,CACHlB,SAAS,EACTmB,KAAM,GACNxB,QAAS,CACLC,IAAK,EACLE,OAAQ,IAGhBnG,MAAO,CACHyH,YAAa,EACbC,YAAa,GACbC,QAAQ,EACRC,gBAAiB,EACjBC,gBAAiB,GACjB7B,QAAS,EACTK,SAAS,EACTyB,UAAU,EACVC,gBAAiB,EACjBC,YAAa,EACb3V,SAAU2O,GAAMpB,WAAWC,OAC3BoI,MAAO,CAAC,EACRC,MAAO,CAAC,EACRvM,MAAO,SACPwM,WAAY,OACZC,mBAAmB,EACnBC,cAAe,4BACfC,gBAAiB,KAGzBzD,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASZ,MAAM,aAAc,QAAS,GAAI,eAC1CY,EAASZ,MAAM,eAAgB,QAAS,GAAI,eAC5CY,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASd,SAAS,QAAS,CACvBkB,WAAW,EACXH,YAAcZ,IAAQA,EAAKa,WAAW,YAAcb,EAAKa,WAAW,UAAqB,aAATb,GAAgC,WAATA,EACvGc,WAAad,GAAgB,eAATA,GAAkC,mBAATA,GAAsC,SAATA,IAE9EW,EAASd,SAAS,SAAU,CACxBkB,UAAW,UAEfJ,EAASd,SAAS,cAAe,CAC7Be,YAAcZ,GAAgB,oBAATA,GAAuC,aAATA,EACnDc,WAAad,GAAgB,oBAATA,GAE5B,IAyII,SAASqE,GAAa1F,EAAK2F,EAAMC,EAAIC,EAASC,GAC9C,IAAIC,EAAYJ,EAAKG,GAQrB,OAPKC,IACDA,EAAYJ,EAAKG,GAAU9F,EAAIgG,YAAYF,GAAQrB,MACnDmB,EAAG9S,KAAKgT,IAERC,EAAYF,IACZA,EAAUE,GAEPF,CACX,CAoDI,SAASI,GAAY5I,EAAO6I,EAAOzB,GACnC,MAAMtF,EAAmB9B,EAAM8I,wBACzBC,EAAsB,IAAV3B,EAAc3Q,KAAKoD,IAAIuN,EAAQ,EAAG,IAAO,EAC3D,OAAO3Q,KAAKiB,OAAOmR,EAAQE,GAAajH,GAAoBA,EAAmBiH,CACnF,CAGI,SAASC,GAAYC,EAAQtG,IACxBA,GAAQsG,MAGbtG,EAAMA,GAAOsG,EAAOC,WAAW,OAC3BC,OAGJxG,EAAIyG,iBACJzG,EAAI0G,UAAU,EAAG,EAAGJ,EAAO7B,MAAO6B,EAAOK,QACzC3G,EAAI4G,UACR,CACA,SAASC,GAAU7G,EAAKzO,EAASY,EAAGE,GAEhCyU,GAAgB9G,EAAKzO,EAASY,EAAGE,EAAG,KACxC,CAEA,SAASyU,GAAgB9G,EAAKzO,EAASY,EAAGE,EAAG0U,GACzC,IAAIpY,EAAMqY,EAASC,EAASvT,EAAMwT,EAAczC,EAAO0C,EAAUC,EACjE,MAAMzH,EAAQpO,EAAQ8V,WAChBC,EAAW/V,EAAQ+V,SACnBC,EAAShW,EAAQgW,OACvB,IAAIC,GAAOF,GAAY,GAAKnT,EAC5B,GAAIwL,GAA0B,iBAAVA,IAChBhR,EAAOgR,EAAM7Q,WACA,8BAATH,GAAiD,+BAATA,GAMxC,OALAqR,EAAIwG,OACJxG,EAAIyH,UAAUtV,EAAGE,GACjB2N,EAAI0H,OAAOF,GACXxH,EAAI2H,UAAUhI,GAAQA,EAAM8E,MAAQ,GAAI9E,EAAMgH,OAAS,EAAGhH,EAAM8E,MAAO9E,EAAMgH,aAC7E3G,EAAI4G,UAIZ,KAAInR,MAAM8R,IAAWA,GAAU,GAA/B,CAIA,OADAvH,EAAI4H,YACGjI,GAEH,QACQoH,EACA/G,EAAI6H,QAAQ1V,EAAGE,EAAG0U,EAAI,EAAGQ,EAAQ,EAAG,EAAGxT,GAEvCiM,EAAI8H,IAAI3V,EAAGE,EAAGkV,EAAQ,EAAGxT,GAE7BiM,EAAI+H,YACJ,MACJ,IAAK,WACDtD,EAAQsC,EAAIA,EAAI,EAAIQ,EACpBvH,EAAIgI,OAAO7V,EAAI2B,KAAKqF,IAAIqO,GAAO/C,EAAOpS,EAAIyB,KAAKsG,IAAIoN,GAAOD,GAC1DC,GAAOlT,EACP0L,EAAIiI,OAAO9V,EAAI2B,KAAKqF,IAAIqO,GAAO/C,EAAOpS,EAAIyB,KAAKsG,IAAIoN,GAAOD,GAC1DC,GAAOlT,EACP0L,EAAIiI,OAAO9V,EAAI2B,KAAKqF,IAAIqO,GAAO/C,EAAOpS,EAAIyB,KAAKsG,IAAIoN,GAAOD,GAC1DvH,EAAI+H,YACJ,MACJ,IAAK,cAQDb,EAAwB,KAATK,EACf7T,EAAO6T,EAASL,EAChBF,EAAUlT,KAAKsG,IAAIoN,EAAMnT,GAAcX,EACvCyT,EAAWrT,KAAKsG,IAAIoN,EAAMnT,IAAe0S,EAAIA,EAAI,EAAIG,EAAexT,GACpEuT,EAAUnT,KAAKqF,IAAIqO,EAAMnT,GAAcX,EACvC0T,EAAWtT,KAAKqF,IAAIqO,EAAMnT,IAAe0S,EAAIA,EAAI,EAAIG,EAAexT,GACpEsM,EAAI8H,IAAI3V,EAAIgV,EAAU9U,EAAI4U,EAASC,EAAcM,EAAM3T,EAAI2T,EAAMpT,GACjE4L,EAAI8H,IAAI3V,EAAIiV,EAAU/U,EAAI2U,EAASE,EAAcM,EAAMpT,EAASoT,GAChExH,EAAI8H,IAAI3V,EAAIgV,EAAU9U,EAAI4U,EAASC,EAAcM,EAAKA,EAAMpT,GAC5D4L,EAAI8H,IAAI3V,EAAIiV,EAAU/U,EAAI2U,EAASE,EAAcM,EAAMpT,EAASoT,EAAM3T,GACtEmM,EAAI+H,YACJ,MACJ,IAAK,OACD,IAAKT,EAAU,CACX5T,EAAOI,KAAKoU,QAAUX,EACtB9C,EAAQsC,EAAIA,EAAI,EAAIrT,EACpBsM,EAAImI,KAAKhW,EAAIsS,EAAOpS,EAAIqB,EAAM,EAAI+Q,EAAO,EAAI/Q,GAC7C,KACJ,CACA8T,GAAOnT,EACS,IAAK,UACrB8S,EAAWrT,KAAKsG,IAAIoN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUlT,KAAKsG,IAAIoN,GAAOD,EAC1BN,EAAUnT,KAAKqF,IAAIqO,GAAOD,EAC1BH,EAAWtT,KAAKqF,IAAIqO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO7V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIiI,OAAO9V,EAAIiV,EAAU/U,EAAI2U,GAC7BhH,EAAIiI,OAAO9V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIiI,OAAO9V,EAAIiV,EAAU/U,EAAI2U,GAC7BhH,EAAI+H,YACJ,MACJ,IAAK,WACDP,GAAOnT,EACS,IAAK,QACrB8S,EAAWrT,KAAKsG,IAAIoN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUlT,KAAKsG,IAAIoN,GAAOD,EAC1BN,EAAUnT,KAAKqF,IAAIqO,GAAOD,EAC1BH,EAAWtT,KAAKqF,IAAIqO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO7V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIiI,OAAO9V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIgI,OAAO7V,EAAIiV,EAAU/U,EAAI2U,GAC7BhH,EAAIiI,OAAO9V,EAAIiV,EAAU/U,EAAI2U,GAC7B,MACJ,IAAK,OACDG,EAAWrT,KAAKsG,IAAIoN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUlT,KAAKsG,IAAIoN,GAAOD,EAC1BN,EAAUnT,KAAKqF,IAAIqO,GAAOD,EAC1BH,EAAWtT,KAAKqF,IAAIqO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO7V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIiI,OAAO9V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIgI,OAAO7V,EAAIiV,EAAU/U,EAAI2U,GAC7BhH,EAAIiI,OAAO9V,EAAIiV,EAAU/U,EAAI2U,GAC7BQ,GAAOnT,EACP8S,EAAWrT,KAAKsG,IAAIoN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUlT,KAAKsG,IAAIoN,GAAOD,EAC1BN,EAAUnT,KAAKqF,IAAIqO,GAAOD,EAC1BH,EAAWtT,KAAKqF,IAAIqO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO7V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIiI,OAAO9V,EAAIgV,EAAU9U,EAAI4U,GAC7BjH,EAAIgI,OAAO7V,EAAIiV,EAAU/U,EAAI2U,GAC7BhH,EAAIiI,OAAO9V,EAAIiV,EAAU/U,EAAI2U,GAC7B,MACJ,IAAK,OACDA,EAAUD,EAAIA,EAAI,EAAIjT,KAAKsG,IAAIoN,GAAOD,EACtCN,EAAUnT,KAAKqF,IAAIqO,GAAOD,EAC1BvH,EAAIgI,OAAO7V,EAAI6U,EAAS3U,EAAI4U,GAC5BjH,EAAIiI,OAAO9V,EAAI6U,EAAS3U,EAAI4U,GAC5B,MACJ,IAAK,OACDjH,EAAIgI,OAAO7V,EAAGE,GACd2N,EAAIiI,OAAO9V,EAAI2B,KAAKsG,IAAIoN,IAAQT,EAAIA,EAAI,EAAIQ,GAASlV,EAAIyB,KAAKqF,IAAIqO,GAAOD,GACzE,MACJ,KAAK,EACDvH,EAAI+H,YAGZ/H,EAAIoI,OACA7W,EAAQ8W,YAAc,GACtBrI,EAAIsI,QA3GR,CA6GJ,CAOI,SAASC,GAAeC,EAAOC,EAAMC,GAErC,OADAA,EAASA,GAAU,IACXD,GAAQD,GAASA,EAAMrW,EAAIsW,EAAKlF,KAAOmF,GAAUF,EAAMrW,EAAIsW,EAAKpF,MAAQqF,GAAUF,EAAMnW,EAAIoW,EAAKrF,IAAMsF,GAAUF,EAAMnW,EAAIoW,EAAKnF,OAASoF,CACrJ,CACA,SAASC,GAAS3I,EAAKyI,GACnBzI,EAAIwG,OACJxG,EAAI4H,YACJ5H,EAAImI,KAAKM,EAAKlF,KAAMkF,EAAKrF,IAAKqF,EAAKpF,MAAQoF,EAAKlF,KAAMkF,EAAKnF,OAASmF,EAAKrF,KACzEpD,EAAI4D,MACR,CACA,SAASgF,GAAW5I,GAChBA,EAAI4G,SACR,CAGI,SAASiC,GAAe7I,EAAK8I,EAAU/X,EAAQgY,EAAM1I,GACrD,IAAKyI,EACD,OAAO9I,EAAIiI,OAAOlX,EAAOoB,EAAGpB,EAAOsB,GAEvC,GAAa,WAATgO,EAAmB,CACnB,MAAM2I,GAAYF,EAAS3W,EAAIpB,EAAOoB,GAAK,EAC3C6N,EAAIiI,OAAOe,EAAUF,EAASzW,GAC9B2N,EAAIiI,OAAOe,EAAUjY,EAAOsB,EAChC,KAAoB,UAATgO,KAAuB0I,EAC9B/I,EAAIiI,OAAOa,EAAS3W,EAAGpB,EAAOsB,GAE9B2N,EAAIiI,OAAOlX,EAAOoB,EAAG2W,EAASzW,GAElC2N,EAAIiI,OAAOlX,EAAOoB,EAAGpB,EAAOsB,EAChC,CAGI,SAAS4W,GAAejJ,EAAK8I,EAAU/X,EAAQgY,GAC/C,IAAKD,EACD,OAAO9I,EAAIiI,OAAOlX,EAAOoB,EAAGpB,EAAOsB,GAEvC2N,EAAIkJ,cAAcH,EAAOD,EAASK,KAAOL,EAASM,KAAML,EAAOD,EAASO,KAAOP,EAASQ,KAAMP,EAAOhY,EAAOqY,KAAOrY,EAAOoY,KAAMJ,EAAOhY,EAAOuY,KAAOvY,EAAOsY,KAAMtY,EAAOoB,EAAGpB,EAAOsB,EACvL,CAkBA,SAASkX,GAAavJ,EAAK7N,EAAGE,EAAGmX,EAAMC,GACnC,GAAIA,EAAKC,eAAiBD,EAAKE,UAAW,CAOtC,MAAMC,EAAU5J,EAAIgG,YAAYwD,GAC1BjG,EAAOpR,EAAIyX,EAAQC,sBACnBxG,EAAQlR,EAAIyX,EAAQE,uBACpB1G,EAAM/Q,EAAIuX,EAAQG,wBAClBzG,EAASjR,EAAIuX,EAAQI,yBACrBC,EAAcR,EAAKC,eAAiBtG,EAAME,GAAU,EAAIA,EAC9DtD,EAAIkK,YAAclK,EAAImK,UACtBnK,EAAI4H,YACJ5H,EAAI+D,UAAY0F,EAAKW,iBAAmB,EACxCpK,EAAIgI,OAAOzE,EAAM0G,GACjBjK,EAAIiI,OAAO5E,EAAO4G,GAClBjK,EAAIsI,QACR,CACJ,CACA,SAAS+B,GAAarK,EAAKyJ,GACvB,MAAMa,EAAWtK,EAAImK,UACrBnK,EAAImK,UAAYV,EAAKhO,MACrBuE,EAAIuK,SAASd,EAAKlG,KAAMkG,EAAKrG,IAAKqG,EAAKhF,MAAOgF,EAAK9C,QACnD3G,EAAImK,UAAYG,CACpB,CAGI,SAASE,GAAWxK,EAAK2E,EAAMxS,EAAGE,EAAGoN,EAAMgK,EAAO,CAAC,GACnD,MAAMgB,EAAQhc,EAAQkW,GAAQA,EAAO,CACjCA,GAEE2D,EAASmB,EAAKiB,YAAc,GAA0B,KAArBjB,EAAKkB,YAC5C,IAAI3a,EAAGwZ,EAIP,IAHAxJ,EAAIwG,OACJxG,EAAIP,KAAOA,EAAKqG,OAtDpB,SAAuB9F,EAAKyJ,GACpBA,EAAKmB,aACL5K,EAAIyH,UAAUgC,EAAKmB,YAAY,GAAInB,EAAKmB,YAAY,IAEnDrc,EAAckb,EAAKnC,WACpBtH,EAAI0H,OAAO+B,EAAKnC,UAEhBmC,EAAKhO,QACLuE,EAAImK,UAAYV,EAAKhO,OAErBgO,EAAKoB,YACL7K,EAAI6K,UAAYpB,EAAKoB,WAErBpB,EAAKqB,eACL9K,EAAI8K,aAAerB,EAAKqB,aAEhC,CAuCIC,CAAc/K,EAAKyJ,GACfzZ,EAAI,EAAGA,EAAIya,EAAMta,SAAUH,EAC3BwZ,EAAOiB,EAAMza,GACTyZ,EAAKuB,UACLX,GAAarK,EAAKyJ,EAAKuB,UAEvB1C,IACImB,EAAKkB,cACL3K,EAAIkK,YAAcT,EAAKkB,aAEtBpc,EAAckb,EAAKiB,eACpB1K,EAAI+D,UAAY0F,EAAKiB,aAEzB1K,EAAIiL,WAAWzB,EAAMrX,EAAGE,EAAGoX,EAAKyB,WAEpClL,EAAImL,SAAS3B,EAAMrX,EAAGE,EAAGoX,EAAKyB,UAC9B3B,GAAavJ,EAAK7N,EAAGE,EAAGmX,EAAMC,GAC9BpX,GAAKlD,OAAOsQ,EAAKG,YAErBI,EAAI4G,SACR,CAKI,SAASwE,GAAmBpL,EAAKmI,GACjC,MAAM,EAAEhW,EAAE,EAAEE,EAAE,EAAE0U,EAAE,EAAEsE,EAAE,OAAE9D,GAAYY,EAEpCnI,EAAI8H,IAAI3V,EAAIoV,EAAO+D,QAASjZ,EAAIkV,EAAO+D,QAAS/D,EAAO+D,QAAS,IAAMzX,EAAIA,GAAI,GAE9EmM,EAAIiI,OAAO9V,EAAGE,EAAIgZ,EAAI9D,EAAOgE,YAE7BvL,EAAI8H,IAAI3V,EAAIoV,EAAOgE,WAAYlZ,EAAIgZ,EAAI9D,EAAOgE,WAAYhE,EAAOgE,WAAY1X,EAAIO,GAAS,GAE1F4L,EAAIiI,OAAO9V,EAAI4U,EAAIQ,EAAOiE,YAAanZ,EAAIgZ,GAE3CrL,EAAI8H,IAAI3V,EAAI4U,EAAIQ,EAAOiE,YAAanZ,EAAIgZ,EAAI9D,EAAOiE,YAAajE,EAAOiE,YAAapX,EAAS,GAAG,GAEhG4L,EAAIiI,OAAO9V,EAAI4U,EAAG1U,EAAIkV,EAAOkE,UAE7BzL,EAAI8H,IAAI3V,EAAI4U,EAAIQ,EAAOkE,SAAUpZ,EAAIkV,EAAOkE,SAAUlE,EAAOkE,SAAU,GAAIrX,GAAS,GAEpF4L,EAAIiI,OAAO9V,EAAIoV,EAAO+D,QAASjZ,EACnC,CAEA,MAAMqZ,GAAc,uCACdC,GAAa,wEAWf,SAASC,GAAapd,EAAOkF,GAC7B,MAAMmY,GAAW,GAAKrd,GAAOsd,MAAMJ,IACnC,IAAKG,GAA0B,WAAfA,EAAQ,GACpB,OAAc,IAAPnY,EAGX,OADAlF,GAASqd,EAAQ,GACVA,EAAQ,IACX,IAAK,KACD,OAAOrd,EACX,IAAK,IACDA,GAAS,IAGjB,OAAOkF,EAAOlF,CAClB,CACA,MAAMud,GAAgB7Z,IAAKA,GAAK,EAChC,SAAS8Z,GAAkBxd,EAAOyd,GAC9B,MAAMC,EAAM,CAAC,EACPC,EAAWld,EAASgd,GACpB/b,EAAOic,EAAWvd,OAAOsB,KAAK+b,GAASA,EACvCG,EAAOnd,EAAST,GAAS2d,EAAYE,GAAO9c,EAAef,EAAM6d,GAAO7d,EAAMyd,EAAMI,KAAWA,GAAO7d,EAAM6d,GAAQ,IAAI7d,EAC9H,IAAK,MAAM6d,KAAQnc,EACfgc,EAAIG,GAAQN,GAAaK,EAAKC,IAElC,OAAOH,CACX,CAsBI,SAASI,GAAc9d,GACvB,OAAOwd,GAAkBxd,EAAO,CAC5B,UACA,WACA,aACA,eAER,CAQI,SAAS+d,GAAU/d,GACnB,MAAM+D,EA9BN,SAAgB/D,GAChB,OAAOwd,GAAkBxd,EAAO,CAC5B4U,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,KAAM,KAEd,CAuBgBiJ,CAAOhe,GAGnB,OAFA+D,EAAIkS,MAAQlS,EAAIgR,KAAOhR,EAAI8Q,MAC3B9Q,EAAIoU,OAASpU,EAAI6Q,IAAM7Q,EAAI+Q,OACpB/Q,CACX,CAOI,SAASka,GAAOlb,EAASmb,GACzBnb,EAAUA,GAAW,CAAC,EACtBmb,EAAWA,GAAY1K,GAASvC,KAChC,IAAI/L,EAAOnE,EAAegC,EAAQmC,KAAMgZ,EAAShZ,MAC7B,iBAATA,IACPA,EAAOiZ,SAASjZ,EAAM,KAE1B,IAAIiM,EAAQpQ,EAAegC,EAAQoO,MAAO+M,EAAS/M,OAC/CA,KAAW,GAAKA,GAAOmM,MAAMH,MAC7BiB,QAAQC,KAAK,kCAAoClN,EAAQ,KACzDA,OAAQZ,GAEZ,MAAMU,EAAO,CACTC,OAAQnQ,EAAegC,EAAQmO,OAAQgN,EAAShN,QAChDE,WAAYgM,GAAarc,EAAegC,EAAQqO,WAAY8M,EAAS9M,YAAalM,GAClFA,OACAiM,QACAE,OAAQtQ,EAAegC,EAAQsO,OAAQ6M,EAAS7M,QAChDiG,OAAQ,IAGZ,OADArG,EAAKqG,OAzdL,SAAsBrG,GACtB,OAAKA,GAAQlR,EAAckR,EAAK/L,OAASnF,EAAckR,EAAKC,QACjD,MAEHD,EAAKE,MAAQF,EAAKE,MAAQ,IAAM,KAAOF,EAAKI,OAASJ,EAAKI,OAAS,IAAM,IAAMJ,EAAK/L,KAAO,MAAQ+L,EAAKC,MACpH,CAodkBoN,CAAarN,GACpBA,CACX,CAWI,SAASsN,GAAQC,EAAQ5N,EAASzO,EAAOsc,GACzC,IACIjd,EAAGO,EAAM/B,EADT0e,GAAY,EAEhB,IAAIld,EAAI,EAAGO,EAAOyc,EAAO7c,OAAQH,EAAIO,IAAQP,EAEzC,GADAxB,EAAQwe,EAAOhd,QACD+O,IAAVvQ,SAGYuQ,IAAZK,GAA0C,mBAAV5Q,IAChCA,EAAQA,EAAM4Q,GACd8N,GAAY,QAEFnO,IAAVpO,GAAuBlC,EAAQD,KAC/BA,EAAQA,EAAMmC,EAAQnC,EAAM2B,QAC5B+c,GAAY,QAEFnO,IAAVvQ,GAIA,OAHIye,IAASC,IACTD,EAAKC,WAAY,GAEd1e,CAGnB,CAeA,SAAS2e,GAAcC,EAAehO,GAClC,OAAOxQ,OAAOkP,OAAOlP,OAAOoC,OAAOoc,GAAgBhO,EACvD,CAWI,SAASiO,GAAgBC,EAAQC,EAAW,CAC5C,IACDC,EAAYd,EAAUe,EAAY,IAAIH,EAAO,IAC5C,MAAMI,EAAkBF,GAAcF,OACd,IAAbZ,IACPA,EAAWiB,GAAS,YAAaL,IAErC,MAAMM,EAAQ,CACV,CAACtY,OAAOuY,aAAc,SACtBC,YAAY,EACZC,QAAST,EACTU,YAAaN,EACbtL,UAAWsK,EACXuB,WAAYR,EACZtM,SAAW1C,GAAQ4O,GAAgB,CAC3B5O,KACG6O,GACJC,EAAUG,EAAiBhB,IAEtC,OAAO,IAAIwB,MAAMN,EAAO,CAGpBO,eAAe,CAACpd,EAAQsb,YACbtb,EAAOsb,UACPtb,EAAOqd,aACPd,EAAO,GAAGjB,IACV,GAIX5P,IAAI,CAAC1L,EAAQsb,IACFgC,GAAQtd,EAAQsb,EAAM,IAyOzC,SAA8BA,EAAMkB,EAAUD,EAAQgB,GAClD,IAAI9f,EACJ,IAAK,MAAM+f,KAAUhB,EAEjB,GADA/e,EAAQmf,GAASa,GAAQD,EAAQlC,GAAOiB,QACnB,IAAV9e,EACP,OAAOigB,GAAiBpC,EAAM7d,GAASkgB,GAAkBpB,EAAQgB,EAAOjC,EAAM7d,GAASA,CAGnG,CAjP6CmgB,CAAqBtC,EAAMkB,EAAUD,EAAQvc,IAKlF6d,yBAAyB,CAAC7d,EAAQsb,IACvBwC,QAAQD,yBAAyB7d,EAAOgd,QAAQ,GAAI1B,GAI/DyC,eAAe,IACJD,QAAQC,eAAexB,EAAO,IAIzC1Z,IAAI,CAAC7C,EAAQsb,IACF0C,GAAqBhe,GAAQmN,SAASmO,GAIjD2C,QAASje,GACEge,GAAqBhe,GAIhC,GAAA6L,CAAK7L,EAAQsb,EAAM7d,GACf,MAAMygB,EAAUle,EAAOme,WAAane,EAAOme,SAAWzB,KAGtD,OAFA1c,EAAOsb,GAAQ4C,EAAQ5C,GAAQ7d,SACxBuC,EAAOqd,OACP,CACX,GAER,CAQI,SAASe,GAAeb,EAAOlP,EAASgQ,EAAUC,GAClD,MAAMzB,EAAQ,CACVE,YAAY,EACZwB,OAAQhB,EACRiB,SAAUnQ,EACVoQ,UAAWJ,EACXK,OAAQ,IAAIC,IACZ9Q,aAAcA,GAAa0P,EAAOe,GAClCM,WAAa3P,GAAMmP,GAAeb,EAAOtO,EAAKoP,EAAUC,GACxDlO,SAAW1C,GAAQ0Q,GAAeb,EAAMnN,SAAS1C,GAAQW,EAASgQ,EAAUC,IAEhF,OAAO,IAAInB,MAAMN,EAAO,CAGpBO,eAAe,CAACpd,EAAQsb,YACbtb,EAAOsb,UACPiC,EAAMjC,IACN,GAIX5P,IAAI,CAAC1L,EAAQsb,EAAMuD,IACRvB,GAAQtd,EAAQsb,EAAM,IA6DzC,SAA6Btb,EAAQsb,EAAMuD,GACvC,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAY5Q,aAAcP,GAAiBtN,EACvE,IAAIvC,EAAQ8gB,EAAOjD,GAYnB,OAVI/Y,EAAW9E,IAAU6P,EAAYwR,aAAaxD,KAC9C7d,EAWR,SAA4B6d,EAAMyD,EAAU/e,EAAQ6e,GAChD,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAU,OAAEC,GAAY1e,EACpD,GAAI0e,EAAO7b,IAAIyY,GACX,MAAM,IAAI0D,MAAM,uBAAyBrhB,MAAM8T,KAAKiN,GAAQO,KAAK,MAAQ,KAAO3D,GAEpFoD,EAAOQ,IAAI5D,GACX,IAAI7d,EAAQshB,EAASP,EAAUC,GAAaI,GAM5C,OALAH,EAAOS,OAAO7D,GACVoC,GAAiBpC,EAAM7d,KAEvBA,EAAQkgB,GAAkBY,EAAOvB,QAASuB,EAAQjD,EAAM7d,IAErDA,CACX,CAxBgB2hB,CAAmB9D,EAAM7d,EAAOuC,EAAQ6e,IAEhDnhB,EAAQD,IAAUA,EAAM2B,SACxB3B,EAsBR,SAAuB6d,EAAM7d,EAAOuC,EAAQqf,GACxC,MAAM,OAAEd,EAAO,SAAEC,EAAS,UAAEC,EAAY5Q,aAAcP,GAAiBtN,EACvE,QAA8B,IAAnBwe,EAAS5e,OAAyByf,EAAY/D,GACrD,OAAO7d,EAAM+gB,EAAS5e,MAAQnC,EAAM2B,QACjC,GAAIlB,EAAST,EAAM,IAAK,CAE3B,MAAM6hB,EAAM7hB,EACN8e,EAASgC,EAAOvB,QAAQuC,OAAQ3Z,GAAIA,IAAM0Z,GAChD7hB,EAAQ,GACR,IAAK,MAAMmF,KAAQ0c,EAAI,CACnB,MAAM7d,EAAWkc,GAAkBpB,EAAQgC,EAAQjD,EAAM1Y,GACzDnF,EAAMsE,KAAKqc,GAAe3c,EAAU+c,EAAUC,GAAaA,EAAUnD,GAAOhO,GAChF,CACJ,CACA,OAAO7P,CACX,CArCgB+hB,CAAclE,EAAM7d,EAAOuC,EAAQsN,EAAY+R,cAEvD3B,GAAiBpC,EAAM7d,KAEvBA,EAAQ2gB,GAAe3gB,EAAO+gB,EAAUC,GAAaA,EAAUnD,GAAOhO,IAEnE7P,CACX,CA5E6CgiB,CAAoBzf,EAAQsb,EAAMuD,IAKvEhB,yBAAyB,CAAC7d,EAAQsb,IACvBtb,EAAO6N,aAAa6R,QAAU5B,QAAQjb,IAAI0a,EAAOjC,GAAQ,CAC5DxK,YAAY,EACZ6O,cAAc,QACd3R,EAAY8P,QAAQD,yBAAyBN,EAAOjC,GAI5DyC,eAAe,IACJD,QAAQC,eAAeR,GAIlC1a,IAAI,CAAC7C,EAAQsb,IACFwC,QAAQjb,IAAI0a,EAAOjC,GAI9B2C,QAAQ,IACGH,QAAQG,QAAQV,GAI3B1R,IAAI,CAAC7L,EAAQsb,EAAM7d,KACf8f,EAAMjC,GAAQ7d,SACPuC,EAAOsb,IACP,IAGnB,CAGI,SAASzN,GAAa0P,EAAOtM,EAAW,CACxC2O,YAAY,EACZC,WAAW,IAEX,MAAM,YAAE3O,EAAaD,EAAS2O,WAAW,WAAExO,EAAYH,EAAS4O,UAAU,SAAEC,EAAU7O,EAASyO,SAAanC,EAC5G,MAAO,CACHmC,QAASI,EACTF,WAAY1O,EACZ2O,UAAWzO,EACX0N,aAAcvc,EAAW2O,GAAeA,EAAc,IAAIA,EAC1DmO,YAAa9c,EAAW6O,GAAcA,EAAa,IAAIA,EAE/D,CACA,MAAMqM,GAAU,CAACD,EAAQlN,IAAOkN,EAASA,EAAStb,EAAYoO,GAAQA,EAChEoN,GAAmB,CAACpC,EAAM7d,IAAQS,EAAST,IAAmB,aAAT6d,IAAyD,OAAjCzd,OAAOkgB,eAAetgB,IAAmBA,EAAMmQ,cAAgB/P,QAClJ,SAASyf,GAAQtd,EAAQsb,EAAMU,GAC3B,GAAIne,OAAOC,UAAUmD,eAAejD,KAAKgC,EAAQsb,IAAkB,gBAATA,EACtD,OAAOtb,EAAOsb,GAElB,MAAM7d,EAAQue,IAGd,OADAhc,EAAOsb,GAAQ7d,EACRA,CACX,CA+CA,SAASsiB,GAAgBpE,EAAUL,EAAM7d,GACrC,OAAO8E,EAAWoZ,GAAYA,EAASL,EAAM7d,GAASke,CAC1D,CACA,MAAMqE,GAAW,CAAC3f,EAAK4f,KAAiB,IAAR5f,EAAe4f,EAAwB,iBAAR5f,EAAmBkB,EAAiB0e,EAAQ5f,QAAO2N,EAClH,SAASkS,GAAUrU,EAAKsU,EAAc9f,EAAK+f,EAAgB3iB,GACvD,IAAK,MAAMwiB,KAAUE,EAAa,CAC9B,MAAMzS,EAAQsS,GAAS3f,EAAK4f,GAC5B,GAAIvS,EAAO,CACP7B,EAAIqT,IAAIxR,GACR,MAAMiO,EAAWoE,GAAgBrS,EAAM2D,UAAWhR,EAAK5C,GACvD,QAAwB,IAAbke,GAA4BA,IAAatb,GAAOsb,IAAayE,EAGpE,OAAOzE,CAEf,MAAO,IAAc,IAAVjO,QAA6C,IAAnB0S,GAAkC/f,IAAQ+f,EAG3E,OAAO,IAEf,CACA,OAAO,CACX,CACA,SAASzC,GAAkBwC,EAAc1e,EAAU6Z,EAAM7d,GACrD,MAAMgf,EAAahb,EAASwb,YACtBtB,EAAWoE,GAAgBte,EAAS4P,UAAWiK,EAAM7d,GACrD4iB,EAAY,IACXF,KACA1D,GAED5Q,EAAM,IAAI8S,IAChB9S,EAAIqT,IAAIzhB,GACR,IAAI4C,EAAMigB,GAAiBzU,EAAKwU,EAAW/E,EAAMK,GAAYL,EAAM7d,GACnE,OAAY,OAAR4C,SAGoB,IAAbsb,GAA4BA,IAAaL,IAChDjb,EAAMigB,GAAiBzU,EAAKwU,EAAW1E,EAAUtb,EAAK5C,GAC1C,OAAR4C,KAIDic,GAAgB3e,MAAM8T,KAAK5F,GAAM,CACpC,IACD4Q,EAAYd,EAAU,IAQ7B,SAAsBla,EAAU6Z,EAAM7d,GAClC,MAAMwiB,EAASxe,EAASyb,aAClB5B,KAAQ2E,IACVA,EAAO3E,GAAQ,CAAC,GAEpB,MAAMtb,EAASigB,EAAO3E,GACtB,OAAI5d,EAAQsC,IAAW9B,EAAST,GAErBA,EAEJuC,GAAU,CAAC,CACtB,CAnBiCugB,CAAa9e,EAAU6Z,EAAM7d,GAC9D,CACA,SAAS6iB,GAAiBzU,EAAKwU,EAAWhgB,EAAKsb,EAAU/Y,GACrD,KAAMvC,GACFA,EAAM6f,GAAUrU,EAAKwU,EAAWhgB,EAAKsb,EAAU/Y,GAEnD,OAAOvC,CACX,CAsBA,SAASuc,GAASvc,EAAKkc,GACnB,IAAK,MAAM7O,KAAS6O,EAAO,CACvB,IAAK7O,EACD,SAEJ,MAAMjQ,EAAQiQ,EAAMrN,GACpB,QAAqB,IAAV5C,EACP,OAAOA,CAEf,CACJ,CACA,SAASugB,GAAqBhe,GAC1B,IAAIb,EAAOa,EAAOqd,MAIlB,OAHKle,IACDA,EAAOa,EAAOqd,MAItB,SAAkCd,GAC9B,MAAM1Q,EAAM,IAAI8S,IAChB,IAAK,MAAMjR,KAAS6O,EAChB,IAAK,MAAMlc,KAAOxC,OAAOsB,KAAKuO,GAAO6R,OAAQpf,IAAKA,EAAEgR,WAAW,MAC3DtF,EAAIqT,IAAI7e,GAGhB,OAAO1C,MAAM8T,KAAK5F,EACtB,CAZ8B2U,CAAyBxgB,EAAOgd,UAEnD7d,CACX,CAyBA,MAAMshB,GAAUriB,OAAOqiB,SAAW,MAC5BC,GAAW,CAACC,EAAQ1hB,IAAIA,EAAI0hB,EAAOvhB,SAAWuhB,EAAO1hB,GAAG2hB,MAAQD,EAAO1hB,GACvE4hB,GAAgBzR,GAA0B,MAAdA,EAAoB,IAAM,IAC5D,SAAS0R,GAAYC,EAAYC,EAAaC,EAAY/Y,GAItD,MAAM6P,EAAWgJ,EAAWH,KAAOI,EAAcD,EAC3CjgB,EAAUkgB,EACVE,EAAOD,EAAWL,KAAOI,EAAcC,EACvCE,EAAMlc,EAAsBnE,EAASiX,GACrCqJ,EAAMnc,EAAsBic,EAAMpgB,GACxC,IAAIugB,EAAMF,GAAOA,EAAMC,GACnBE,EAAMF,GAAOD,EAAMC,GAEvBC,EAAM3c,MAAM2c,GAAO,EAAIA,EACvBC,EAAM5c,MAAM4c,GAAO,EAAIA,EACvB,MAAMC,EAAKrZ,EAAImZ,EACTG,EAAKtZ,EAAIoZ,EACf,MAAO,CACHvJ,SAAU,CACN3W,EAAGN,EAAQM,EAAImgB,GAAML,EAAK9f,EAAI2W,EAAS3W,GACvCE,EAAGR,EAAQQ,EAAIigB,GAAML,EAAK5f,EAAIyW,EAASzW,IAE3C4f,KAAM,CACF9f,EAAGN,EAAQM,EAAIogB,GAAMN,EAAK9f,EAAI2W,EAAS3W,GACvCE,EAAGR,EAAQQ,EAAIkgB,GAAMN,EAAK5f,EAAIyW,EAASzW,IAGnD,CAoFA,SAASmgB,GAAgBC,EAAIxb,EAAKC,GAC9B,OAAOpD,KAAKoD,IAAIpD,KAAKmD,IAAIwb,EAAIvb,GAAMD,EACvC,CAwBI,SAASyb,GAA2BhB,EAAQngB,EAASkX,EAAMhG,EAAMtC,GACjE,IAAInQ,EAAGO,EAAMiY,EAAOmK,EAKpB,GAHIphB,EAAQqhB,WACRlB,EAASA,EAAOpB,OAAQmC,IAAMA,EAAGd,OAEE,aAAnCpgB,EAAQshB,wBAzDZ,SAA6BnB,EAAQvR,EAAY,KACjD,MAAM2S,EAAYlB,GAAazR,GACzB4S,EAAYrB,EAAOvhB,OACnB6iB,EAAStkB,MAAMqkB,GAAW3K,KAAK,GAC/B6K,EAAKvkB,MAAMqkB,GAEjB,IAAI/iB,EAAGkjB,EAAaC,EAChBC,EAAa3B,GAASC,EAAQ,GAClC,IAAI1hB,EAAI,EAAGA,EAAI+iB,IAAa/iB,EAIxB,GAHAkjB,EAAcC,EACdA,EAAeC,EACfA,EAAa3B,GAASC,EAAQ1hB,EAAI,GAC7BmjB,EAAL,CAGA,GAAIC,EAAY,CACZ,MAAMC,EAAaD,EAAWjT,GAAagT,EAAahT,GAExD6S,EAAOhjB,GAAoB,IAAfqjB,GAAoBD,EAAWN,GAAaK,EAAaL,IAAcO,EAAa,CACpG,CACAJ,EAAGjjB,GAAMkjB,EAA2BE,EAA6B5e,EAAKwe,EAAOhjB,EAAI,MAAQwE,EAAKwe,EAAOhjB,IAAM,GAAKgjB,EAAOhjB,EAAI,GAAKgjB,EAAOhjB,IAAM,EAA5FgjB,EAAOhjB,EAAI,GAArCgjB,EAAOhjB,EAN9B,EAtEJ,SAAwB0hB,EAAQsB,EAAQC,GACxC,MAAMF,EAAYrB,EAAOvhB,OACzB,IAAImjB,EAAQC,EAAOC,EAAMC,EAAkBN,EACvCC,EAAa3B,GAASC,EAAQ,GAClC,IAAI,IAAI1hB,EAAI,EAAGA,EAAI+iB,EAAY,IAAK/iB,EAChCmjB,EAAeC,EACfA,EAAa3B,GAASC,EAAQ1hB,EAAI,GAC7BmjB,GAAiBC,IAGlB3e,EAAaue,EAAOhjB,GAAI,EAAGwhB,IAC3ByB,EAAGjjB,GAAKijB,EAAGjjB,EAAI,GAAK,GAGxBsjB,EAASL,EAAGjjB,GAAKgjB,EAAOhjB,GACxBujB,EAAQN,EAAGjjB,EAAI,GAAKgjB,EAAOhjB,GAC3ByjB,EAAmB3f,KAAKmB,IAAIqe,EAAQ,GAAKxf,KAAKmB,IAAIse,EAAO,GACrDE,GAAoB,IAGxBD,EAAO,EAAI1f,KAAKqC,KAAKsd,GACrBR,EAAGjjB,GAAKsjB,EAASE,EAAOR,EAAOhjB,GAC/BijB,EAAGjjB,EAAI,GAAKujB,EAAQC,EAAOR,EAAOhjB,KAE1C,CAsDI0jB,CAAehC,EAAQsB,EAAQC,GArDnC,SAAyBvB,EAAQuB,EAAI9S,EAAY,KAC7C,MAAM2S,EAAYlB,GAAazR,GACzB4S,EAAYrB,EAAOvhB,OACzB,IAAIoN,EAAO2V,EAAaC,EACpBC,EAAa3B,GAASC,EAAQ,GAClC,IAAI,IAAI1hB,EAAI,EAAGA,EAAI+iB,IAAa/iB,EAAE,CAI9B,GAHAkjB,EAAcC,EACdA,EAAeC,EACfA,EAAa3B,GAASC,EAAQ1hB,EAAI,IAC7BmjB,EACD,SAEJ,MAAMQ,EAASR,EAAahT,GACtByT,EAAST,EAAaL,GACxBI,IACA3V,GAASoW,EAAST,EAAY/S,IAAc,EAC5CgT,EAAa,MAAMhT,KAAewT,EAASpW,EAC3C4V,EAAa,MAAML,KAAec,EAASrW,EAAQ0V,EAAGjjB,IAEtDojB,IACA7V,GAAS6V,EAAWjT,GAAawT,GAAU,EAC3CR,EAAa,MAAMhT,KAAewT,EAASpW,EAC3C4V,EAAa,MAAML,KAAec,EAASrW,EAAQ0V,EAAGjjB,GAE9D,CACJ,CA6BI6jB,CAAgBnC,EAAQuB,EAAI9S,EAChC,CAkCQ2T,CAAoBpC,EAAQvR,OACzB,CACH,IAAI4T,EAAOtR,EAAOiP,EAAOA,EAAOvhB,OAAS,GAAKuhB,EAAO,GACrD,IAAI1hB,EAAI,EAAGO,EAAOmhB,EAAOvhB,OAAQH,EAAIO,IAAQP,EACzCwY,EAAQkJ,EAAO1hB,GACf2iB,EAAgBd,GAAYkC,EAAMvL,EAAOkJ,EAAO5d,KAAKmD,IAAIjH,EAAI,EAAGO,GAAQkS,EAAO,EAAI,IAAMlS,GAAOgB,EAAQyiB,SACxGxL,EAAMW,KAAOwJ,EAAc7J,SAAS3W,EACpCqW,EAAMa,KAAOsJ,EAAc7J,SAASzW,EACpCmW,EAAMY,KAAOuJ,EAAcV,KAAK9f,EAChCqW,EAAMc,KAAOqJ,EAAcV,KAAK5f,EAChC0hB,EAAOvL,CAEf,CACIjX,EAAQ0iB,iBA3ChB,SAAyBvC,EAAQjJ,GAC7B,IAAIzY,EAAGO,EAAMiY,EAAO0L,EAAQC,EACxBC,EAAa7L,GAAemJ,EAAO,GAAIjJ,GAC3C,IAAIzY,EAAI,EAAGO,EAAOmhB,EAAOvhB,OAAQH,EAAIO,IAAQP,EACzCmkB,EAAaD,EACbA,EAASE,EACTA,EAAapkB,EAAIO,EAAO,GAAKgY,GAAemJ,EAAO1hB,EAAI,GAAIyY,GACtDyL,IAGL1L,EAAQkJ,EAAO1hB,GACXmkB,IACA3L,EAAMW,KAAOqJ,GAAgBhK,EAAMW,KAAMV,EAAKlF,KAAMkF,EAAKpF,OACzDmF,EAAMa,KAAOmJ,GAAgBhK,EAAMa,KAAMZ,EAAKrF,IAAKqF,EAAKnF,SAExD8Q,IACA5L,EAAMY,KAAOoJ,GAAgBhK,EAAMY,KAAMX,EAAKlF,KAAMkF,EAAKpF,OACzDmF,EAAMc,KAAOkJ,GAAgBhK,EAAMc,KAAMb,EAAKrF,IAAKqF,EAAKnF,SAGpE,CAwBQ2Q,CAAgBvC,EAAQjJ,EAEhC,CAII,SAAS4L,KACT,MAAyB,oBAAX7b,QAA8C,oBAAb8b,QACnD,CAGI,SAASC,GAAeC,GACxB,IAAIxD,EAASwD,EAAQC,WAIrB,OAHIzD,GAAgC,wBAAtBA,EAAOliB,aACjBkiB,EAASA,EAAO0D,MAEb1D,CACX,CAII,SAAS2D,GAAcC,EAAYrW,EAAMsW,GACzC,IAAIC,EAUJ,MAT0B,iBAAfF,GACPE,EAAgBnI,SAASiI,EAAY,KACJ,IAA7BA,EAAWvjB,QAAQ,OAEnByjB,EAAgBA,EAAgB,IAAMvW,EAAKkW,WAAWI,KAG1DC,EAAgBF,EAEbE,CACX,CACA,MAAMC,GAAoBC,GAAUA,EAAQC,cAAcC,YAAYH,iBAAiBC,EAAS,MAI1FG,GAAY,CACd,MACA,QACA,SACA,QAEJ,SAASC,GAAmBC,EAAQ1V,EAAO2V,GACvC,MAAMC,EAAS,CAAC,EAChBD,EAASA,EAAS,IAAMA,EAAS,GACjC,IAAI,IAAItlB,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,MAAMwlB,EAAML,GAAUnlB,GACtBulB,EAAOC,GAAO9f,WAAW2f,EAAO1V,EAAQ,IAAM6V,EAAMF,KAAY,CACpE,CAGA,OAFAC,EAAO9Q,MAAQ8Q,EAAOhS,KAAOgS,EAAOlS,MACpCkS,EAAO5O,OAAS4O,EAAOnS,IAAMmS,EAAOjS,OAC7BiS,CACX,CAgCI,SAASE,GAAoBC,EAAOrY,GACpC,GAAI,WAAYqY,EACZ,OAAOA,EAEX,MAAM,OAAEpP,EAAO,wBAAEH,GAA6B9I,EACxCsC,EAAQoV,GAAiBzO,GACzBqP,EAAgC,eAApBhW,EAAMiW,UAClBC,EAAWT,GAAmBzV,EAAO,WACrCmW,EAAUV,GAAmBzV,EAAO,SAAU,UAC9C,EAAExN,EAAE,EAAEE,EAAE,IAAE0jB,GAnChB,SAA2BjgB,EAAGwQ,GAC9B,MAAM0P,EAAUlgB,EAAEkgB,QACZnlB,EAASmlB,GAAWA,EAAQ7lB,OAAS6lB,EAAQ,GAAKlgB,GAClD,QAAEmgB,EAAQ,QAAEC,GAAarlB,EAC/B,IACIsB,EAAGE,EADH0jB,GAAM,EAEV,GAXiB,EAAC5jB,EAAGE,EAAGtB,KAAUoB,EAAI,GAAKE,EAAI,MAAQtB,IAAWA,EAAOolB,YAWrEC,CAAaH,EAASC,EAASpgB,EAAE/E,QACjCoB,EAAI8jB,EACJ5jB,EAAI6jB,MACD,CACH,MAAM/N,EAAO7B,EAAO+P,wBACpBlkB,EAAItB,EAAOylB,QAAUnO,EAAK5E,KAC1BlR,EAAIxB,EAAO0lB,QAAUpO,EAAK/E,IAC1B2S,GAAM,CACV,CACA,MAAO,CACH5jB,IACAE,IACA0jB,MAER,CAe6BS,CAAkBd,EAAOpP,GAC5CU,EAAU6O,EAAStS,MAAQwS,GAAOD,EAAQvS,MAC1C0D,EAAU4O,EAASzS,KAAO2S,GAAOD,EAAQ1S,KAC/C,IAAI,MAAEqB,EAAM,OAAEkC,GAAYtJ,EAK1B,OAJIsY,IACAlR,GAASoR,EAASpR,MAAQqR,EAAQrR,MAClCkC,GAAUkP,EAASlP,OAASmP,EAAQnP,QAEjC,CACHxU,EAAG2B,KAAKiB,OAAO5C,EAAI6U,GAAWvC,EAAQ6B,EAAO7B,MAAQ0B,GACrD9T,EAAGyB,KAAKiB,OAAO1C,EAAI4U,GAAWN,EAASL,EAAOK,OAASR,GAE/D,CA0BA,MAAMsQ,GAAUvkB,GAAI4B,KAAKiB,MAAU,GAAJ7C,GAAU,GAuCrC,SAASwkB,GAAYrZ,EAAOsZ,EAAYC,GACxC,MAAMC,EAAaF,GAAc,EAC3BG,EAAehjB,KAAKoB,MAAMmI,EAAMsJ,OAASkQ,GACzCE,EAAcjjB,KAAKoB,MAAMmI,EAAMoH,MAAQoS,GAC7CxZ,EAAMsJ,OAAS7S,KAAKoB,MAAMmI,EAAMsJ,QAChCtJ,EAAMoH,MAAQ3Q,KAAKoB,MAAMmI,EAAMoH,OAC/B,MAAM6B,EAASjJ,EAAMiJ,OAQrB,OAJIA,EAAO3G,QAAUiX,IAAetQ,EAAO3G,MAAMgH,SAAWL,EAAO3G,MAAM8E,SACrE6B,EAAO3G,MAAMgH,OAAS,GAAGtJ,EAAMsJ,WAC/BL,EAAO3G,MAAM8E,MAAQ,GAAGpH,EAAMoH,YAE9BpH,EAAM8I,0BAA4B0Q,GAAcvQ,EAAOK,SAAWmQ,GAAgBxQ,EAAO7B,QAAUsS,KACnG1Z,EAAM8I,wBAA0B0Q,EAChCvQ,EAAOK,OAASmQ,EAChBxQ,EAAO7B,MAAQsS,EACf1Z,EAAM2C,IAAIgX,aAAaH,EAAY,EAAG,EAAGA,EAAY,EAAG,IACjD,EAGf,CAKI,MAAMI,GAA+B,WACrC,IAAIC,GAAmB,EACvB,IACI,MAAM3lB,EAAU,CACZ,WAAI4lB,GAEA,OADAD,GAAmB,GACZ,CACX,GAEA7C,OACA7b,OAAO4e,iBAAiB,OAAQ,KAAM7lB,GACtCiH,OAAO6e,oBAAoB,OAAQ,KAAM9lB,GAEjD,CAAE,MAAOuE,GAET,CACA,OAAOohB,CACX,CAjByC,GA0BrC,SAASI,GAAatC,EAASuC,GAC/B,MAAM/oB,EA/LV,SAAkBgpB,EAAID,GAClB,OAAOxC,GAAiByC,GAAIC,iBAAiBF,EACjD,CA6LkBG,CAAS1C,EAASuC,GAC1B1L,EAAUrd,GAASA,EAAMsd,MAAM,qBACrC,OAAOD,GAAWA,EAAQ,QAAK9M,CACnC,CAII,SAAS4Y,GAAaC,EAAIC,EAAI5e,EAAGoH,GACjC,MAAO,CACHlO,EAAGylB,EAAGzlB,EAAI8G,GAAK4e,EAAG1lB,EAAIylB,EAAGzlB,GACzBE,EAAGulB,EAAGvlB,EAAI4G,GAAK4e,EAAGxlB,EAAIulB,EAAGvlB,GAEjC,CAGI,SAASylB,GAAsBF,EAAIC,EAAI5e,EAAGoH,GAC1C,MAAO,CACHlO,EAAGylB,EAAGzlB,EAAI8G,GAAK4e,EAAG1lB,EAAIylB,EAAGzlB,GACzBE,EAAY,WAATgO,EAAoBpH,EAAI,GAAM2e,EAAGvlB,EAAIwlB,EAAGxlB,EAAa,UAATgO,EAAmBpH,EAAI,EAAI2e,EAAGvlB,EAAIwlB,EAAGxlB,EAAI4G,EAAI,EAAI4e,EAAGxlB,EAAIulB,EAAGvlB,EAElH,CAGI,SAAS0lB,GAAqBH,EAAIC,EAAI5e,EAAGoH,GACzC,MAAM2X,EAAM,CACR7lB,EAAGylB,EAAGxO,KACN/W,EAAGulB,EAAGtO,MAEJ2O,EAAM,CACR9lB,EAAG0lB,EAAG1O,KACN9W,EAAGwlB,EAAGxO,MAEJ7V,EAAImkB,GAAaC,EAAII,EAAK/e,GAC1BxF,EAAIkkB,GAAaK,EAAKC,EAAKhf,GAC3Bif,EAAIP,GAAaM,EAAKJ,EAAI5e,GAC1BqC,EAAIqc,GAAankB,EAAGC,EAAGwF,GACvBnD,EAAI6hB,GAAalkB,EAAGykB,EAAGjf,GAC7B,OAAO0e,GAAarc,EAAGxF,EAAGmD,EAC9B,CAyCA,SAASkf,GAAcC,EAAKC,EAAO5T,GAC/B,OAAO2T,EAxCmB,SAASC,EAAO5T,GAC1C,MAAO,CACHtS,EAAGA,GACQkmB,EAAQA,EAAQ5T,EAAQtS,EAEnC,QAAAmmB,CAAUvR,GACNtC,EAAQsC,CACZ,EACA8D,UAAW/R,GACO,WAAVA,EACOA,EAEM,UAAVA,EAAoB,OAAS,QAExCyf,MAAM,CAACpmB,EAAG3D,IACC2D,EAAI3D,EAEfgqB,WAAW,CAACrmB,EAAGsmB,IACJtmB,EAAIsmB,EAGvB,CAmBiBC,CAAsBL,EAAO5T,GAjBnC,CACHtS,EAAGA,GACQA,EAEX,QAAAmmB,CAAUvR,GAAI,EACd8D,UAAW/R,GACAA,EAEXyf,MAAM,CAACpmB,EAAG3D,IACC2D,EAAI3D,EAEfgqB,WAAW,CAACrmB,EAAGwmB,IACJxmB,EAMnB,CACA,SAASymB,GAAsB5Y,EAAK6Y,GAChC,IAAIlZ,EAAOmZ,EACO,QAAdD,GAAqC,QAAdA,IACvBlZ,EAAQK,EAAIsG,OAAO3G,MACnBmZ,EAAW,CACPnZ,EAAM8X,iBAAiB,aACvB9X,EAAMoZ,oBAAoB,cAE9BpZ,EAAMqZ,YAAY,YAAaH,EAAW,aAC1C7Y,EAAIiZ,kBAAoBH,EAEhC,CACA,SAASI,GAAqBlZ,EAAK8Y,QACd/Z,IAAb+Z,WACO9Y,EAAIiZ,kBACXjZ,EAAIsG,OAAO3G,MAAMqZ,YAAY,YAAaF,EAAS,GAAIA,EAAS,IAExE,CAEA,SAASK,GAAW5B,GAChB,MAAiB,UAAbA,EACO,CACH6B,QAAS9iB,EACT+iB,QAASjjB,EACTkjB,UAAWjjB,GAGZ,CACH+iB,QAASjiB,EACTkiB,QAAS,CAAC7lB,EAAGC,IAAID,EAAIC,EACrB6lB,UAAYnnB,GAAIA,EAExB,CACA,SAASonB,IAAiB,MAAE/iB,EAAM,IAAEC,EAAI,MAAE+iB,EAAM,KAAE/W,EAAK,MAAE9C,IACrD,MAAO,CACHnJ,MAAOA,EAAQgjB,EACf/iB,IAAKA,EAAM+iB,EACX/W,KAAMA,IAAShM,EAAMD,EAAQ,GAAKgjB,GAAU,EAC5C7Z,QAER,CA8BC,SAAS8Z,GAAcC,EAAShI,EAAQ/N,GACrC,IAAKA,EACD,MAAO,CACH+V,GAGR,MAAM,SAAEnC,EAAW/gB,MAAOmjB,EAAaljB,IAAKmjB,GAAcjW,EACpD6V,EAAQ9H,EAAOvhB,QACf,QAAEkpB,EAAQ,QAAED,EAAQ,UAAEE,GAAeH,GAAW5B,IAChD,MAAE/gB,EAAM,IAAEC,EAAI,KAAEgM,EAAK,MAAE9C,GAtCjC,SAAoB+Z,EAAShI,EAAQ/N,GACjC,MAAM,SAAE4T,EAAW/gB,MAAOmjB,EAAaljB,IAAKmjB,GAAcjW,GACpD,QAAEyV,EAAQ,UAAEE,GAAeH,GAAW5B,GACtCiC,EAAQ9H,EAAOvhB,OACrB,IACIH,EAAGO,GADH,MAAEiG,EAAM,IAAEC,EAAI,KAAEgM,GAAUiX,EAE9B,GAAIjX,EAAM,CAGN,IAFAjM,GAASgjB,EACT/iB,GAAO+iB,EACHxpB,EAAI,EAAGO,EAAOipB,EAAOxpB,EAAIO,GACpB6oB,EAAQE,EAAU5H,EAAOlb,EAAQgjB,GAAOjC,IAAYoC,EAAYC,KADpC5pB,EAIjCwG,IACAC,IAEJD,GAASgjB,EACT/iB,GAAO+iB,CACX,CAIA,OAHI/iB,EAAMD,IACNC,GAAO+iB,GAEJ,CACHhjB,QACAC,MACAgM,OACA9C,MAAO+Z,EAAQ/Z,MAEvB,CAU4Cka,CAAWH,EAAShI,EAAQ/N,GAC9D4R,EAAS,GACf,IAEI/mB,EAAOga,EAAOsR,EAFdC,GAAS,EACTC,EAAW,KAEf,MAEMC,EAAc,IAAIF,GAFEX,EAAQO,EAAYG,EAAWtrB,IAA6C,IAAnC6qB,EAAQM,EAAYG,GAGjFI,EAAa,KAAKH,GAF6B,IAA7BV,EAAQO,EAAUprB,IAAgB4qB,EAAQQ,EAAUE,EAAWtrB,GAGvF,IAAI,IAAIwB,EAAIwG,EAAOud,EAAOvd,EAAOxG,GAAKyG,IAAOzG,EACzCwY,EAAQkJ,EAAO1hB,EAAIwpB,GACfhR,EAAMmJ,OAGVnjB,EAAQ8qB,EAAU9Q,EAAM+O,IACpB/oB,IAAUsrB,IAGdC,EAASX,EAAQ5qB,EAAOmrB,EAAYC,GACnB,OAAbI,GAAqBC,MACrBD,EAA0C,IAA/BX,EAAQ7qB,EAAOmrB,GAAoB3pB,EAAI+jB,GAErC,OAAbiG,GAAqBE,MACrB3E,EAAOziB,KAAKymB,GAAiB,CACzB/iB,MAAOwjB,EACPvjB,IAAKzG,EACLyS,OACA+W,QACA7Z,WAEJqa,EAAW,MAEfjG,EAAO/jB,EACP8pB,EAAYtrB,IAWhB,OATiB,OAAbwrB,GACAzE,EAAOziB,KAAKymB,GAAiB,CACzB/iB,MAAOwjB,EACPvjB,MACAgM,OACA+W,QACA7Z,WAGD4V,CACX,CACC,SAAS4E,GAAe3Q,EAAM7F,GAC3B,MAAM4R,EAAS,GACT6E,EAAW5Q,EAAK4Q,SACtB,IAAI,IAAIpqB,EAAI,EAAGA,EAAIoqB,EAASjqB,OAAQH,IAAI,CACpC,MAAMqqB,EAAMZ,GAAcW,EAASpqB,GAAIwZ,EAAKkI,OAAQ/N,GAChD0W,EAAIlqB,QACJolB,EAAOziB,QAAQunB,EAEvB,CACA,OAAO9E,CACX,CAkJA,SAAS+E,GAAU/oB,GACf,MAAO,CACHyN,gBAAiBzN,EAAQyN,gBACzBub,eAAgBhpB,EAAQgpB,eACxBC,WAAYjpB,EAAQipB,WACpBC,iBAAkBlpB,EAAQkpB,iBAC1BC,gBAAiBnpB,EAAQmpB,gBACzBrS,YAAa9W,EAAQ8W,YACrBpJ,YAAa1N,EAAQ0N,YAE7B,CACA,SAAS0b,GAAahb,EAAOib,GACzB,IAAKA,EACD,OAAO,EAEX,MAAMhN,EAAQ,GACRiN,EAAW,SAASzpB,EAAK5C,GAC3B,OAAKgN,GAAoBhN,IAGpBof,EAAM1P,SAAS1P,IAChBof,EAAM9a,KAAKtE,GAERof,EAAMvc,QAAQ7C,IALVA,CAMf,EACA,OAAO8N,KAAKC,UAAUoD,EAAOkb,KAAcve,KAAKC,UAAUqe,EAAWC,EACzE,CAEA,SAASC,GAAeha,EAAOia,EAAWC,GACtC,OAAOla,EAAMvP,QAAQqS,KAAO9C,EAAMka,GAASD,EAAUC,EACzD,CAaA,SAASC,GAAmB5d,EAAO6d,GAC/B,MAAMtX,EAAOsX,EAAKC,MAClB,GAAIvX,EAAKwX,SACL,OAAO,EAEX,MAAM3S,EAjBV,SAAwByS,EAAMH,GAC1B,MAAM,OAAEM,EAAO,OAAEC,GAAYJ,EAC7B,OAAIG,GAAUC,EACH,CACH/X,KAAMuX,GAAeO,EAAQN,EAAW,QACxC1X,MAAOyX,GAAeO,EAAQN,EAAW,SACzC3X,IAAK0X,GAAeQ,EAAQP,EAAW,OACvCzX,OAAQwX,GAAeQ,EAAQP,EAAW,WAG3CA,CACX,CAMiBQ,CAAeL,EAAM7d,EAAM0d,WACxC,MAAO,CACHxX,MAAoB,IAAdK,EAAKL,KAAiB,EAAIkF,EAAKlF,OAAsB,IAAdK,EAAKL,KAAgB,EAAIK,EAAKL,MAC3EF,OAAsB,IAAfO,EAAKP,MAAkBhG,EAAMoH,MAAQgE,EAAKpF,QAAwB,IAAfO,EAAKP,MAAiB,EAAIO,EAAKP,OACzFD,KAAkB,IAAbQ,EAAKR,IAAgB,EAAIqF,EAAKrF,MAAoB,IAAbQ,EAAKR,IAAe,EAAIQ,EAAKR,KACvEE,QAAwB,IAAhBM,EAAKN,OAAmBjG,EAAMsJ,OAAS8B,EAAKnF,SAA0B,IAAhBM,EAAKN,OAAkB,EAAIM,EAAKN,QAEtG,CCvtFA,MAAMkY,GACF,WAAA7c,GACIvB,KAAKqe,SAAW,KAChBre,KAAKse,QAAU,IAAIzf,IACnBmB,KAAKue,UAAW,EAChBve,KAAKwe,eAAY7c,CACrB,CACH,OAAA8c,CAAQxe,EAAOye,EAAOC,EAAMptB,GACrB,MAAMqtB,EAAYF,EAAM1jB,UAAUzJ,GAC5BstB,EAAWH,EAAMxZ,SACvB0Z,EAAU1jB,QAAS7I,GAAKA,EAAG,CACnB4N,QACA6e,QAASJ,EAAMI,QACfD,WACAE,YAAaroB,KAAKmD,IAAI8kB,EAAOD,EAAMtlB,MAAOylB,KAEtD,CACH,QAAAG,GACWhf,KAAKqe,WAGTre,KAAKue,UAAW,EAChBve,KAAKqe,SAAWljB,EAAiBxJ,KAAKyJ,OAAQ,KAC1C4E,KAAKif,UACLjf,KAAKqe,SAAW,KACZre,KAAKue,UACLve,KAAKgf,aAGjB,CACH,OAAAC,CAAQN,EAAOO,KAAKC,OACb,IAAIC,EAAY,EAChBpf,KAAKse,QAAQpjB,QAAQ,CAACwjB,EAAOze,KACzB,IAAKye,EAAMW,UAAYX,EAAMY,MAAMvsB,OAC/B,OAEJ,MAAMusB,EAAQZ,EAAMY,MACpB,IAEI/oB,EAFA3D,EAAI0sB,EAAMvsB,OAAS,EACnBwsB,GAAO,EAEX,KAAM3sB,GAAK,IAAKA,EACZ2D,EAAO+oB,EAAM1sB,GACT2D,EAAKipB,SACDjpB,EAAKkpB,OAASf,EAAMxZ,WACpBwZ,EAAMxZ,SAAW3O,EAAKkpB,QAE1BlpB,EAAKmpB,KAAKf,GACVY,GAAO,IAEPD,EAAM1sB,GAAK0sB,EAAMA,EAAMvsB,OAAS,GAChCusB,EAAMK,OAGVJ,IACAtf,EAAMsf,OACNvf,KAAKye,QAAQxe,EAAOye,EAAOC,EAAM,aAEhCW,EAAMvsB,SACP2rB,EAAMW,SAAU,EAChBrf,KAAKye,QAAQxe,EAAOye,EAAOC,EAAM,YACjCD,EAAMI,SAAU,GAEpBM,GAAaE,EAAMvsB,SAEvBiN,KAAKwe,UAAYG,EACC,IAAdS,IACApf,KAAKue,UAAW,EAExB,CACH,SAAAqB,CAAU3f,GACH,MAAM4f,EAAS7f,KAAKse,QACpB,IAAII,EAAQmB,EAAOxgB,IAAIY,GAavB,OAZKye,IACDA,EAAQ,CACJW,SAAS,EACTP,SAAS,EACTQ,MAAO,GACPtkB,UAAW,CACP8kB,SAAU,GACVC,SAAU,KAGlBF,EAAOrgB,IAAIS,EAAOye,IAEfA,CACX,CACH,MAAAsB,CAAO/f,EAAOqY,EAAO2H,GACdjgB,KAAK4f,UAAU3f,GAAOjF,UAAUsd,GAAO5iB,KAAKuqB,EAChD,CACH,GAAApN,CAAI5S,EAAOqf,GACCA,GAAUA,EAAMvsB,QAGrBiN,KAAK4f,UAAU3f,GAAOqf,MAAM5pB,QAAQ4pB,EACxC,CACH,GAAA9oB,CAAIyJ,GACG,OAAOD,KAAK4f,UAAU3f,GAAOqf,MAAMvsB,OAAS,CAChD,CACH,KAAAqG,CAAM6G,GACC,MAAMye,EAAQ1e,KAAKse,QAAQjf,IAAIY,GAC1Bye,IAGLA,EAAMW,SAAU,EAChBX,EAAMtlB,MAAQ8lB,KAAKC,MACnBT,EAAMxZ,SAAWwZ,EAAMY,MAAMY,OAAO,CAACC,EAAKC,IAAM1pB,KAAKoD,IAAIqmB,EAAKC,EAAIC,WAAY,GAC9ErgB,KAAKgf,WACT,CACA,OAAAK,CAAQpf,GACJ,IAAKD,KAAKue,SACN,OAAO,EAEX,MAAMG,EAAQ1e,KAAKse,QAAQjf,IAAIY,GAC/B,SAAKye,GAAUA,EAAMW,SAAYX,EAAMY,MAAMvsB,OAIjD,CACH,IAAAutB,CAAKrgB,GACE,MAAMye,EAAQ1e,KAAKse,QAAQjf,IAAIY,GAC/B,IAAKye,IAAUA,EAAMY,MAAMvsB,OACvB,OAEJ,MAAMusB,EAAQZ,EAAMY,MACpB,IAAI1sB,EAAI0sB,EAAMvsB,OAAS,EACvB,KAAMH,GAAK,IAAKA,EACZ0sB,EAAM1sB,GAAG2tB,SAEb7B,EAAMY,MAAQ,GACdtf,KAAKye,QAAQxe,EAAOye,EAAOQ,KAAKC,MAAO,WAC3C,CACH,MAAAqB,CAAOvgB,GACA,OAAOD,KAAKse,QAAQxL,OAAO7S,EAC/B,EAEJ,IAAIwgB,GAA2B,IAAIrC,GAEnC,MAAMsC,GAAc,cACdC,GAAgB,CAClBC,QAAQ,CAACxb,EAAME,EAAIub,IACRA,EAAS,GAAMvb,EAAKF,EAElC,KAAA/G,CAAO+G,EAAME,EAAIub,GACV,MAAMC,EAAKziB,GAAM+G,GAAQsb,IACnBK,EAAKD,EAAGE,OAAS3iB,GAAMiH,GAAMob,IACnC,OAAOK,GAAMA,EAAGC,MAAQD,EAAGE,IAAIH,EAAID,GAAQpiB,YAAc6G,CAC7D,EACA4b,OAAO,CAAC9b,EAAME,EAAIub,IACPzb,GAAQE,EAAKF,GAAQyb,GAGpC,MAAMM,GACF,WAAA5f,CAAY6f,EAAKztB,EAAQsb,EAAM3J,GAC3B,MAAM+b,EAAe1tB,EAAOsb,GAC5B3J,EAAKqK,GAAQ,CACTyR,EAAI9b,GACJA,EACA+b,EACAD,EAAIhc,OAER,MAAMA,EAAOuK,GAAQ,CACjByR,EAAIhc,KACJic,EACA/b,IAEJtF,KAAKwf,SAAU,EACfxf,KAAKshB,IAAMF,EAAI/uB,IAAMsuB,GAAcS,EAAI7vB,aAAe6T,GACtDpF,KAAKuhB,QAAUtlB,GAAQmlB,EAAIjc,SAAWlJ,GAAQC,OAC9C8D,KAAKwhB,OAAS9qB,KAAKoB,MAAMonB,KAAKC,OAASiC,EAAInc,OAAS,IACpDjF,KAAKqgB,UAAYrgB,KAAKyf,OAAS/oB,KAAKoB,MAAMspB,EAAIlc,UAC9ClF,KAAKyhB,QAAUL,EAAI/b,KACnBrF,KAAK0hB,QAAU/tB,EACfqM,KAAK2hB,MAAQ1S,EACbjP,KAAK4hB,MAAQxc,EACbpF,KAAK6hB,IAAMvc,EACXtF,KAAK8hB,eAAYngB,CACrB,CACA,MAAA6D,GACI,OAAOxF,KAAKwf,OAChB,CACA,MAAAuC,CAAOX,EAAK9b,EAAIqZ,GACZ,GAAI3e,KAAKwf,QAAS,CACdxf,KAAKye,SAAQ,GACb,MAAM4C,EAAerhB,KAAK0hB,QAAQ1hB,KAAK2hB,OACjCK,EAAUrD,EAAO3e,KAAKwhB,OACtB5gB,EAASZ,KAAKqgB,UAAY2B,EAChChiB,KAAKwhB,OAAS7C,EACd3e,KAAKqgB,UAAY3pB,KAAKoB,MAAMpB,KAAKoD,IAAI8G,EAAQwgB,EAAIlc,WACjDlF,KAAKyf,QAAUuC,EACfhiB,KAAKyhB,QAAUL,EAAI/b,KACnBrF,KAAK6hB,IAAMlS,GAAQ,CACfyR,EAAI9b,GACJA,EACA+b,EACAD,EAAIhc,OAERpF,KAAK4hB,MAAQjS,GAAQ,CACjByR,EAAIhc,KACJic,EACA/b,GAER,CACJ,CACA,MAAAib,GACQvgB,KAAKwf,UACLxf,KAAK0f,KAAKR,KAAKC,OACfnf,KAAKwf,SAAU,EACfxf,KAAKye,SAAQ,GAErB,CACA,IAAAiB,CAAKf,GACD,MAAMqD,EAAUrD,EAAO3e,KAAKwhB,OACtBtc,EAAWlF,KAAKqgB,UAChBpR,EAAOjP,KAAK2hB,MACZvc,EAAOpF,KAAK4hB,MACZvc,EAAOrF,KAAKyhB,MACZnc,EAAKtF,KAAK6hB,IAChB,IAAIhB,EAEJ,GADA7gB,KAAKwf,QAAUpa,IAASE,IAAOD,GAAQ2c,EAAU9c,IAC5ClF,KAAKwf,QAGN,OAFAxf,KAAK0hB,QAAQzS,GAAQ3J,OACrBtF,KAAKye,SAAQ,GAGbuD,EAAU,EACVhiB,KAAK0hB,QAAQzS,GAAQ7J,GAGzByb,EAASmB,EAAU9c,EAAW,EAC9B2b,EAASxb,GAAQwb,EAAS,EAAI,EAAIA,EAASA,EAC3CA,EAAS7gB,KAAKuhB,QAAQ7qB,KAAKmD,IAAI,EAAGnD,KAAKoD,IAAI,EAAG+mB,KAC9C7gB,KAAK0hB,QAAQzS,GAAQjP,KAAKshB,IAAIlc,EAAME,EAAIub,GAC5C,CACA,IAAAoB,GACI,MAAMC,EAAWliB,KAAK8hB,YAAc9hB,KAAK8hB,UAAY,IACrD,OAAO,IAAIK,QAAQ,CAACC,EAAKC,KACrBH,EAASxsB,KAAK,CACV0sB,MACAC,SAGZ,CACA,OAAA5D,CAAQ6D,GACJ,MAAMC,EAASD,EAAW,MAAQ,MAC5BJ,EAAWliB,KAAK8hB,WAAa,GACnC,IAAI,IAAIlvB,EAAI,EAAGA,EAAIsvB,EAASnvB,OAAQH,IAChCsvB,EAAStvB,GAAG2vB,IAEpB,EAGJ,MAAMC,GACF,WAAAjhB,CAAYtB,EAAOwiB,GACfziB,KAAK0iB,OAASziB,EACdD,KAAK2iB,YAAc,IAAI9jB,IACvBmB,KAAK4iB,UAAUH,EACnB,CACA,SAAAG,CAAUH,GACN,IAAK5wB,EAAS4wB,GACV,OAEJ,MAAMI,EAAmBrxB,OAAOsB,KAAK8R,GAASlD,WACxCohB,EAAgB9iB,KAAK2iB,YAC3BnxB,OAAOuxB,oBAAoBN,GAAQvnB,QAASlH,IACxC,MAAMotB,EAAMqB,EAAOzuB,GACnB,IAAKnC,EAASuvB,GACV,OAEJ,MAAMkB,EAAW,CAAC,EAClB,IAAK,MAAMU,KAAUH,EACjBP,EAASU,GAAU5B,EAAI4B,IAE1B3xB,EAAQ+vB,EAAI7b,aAAe6b,EAAI7b,YAAc,CAC1CvR,IACDkH,QAAS+T,IACJA,IAASjb,GAAQ8uB,EAActsB,IAAIyY,IACnC6T,EAActjB,IAAIyP,EAAMqT,MAIxC,CACH,eAAAW,CAAgBtvB,EAAQiM,GACjB,MAAMsjB,EAAatjB,EAAOzL,QACpBA,EAwEd,SAA8BR,EAAQuvB,GAClC,IAAKA,EACD,OAEJ,IAAI/uB,EAAUR,EAAOQ,QACrB,GAAKA,EAUL,OANIA,EAAQgvB,UACRxvB,EAAOQ,QAAUA,EAAU3C,OAAOkP,OAAO,CAAC,EAAGvM,EAAS,CAClDgvB,SAAS,EACTC,YAAa,CAAC,KAGfjvB,EATHR,EAAOQ,QAAU+uB,CAUzB,CAxFwBG,CAAqB1vB,EAAQuvB,GAC7C,IAAK/uB,EACD,MAAO,GAEX,MAAMwR,EAAa3F,KAAKsjB,kBAAkBnvB,EAAS+uB,GAOnD,OANIA,EAAWC,SAwDvB,SAAkBxd,EAAYJ,GAC1B,MAAM8Z,EAAU,GACVvsB,EAAOtB,OAAOsB,KAAKyS,GACzB,IAAI,IAAI3S,EAAI,EAAGA,EAAIE,EAAKC,OAAQH,IAAI,CAChC,MAAM2wB,EAAO5d,EAAW7S,EAAKF,IACzB2wB,GAAQA,EAAK/d,UACb6Z,EAAQ3pB,KAAK6tB,EAAKtB,OAE1B,CACA,OAAOE,QAAQqB,IAAInE,EACvB,CAjEYoE,CAAS9vB,EAAOQ,QAAQivB,YAAaF,GAAYQ,KAAK,KAClD/vB,EAAOQ,QAAU+uB,GAClB,QAGAvd,CACX,CACH,iBAAA2d,CAAkB3vB,EAAQiM,GACnB,MAAMkjB,EAAgB9iB,KAAK2iB,YACrBhd,EAAa,GACb0Z,EAAU1rB,EAAOyvB,cAAgBzvB,EAAOyvB,YAAc,CAAC,GACvDvU,EAAQrd,OAAOsB,KAAK8M,GACpB+e,EAAOO,KAAKC,MAClB,IAAIvsB,EACJ,IAAIA,EAAIic,EAAM9b,OAAS,EAAGH,GAAK,IAAKA,EAAE,CAClC,MAAMqc,EAAOJ,EAAMjc,GACnB,GAAuB,MAAnBqc,EAAKlZ,OAAO,GACZ,SAEJ,GAAa,YAATkZ,EAAoB,CACpBtJ,EAAWjQ,QAAQsK,KAAKijB,gBAAgBtvB,EAAQiM,IAChD,QACJ,CACA,MAAMxO,EAAQwO,EAAOqP,GACrB,IAAIvN,EAAY2d,EAAQpQ,GACxB,MAAMmS,EAAM0B,EAAczjB,IAAI4P,GAC9B,GAAIvN,EAAW,CACX,GAAI0f,GAAO1f,EAAU8D,SAAU,CAC3B9D,EAAUqgB,OAAOX,EAAKhwB,EAAOutB,GAC7B,QACJ,CACIjd,EAAU6e,QAElB,CACKa,GAAQA,EAAIlc,UAIjBma,EAAQpQ,GAAQvN,EAAY,IAAIyf,GAAUC,EAAKztB,EAAQsb,EAAM7d,GAC7DuU,EAAWjQ,KAAKgM,IAJZ/N,EAAOsb,GAAQ7d,CAKvB,CACA,OAAOuU,CACX,CACH,MAAAoc,CAAOpuB,EAAQiM,GACR,GAA8B,IAA1BI,KAAK2iB,YAAYrsB,KAEjB,YADA9E,OAAOkP,OAAO/M,EAAQiM,GAG1B,MAAM+F,EAAa3F,KAAKsjB,kBAAkB3vB,EAAQiM,GAClD,OAAI+F,EAAW5S,QACX0tB,GAAS5N,IAAI7S,KAAK0iB,OAAQ/c,IACnB,QAFX,CAIJ,EA+BJ,SAASge,GAAUjgB,EAAOkgB,GACtB,MAAMvX,EAAO3I,GAASA,EAAMvP,SAAW,CAAC,EAClCxB,EAAU0Z,EAAK1Z,QACfkH,OAAmB8H,IAAb0K,EAAKxS,IAAoB+pB,EAAkB,EACjD9pB,OAAmB6H,IAAb0K,EAAKvS,IAAoB8pB,EAAkB,EACvD,MAAO,CACHxqB,MAAOzG,EAAUmH,EAAMD,EACvBR,IAAK1G,EAAUkH,EAAMC,EAE7B,CAgCA,SAAS+pB,GAAwB5jB,EAAO6jB,GACpC,MAAMhxB,EAAO,GACPixB,EAAW9jB,EAAM+jB,uBAAuBF,GAC9C,IAAIlxB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO4wB,EAAShxB,OAAQH,EAAIO,IAAQP,EAC3CE,EAAK4C,KAAKquB,EAASnxB,GAAGW,OAE1B,OAAOT,CACX,CACA,SAASmxB,GAAWC,EAAO9yB,EAAO+yB,EAAShwB,EAAU,CAAC,GAClD,MAAMrB,EAAOoxB,EAAMpxB,KACbsxB,EAA8B,WAAjBjwB,EAAQ8O,KAC3B,IAAIrQ,EAAGO,EAAMG,EAAc+wB,EAC3B,GAAc,OAAVjzB,EACA,OAEJ,IAAIkzB,GAAQ,EACZ,IAAI1xB,EAAI,EAAGO,EAAOL,EAAKC,OAAQH,EAAIO,IAAQP,EAAE,CAEzC,GADAU,GAAgBR,EAAKF,GACjBU,IAAiB6wB,EAAS,CAE1B,GADAG,GAAQ,EACJnwB,EAAQqvB,IACR,SAEJ,KACJ,CACAa,EAAaH,EAAMtkB,OAAOtM,GACtBxB,EAAeuyB,KAAgBD,GAAwB,IAAVhzB,GAAegG,EAAKhG,KAAWgG,EAAKitB,MACjFjzB,GAASizB,EAEjB,CACA,OAAKC,GAAUnwB,EAAQqvB,IAGhBpyB,EAFI,CAGf,CAiBA,SAASmzB,GAAU7gB,EAAOoa,GACtB,MAAM0G,EAAU9gB,GAASA,EAAMvP,QAAQqwB,QACvC,OAAOA,QAAuB7iB,IAAZ6iB,QAAwC7iB,IAAfmc,EAAKoG,KACpD,CAWA,SAASO,GAAiBC,EAAQC,EAAUC,GACxC,MAAMC,EAAWH,EAAOC,KAAcD,EAAOC,GAAY,CAAC,GAC1D,OAAOE,EAASD,KAAgBC,EAASD,GAAc,CAAC,EAC5D,CACA,SAASE,GAAoBZ,EAAOa,EAAQC,EAAUzzB,GAClD,IAAK,MAAMusB,KAAQiH,EAAOE,wBAAwB1zB,GAAMoB,UAAU,CAC9D,MAAMvB,EAAQ8yB,EAAMpG,EAAKvqB,OACzB,GAAIyxB,GAAY5zB,EAAQ,IAAM4zB,GAAY5zB,EAAQ,EAC9C,OAAO0sB,EAAKvqB,KAEpB,CACA,OAAO,IACX,CACA,SAAS2xB,GAAaC,EAAYC,GAC9B,MAAM,MAAEnlB,EAAQolB,YAAavH,GAAUqH,EACjCT,EAASzkB,EAAMqlB,UAAYrlB,EAAMqlB,QAAU,CAAC,IAC5C,OAAEC,EAAO,OAAER,EAASxxB,MAAOD,GAAkBwqB,EAC7C0H,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfzxB,EA7BV,SAAqB2xB,EAAYC,EAAY9H,GACzC,MAAO,GAAG6H,EAAWz0B,MAAM00B,EAAW10B,MAAM4sB,EAAKoG,OAASpG,EAAKvsB,MACnE,CA2BgBs0B,CAAYN,EAAQR,EAAQjH,GAClC3qB,EAAOiyB,EAAOryB,OACpB,IAAImxB,EACJ,IAAI,IAAItxB,EAAI,EAAGA,EAAIO,IAAQP,EAAE,CACzB,MAAM2D,EAAO6uB,EAAOxyB,IACZ,CAAC4yB,GAAQjyB,EAAQ,CAACmyB,GAAQt0B,GAAWmF,EAE7C2tB,GADmB3tB,EAAK+uB,UAAY/uB,EAAK+uB,QAAU,CAAC,IACjCI,GAASjB,GAAiBC,EAAQ1wB,EAAKT,GAC1D2wB,EAAM5wB,GAAgBlC,EACtB8yB,EAAM4B,KAAOhB,GAAoBZ,EAAOa,GAAQ,EAAMjH,EAAKvsB,MAC3D2yB,EAAM6B,QAAUjB,GAAoBZ,EAAOa,GAAQ,EAAOjH,EAAKvsB,OAC1C2yB,EAAM8B,gBAAkB9B,EAAM8B,cAAgB,CAAC,IACvD1yB,GAAgBlC,CACjC,CACJ,CACA,SAAS60B,GAAgBhmB,EAAOwlB,GAC5B,MAAM9hB,EAAS1D,EAAM0D,OACrB,OAAOnS,OAAOsB,KAAK6Q,GAAQuP,OAAQlf,GAAM2P,EAAO3P,GAAKyxB,OAASA,GAAMS,OACxE,CAuBA,SAASC,GAAYrI,EAAMwB,GACvB,MAAMhsB,EAAewqB,EAAKqH,WAAW5xB,MAC/BkyB,EAAO3H,EAAKiH,QAAUjH,EAAKiH,OAAOU,KACxC,GAAKA,EAAL,CAGAnG,EAAQA,GAASxB,EAAKsI,QACtB,IAAK,MAAMhB,KAAU9F,EAAM,CACvB,MAAMoF,EAASU,EAAOE,QACtB,IAAKZ,QAA2B/iB,IAAjB+iB,EAAOe,SAAsD9jB,IAA/B+iB,EAAOe,GAAMnyB,GACtD,cAEGoxB,EAAOe,GAAMnyB,QACeqO,IAA/B+iB,EAAOe,GAAMO,oBAA4ErkB,IAA7C+iB,EAAOe,GAAMO,cAAc1yB,WAChEoxB,EAAOe,GAAMO,cAAc1yB,EAE1C,CAXA,CAYJ,CACA,MAAM+yB,GAAsBpjB,GAAgB,UAATA,GAA6B,SAATA,EACjDqjB,GAAmB,CAACC,EAAQC,IAASA,EAASD,EAAS/0B,OAAOkP,OAAO,CAAC,EAAG6lB,GAK/E,MAAME,GACLC,gBAAkB,CAAC,EACnBA,0BAA4B,KAC5BA,uBAAyB,KACzB,WAAAnlB,CAAYtB,EAAO3M,GACZ0M,KAAKC,MAAQA,EACbD,KAAKgH,KAAO/G,EAAM2C,IAClB5C,KAAKzM,MAAQD,EACb0M,KAAK2mB,gBAAkB,CAAC,EACxB3mB,KAAKqlB,YAAcrlB,KAAK4mB,UACxB5mB,KAAK6mB,MAAQ7mB,KAAKqlB,YAAY9zB,KAC9ByO,KAAK7L,aAAUwN,EACd3B,KAAK8mB,UAAW,EACjB9mB,KAAK+mB,WAAQplB,EACb3B,KAAKgnB,iBAAcrlB,EACnB3B,KAAKinB,oBAAiBtlB,EACtB3B,KAAKknB,gBAAavlB,EAClB3B,KAAKmnB,gBAAaxlB,EAClB3B,KAAKonB,qBAAsB,EAC3BpnB,KAAKqnB,oBAAqB,EAC1BrnB,KAAKsnB,cAAW3lB,EAChB3B,KAAKunB,UAAY,GACjBvnB,KAAKwnB,8BAAgCA,mBACrCxnB,KAAKynB,2BAA6BA,gBAClCznB,KAAK0nB,YACT,CACA,UAAAA,GACI,MAAM5J,EAAO9d,KAAKqlB,YAClBrlB,KAAK4iB,YACL5iB,KAAK2nB,aACL7J,EAAK8J,SAAWrD,GAAUzG,EAAKiH,OAAQjH,GACvC9d,KAAK6nB,cACD7nB,KAAK7L,QAAQ6W,OAAShL,KAAKC,MAAM6nB,gBAAgB,WACjDtY,QAAQC,KAAK,qKAErB,CACA,WAAAsY,CAAYz0B,GACJ0M,KAAKzM,QAAUD,GACf6yB,GAAYnmB,KAAKqlB,aAErBrlB,KAAKzM,MAAQD,CACjB,CACA,UAAAq0B,GACI,MAAM1nB,EAAQD,KAAKC,MACb6d,EAAO9d,KAAKqlB,YACZ2C,EAAUhoB,KAAKioB,aACfC,EAAW,CAACzC,EAAM1wB,EAAGE,EAAGkzB,IAAa,MAAT1C,EAAe1wB,EAAa,MAAT0wB,EAAe0C,EAAIlzB,EAClEmzB,EAAMtK,EAAKuK,QAAUl2B,EAAe61B,EAAQK,QAASpC,GAAgBhmB,EAAO,MAC5EqoB,EAAMxK,EAAKyK,QAAUp2B,EAAe61B,EAAQO,QAAStC,GAAgBhmB,EAAO,MAC5EuoB,EAAM1K,EAAK2K,QAAUt2B,EAAe61B,EAAQS,QAASxC,GAAgBhmB,EAAO,MAC5E8C,EAAY+a,EAAK/a,UACjB2lB,EAAM5K,EAAK6K,QAAUT,EAASnlB,EAAWqlB,EAAKE,EAAKE,GACnDI,EAAM9K,EAAK+K,QAAUX,EAASnlB,EAAWulB,EAAKF,EAAKI,GACzD1K,EAAKG,OAASje,KAAK8oB,cAAcV,GACjCtK,EAAKI,OAASle,KAAK8oB,cAAcR,GACjCxK,EAAKiL,OAAS/oB,KAAK8oB,cAAcN,GACjC1K,EAAKyH,OAASvlB,KAAK8oB,cAAcJ,GACjC5K,EAAKiH,OAAS/kB,KAAK8oB,cAAcF,EACrC,CACA,UAAAX,GACI,OAAOjoB,KAAKC,MAAMsI,KAAKzG,SAAS9B,KAAKzM,MACzC,CACA,OAAAqzB,GACI,OAAO5mB,KAAKC,MAAM+oB,eAAehpB,KAAKzM,MAC1C,CACH,aAAAu1B,CAAcG,GACP,OAAOjpB,KAAKC,MAAM0D,OAAOslB,EAC7B,CACH,cAAAC,CAAexlB,GACR,MAAMoa,EAAO9d,KAAKqlB,YAClB,OAAO3hB,IAAUoa,EAAKyH,OAASzH,EAAKiH,OAASjH,EAAKyH,MACtD,CACA,KAAA4D,GACInpB,KAAKif,QAAQ,QACjB,CACH,QAAAmK,GACO,MAAMtL,EAAO9d,KAAKqlB,YACdrlB,KAAK+mB,OACLpsB,EAAoBqF,KAAK+mB,MAAO/mB,MAEhC8d,EAAK8J,UACLzB,GAAYrI,EAEpB,CACH,UAAAuL,GACO,MAAMrB,EAAUhoB,KAAKioB,aACf1f,EAAOyf,EAAQzf,OAASyf,EAAQzf,KAAO,IACvCwe,EAAQ/mB,KAAK+mB,MACnB,GAAIl1B,EAAS0W,GAAO,CAChB,MAAMuV,EAAO9d,KAAKqlB,YAClBrlB,KAAK+mB,MA5MjB,SAAkCxe,EAAMuV,GACpC,MAAM,OAAEyH,EAAO,OAAER,GAAYjH,EACvBwL,EAA2B,MAAhB/D,EAAOE,KAAe,IAAM,IACvC8D,EAA2B,MAAhBxE,EAAOU,KAAe,IAAM,IACvC3yB,EAAOtB,OAAOsB,KAAKyV,GACnBihB,EAAQ,IAAIl4B,MAAMwB,EAAKC,QAC7B,IAAIH,EAAGO,EAAMa,EACb,IAAIpB,EAAI,EAAGO,EAAOL,EAAKC,OAAQH,EAAIO,IAAQP,EACvCoB,EAAMlB,EAAKF,GACX42B,EAAM52B,GAAK,CACP,CAAC02B,GAAWt1B,EACZ,CAACu1B,GAAWhhB,EAAKvU,IAGzB,OAAOw1B,CACX,CA6LyBC,CAAyBlhB,EAAMuV,EAChD,MAAO,GAAIiJ,IAAUxe,EAAM,CACvB,GAAIwe,EAAO,CACPpsB,EAAoBosB,EAAO/mB,MAC3B,MAAM8d,EAAO9d,KAAKqlB,YAClBc,GAAYrI,GACZA,EAAKsI,QAAU,EACnB,CACI7d,GAAQ/W,OAAOk4B,aAAanhB,MD1KjB3N,EC2KO2N,GD1KpBxN,SACNH,EAAMG,SAASC,UAAUtF,KCyKOsK,ODtKpCxO,OAAOm4B,eAAe/uB,EAAO,WAAY,CACrC0Y,cAAc,EACd7O,YAAY,EACZrT,MAAO,CACH4J,UAAW,CCkKiBgF,SD7JpCtF,EAAYQ,QAASlH,IACjB,MAAMuuB,EAAS,UAAY1sB,EAAY7B,GACjC41B,EAAOhvB,EAAM5G,GACnBxC,OAAOm4B,eAAe/uB,EAAO5G,EAAK,CAC9Bsf,cAAc,EACd7O,YAAY,EACZ,KAAArT,IAAUkB,GACN,MAAM8vB,EAAMwH,EAAKp3B,MAAMwN,KAAM1N,GAM7B,OALAsI,EAAMG,SAASC,UAAUE,QAAS2uB,IACA,mBAAnBA,EAAOtH,IACdsH,EAAOtH,MAAWjwB,KAGnB8vB,CACX,QCiJApiB,KAAKunB,UAAY,GACjBvnB,KAAK+mB,MAAQxe,CACjB,CD/KR,IAA2B3N,CCgLvB,CACA,WAAAitB,GACI,MAAM/J,EAAO9d,KAAKqlB,YAClBrlB,KAAKqpB,aACDrpB,KAAKwnB,qBACL1J,EAAKkK,QAAU,IAAIhoB,KAAKwnB,mBAEhC,CACA,qBAAAsC,CAAsBC,GAClB,MAAMjM,EAAO9d,KAAKqlB,YACZ2C,EAAUhoB,KAAKioB,aACrB,IAAI+B,GAAe,EACnBhqB,KAAKqpB,aACL,MAAMY,EAAanM,EAAK8J,SACxB9J,EAAK8J,SAAWrD,GAAUzG,EAAKiH,OAAQjH,GACnCA,EAAKoG,QAAU8D,EAAQ9D,QACvB8F,GAAe,EACf7D,GAAYrI,GACZA,EAAKoG,MAAQ8D,EAAQ9D,OAEzBlkB,KAAKkqB,gBAAgBH,IACjBC,GAAgBC,IAAenM,EAAK8J,YACpC1C,GAAallB,KAAM8d,EAAKsI,SACxBtI,EAAK8J,SAAWrD,GAAUzG,EAAKiH,OAAQjH,GAE/C,CACH,SAAA8E,GACO,MAAMH,EAASziB,KAAKC,MAAMwiB,OACpB0H,EAAY1H,EAAO2H,iBAAiBpqB,KAAK6mB,OACzC3W,EAASuS,EAAO4H,gBAAgBrqB,KAAKioB,aAAckC,GAAW,GACpEnqB,KAAK7L,QAAUsuB,EAAO6H,eAAepa,EAAQlQ,KAAKmJ,cAClDnJ,KAAK8mB,SAAW9mB,KAAK7L,QAAQoP,QAC7BvD,KAAK2mB,gBAAkB,CAAC,CAC5B,CACH,KAAA4D,CAAMnxB,EAAOgjB,GACN,MAAQiJ,YAAavH,EAAOiJ,MAAOxe,GAAUvI,MACvC,OAAEulB,EAAO,SAAEqC,GAAc9J,EACzB0H,EAAQD,EAAOE,KACrB,IAEI7yB,EAAGwtB,EAAKgF,EAFRoF,EAAmB,IAAVpxB,GAAegjB,IAAU7T,EAAKxV,QAAgB+qB,EAAK2M,QAC5D9T,EAAOvd,EAAQ,GAAK0kB,EAAKsI,QAAQhtB,EAAQ,GAE7C,IAAsB,IAAlB4G,KAAK8mB,SACLhJ,EAAKsI,QAAU7d,EACfuV,EAAK2M,SAAU,EACfrF,EAAS7c,MACN,CAEC6c,EADA/zB,EAAQkX,EAAKnP,IACJ4G,KAAK0qB,eAAe5M,EAAMvV,EAAMnP,EAAOgjB,GACzCvqB,EAAS0W,EAAKnP,IACZ4G,KAAK2qB,gBAAgB7M,EAAMvV,EAAMnP,EAAOgjB,GAExCpc,KAAK4qB,mBAAmB9M,EAAMvV,EAAMnP,EAAOgjB,GAExD,MAAMyO,EAA6B,IAAmB,OAAfzK,EAAIoF,IAAmB7O,GAAQyJ,EAAIoF,GAAS7O,EAAK6O,GACxF,IAAI5yB,EAAI,EAAGA,EAAIwpB,IAASxpB,EACpBkrB,EAAKsI,QAAQxzB,EAAIwG,GAASgnB,EAAMgF,EAAOxyB,GACnC43B,IACIK,MACAL,GAAS,GAEb7T,EAAOyJ,GAGftC,EAAK2M,QAAUD,CACnB,CACI5C,GACA1C,GAAallB,KAAMolB,EAE3B,CACH,kBAAAwF,CAAmB9M,EAAMvV,EAAMnP,EAAOgjB,GAC/B,MAAM,OAAEmJ,EAAO,OAAER,GAAYjH,EACvB0H,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfqF,EAASvF,EAAOwF,YAChBC,EAAczF,IAAWR,EACzBK,EAAS,IAAI9zB,MAAM8qB,GACzB,IAAIxpB,EAAGO,EAAMI,EACb,IAAIX,EAAI,EAAGO,EAAOipB,EAAOxpB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIwG,EACZgsB,EAAOxyB,GAAK,CACR,CAAC4yB,GAAQwF,GAAezF,EAAOgF,MAAMO,EAAOv3B,GAAQA,GACpD,CAACmyB,GAAQX,EAAOwF,MAAMhiB,EAAKhV,GAAQA,IAG3C,OAAO6xB,CACX,CACH,cAAAsF,CAAe5M,EAAMvV,EAAMnP,EAAOgjB,GAC3B,MAAM,OAAE6B,EAAO,OAAEC,GAAYJ,EACvBsH,EAAS,IAAI9zB,MAAM8qB,GACzB,IAAIxpB,EAAGO,EAAMI,EAAOgD,EACpB,IAAI3D,EAAI,EAAGO,EAAOipB,EAAOxpB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIwG,EACZ7C,EAAOgS,EAAKhV,GACZ6xB,EAAOxyB,GAAK,CACRmC,EAAGkpB,EAAOsM,MAAMh0B,EAAK,GAAIhD,GACzB0B,EAAGipB,EAAOqM,MAAMh0B,EAAK,GAAIhD,IAGjC,OAAO6xB,CACX,CACH,eAAAuF,CAAgB7M,EAAMvV,EAAMnP,EAAOgjB,GAC5B,MAAM,OAAE6B,EAAO,OAAEC,GAAYJ,GACvB,SAAEmN,EAAU,IAAI,SAAEC,EAAU,KAASlrB,KAAK8mB,SAC1C1B,EAAS,IAAI9zB,MAAM8qB,GACzB,IAAIxpB,EAAGO,EAAMI,EAAOgD,EACpB,IAAI3D,EAAI,EAAGO,EAAOipB,EAAOxpB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIwG,EACZ7C,EAAOgS,EAAKhV,GACZ6xB,EAAOxyB,GAAK,CACRmC,EAAGkpB,EAAOsM,MAAMr1B,EAAiBqB,EAAM00B,GAAW13B,GAClD0B,EAAGipB,EAAOqM,MAAMr1B,EAAiBqB,EAAM20B,GAAW33B,IAG1D,OAAO6xB,CACX,CACH,SAAA+F,CAAU53B,GACH,OAAOyM,KAAKqlB,YAAYe,QAAQ7yB,EACpC,CACH,cAAA63B,CAAe73B,GACR,OAAOyM,KAAKqlB,YAAY9c,KAAKhV,EACjC,CACH,UAAA0wB,CAAWvgB,EAAO0hB,EAAQniB,GACnB,MAAMhD,EAAQD,KAAKC,MACb6d,EAAO9d,KAAKqlB,YACZj0B,EAAQg0B,EAAO1hB,EAAM+hB,MAK3B,OAAOxB,GAJO,CACVnxB,KAAM+wB,GAAwB5jB,GAAO,GACrCL,OAAQwlB,EAAOE,QAAQ5hB,EAAM+hB,MAAMO,eAEd50B,EAAO0sB,EAAKvqB,MAAO,CACxC0P,QAER,CACH,qBAAAooB,CAAsB5zB,EAAOiM,EAAO0hB,EAAQlB,GACrC,MAAMoH,EAAclG,EAAO1hB,EAAM+hB,MACjC,IAAIr0B,EAAwB,OAAhBk6B,EAAuBC,IAAMD,EACzC,MAAM1rB,EAASskB,GAASkB,EAAOE,QAAQ5hB,EAAM+hB,MACzCvB,GAAStkB,IACTskB,EAAMtkB,OAASA,EACfxO,EAAQ6yB,GAAWC,EAAOoH,EAAatrB,KAAKqlB,YAAY9xB,QAE5DkE,EAAMoC,IAAMnD,KAAKmD,IAAIpC,EAAMoC,IAAKzI,GAChCqG,EAAMqC,IAAMpD,KAAKoD,IAAIrC,EAAMqC,IAAK1I,EACpC,CACH,SAAAo6B,CAAU9nB,EAAO+nB,GACV,MAAM3N,EAAO9d,KAAKqlB,YACZe,EAAUtI,EAAKsI,QACfoE,EAAS1M,EAAK2M,SAAW/mB,IAAUoa,EAAKyH,OACxCpyB,EAAOizB,EAAQrzB,OACf24B,EAAa1rB,KAAKkpB,eAAexlB,GACjCwgB,EAlQM,EAACuH,EAAU3N,EAAM7d,IAAQwrB,IAAa3N,EAAK6N,QAAU7N,EAAK8J,UAAY,CAClF90B,KAAM+wB,GAAwB5jB,GAAO,GACrCL,OAAQ,MAgQMgsB,CAAYH,EAAU3N,EAAM9d,KAAKC,OACzCxI,EAAQ,CACVoC,IAAK9H,OAAO+E,kBACZgD,IAAK/H,OAAO85B,oBAERhyB,IAAKiyB,EAAWhyB,IAAKiyB,GA9VrC,SAAuBroB,GACnB,MAAM,IAAE7J,EAAI,IAAEC,EAAI,WAAEkyB,EAAW,WAAEC,GAAgBvoB,EAAMwoB,gBACvD,MAAO,CACHryB,IAAKmyB,EAAanyB,EAAM9H,OAAO85B,kBAC/B/xB,IAAKmyB,EAAanyB,EAAM/H,OAAO+E,kBAEvC,CAwVmDo1B,CAAcR,GACzD,IAAI94B,EAAGwyB,EACP,SAAS+G,IACL/G,EAASgB,EAAQxzB,GACjB,MAAMyxB,EAAae,EAAOsG,EAAWjG,MACrC,OAAQ3zB,EAAeszB,EAAO1hB,EAAM+hB,QAAUqG,EAAWzH,GAAc0H,EAAW1H,CACtF,CACA,IAAIzxB,EAAI,EAAGA,EAAIO,IACPg5B,MAGJnsB,KAAKqrB,sBAAsB5zB,EAAOiM,EAAO0hB,EAAQlB,IAC7CsG,MALe53B,GASvB,GAAI43B,EACA,IAAI53B,EAAIO,EAAO,EAAGP,GAAK,IAAKA,EACxB,IAAIu5B,IAAJ,CAGAnsB,KAAKqrB,sBAAsB5zB,EAAOiM,EAAO0hB,EAAQlB,GACjD,KAFA,CAKR,OAAOzsB,CACX,CACA,kBAAA20B,CAAmB1oB,GACf,MAAM0hB,EAASplB,KAAKqlB,YAAYe,QAC1BxmB,EAAS,GACf,IAAIhN,EAAGO,EAAM/B,EACb,IAAIwB,EAAI,EAAGO,EAAOiyB,EAAOryB,OAAQH,EAAIO,IAAQP,EACzCxB,EAAQg0B,EAAOxyB,GAAG8Q,EAAM+hB,MACpB3zB,EAAeV,IACfwO,EAAOlK,KAAKtE,GAGpB,OAAOwO,CACX,CACH,cAAAysB,GACO,OAAO,CACX,CACH,gBAAAC,CAAiB/4B,GACV,MAAMuqB,EAAO9d,KAAKqlB,YACZE,EAASzH,EAAKyH,OACdR,EAASjH,EAAKiH,OACdK,EAASplB,KAAKmrB,UAAU53B,GAC9B,MAAO,CACHg5B,MAAOhH,EAAS,GAAKA,EAAOiH,iBAAiBpH,EAAOG,EAAOE,OAAS,GACpEr0B,MAAO2zB,EAAS,GAAKA,EAAOyH,iBAAiBpH,EAAOL,EAAOU,OAAS,GAE5E,CACH,OAAAxG,CAAQhc,GACD,MAAM6a,EAAO9d,KAAKqlB,YAClBrlB,KAAK+hB,OAAO9e,GAAQ,WACpB6a,EAAKC,MAleb,SAAgB3sB,GACZ,IAAIyK,EAAGssB,EAAG9xB,EAAGo2B,EASb,OARI56B,EAAST,IACTyK,EAAIzK,EAAM4U,IACVmiB,EAAI/2B,EAAM6U,MACV5P,EAAIjF,EAAM8U,OACVumB,EAAIr7B,EAAM+U,MAEVtK,EAAIssB,EAAI9xB,EAAIo2B,EAAIr7B,EAEb,CACH4U,IAAKnK,EACLoK,MAAOkiB,EACPjiB,OAAQ7P,EACR8P,KAAMsmB,EACNzO,UAAoB,IAAV5sB,EAElB,CAidqBs7B,CAAOv6B,EAAe6N,KAAK7L,QAAQqS,KA/exD,SAAqByX,EAAQC,EAAQ0F,GACjC,IAAwB,IAApBA,EACA,OAAO,EAEX,MAAM7uB,EAAI4uB,GAAU1F,EAAQ2F,GACtB3uB,EAAI0uB,GAAUzF,EAAQ0F,GAC5B,MAAO,CACH5d,IAAK/Q,EAAEoE,IACP4M,MAAOlR,EAAEsE,IACT6M,OAAQjR,EAAEmE,MACV+M,KAAMpR,EAAEqE,MAEhB,CAme8DuzB,CAAY7O,EAAKG,OAAQH,EAAKI,OAAQle,KAAKqsB,mBACrG,CACH,MAAAtK,CAAO9e,GAAO,CACX,IAAAsc,GACI,MAAM3c,EAAM5C,KAAKgH,KACX/G,EAAQD,KAAKC,MACb6d,EAAO9d,KAAKqlB,YACZljB,EAAW2b,EAAKvV,MAAQ,GACxB8C,EAAOpL,EAAM0d,UACbnY,EAAS,GACTpM,EAAQ4G,KAAKknB,YAAc,EAC3B9K,EAAQpc,KAAKmnB,YAAchlB,EAASpP,OAASqG,EAC7CyK,EAA0B7D,KAAK7L,QAAQ0P,wBAC7C,IAAIjR,EAIJ,IAHIkrB,EAAKkK,SACLlK,EAAKkK,QAAQzI,KAAK3c,EAAKyI,EAAMjS,EAAOgjB,GAEpCxpB,EAAIwG,EAAOxG,EAAIwG,EAAQgjB,IAASxpB,EAAE,CAClC,MAAMglB,EAAUzV,EAASvP,GACrBglB,EAAQ+T,SAGR/T,EAAQpS,QAAU3B,EAClB2B,EAAO9P,KAAKkiB,GAEZA,EAAQ2H,KAAK3c,EAAKyI,GAE1B,CACA,IAAIzY,EAAI,EAAGA,EAAI4S,EAAOzS,SAAUH,EAC5B4S,EAAO5S,GAAG2sB,KAAK3c,EAAKyI,EAE5B,CACH,QAAAiP,CAAS/mB,EAAOiS,GACT,MAAMvC,EAAOuC,EAAS,SAAW,UACjC,YAAiB7D,IAAVpO,GAAuByM,KAAKqlB,YAAY2C,QAAUhoB,KAAK4sB,6BAA6B3pB,GAAQjD,KAAK6sB,0BAA0Bt5B,GAAS,EAAG0P,EAClJ,CACH,UAAAkG,CAAW5V,EAAOiS,EAAQvC,GACnB,MAAM+kB,EAAUhoB,KAAKioB,aACrB,IAAIjmB,EACJ,GAAIzO,GAAS,GAAKA,EAAQyM,KAAKqlB,YAAY9c,KAAKxV,OAAQ,CACpD,MAAM6kB,EAAU5X,KAAKqlB,YAAY9c,KAAKhV,GACtCyO,EAAU4V,EAAQ0P,WAAa1P,EAAQ0P,SAvYnD,SAA2B1T,EAAQrgB,EAAOqkB,GACtC,OAAO7H,GAAc6D,EAAQ,CACzBpO,QAAQ,EACRsnB,UAAWv5B,EACX6xB,YAAQzjB,EACRorB,SAAKprB,EACLiW,UACArkB,QACA0P,KAAM,UACN1R,KAAM,QAEd,CA4X8Dy7B,CAAkBhtB,KAAKmJ,aAAc5V,EAAOqkB,IAC9F5V,EAAQojB,OAASplB,KAAKmrB,UAAU53B,GAChCyO,EAAQ+qB,IAAM/E,EAAQzf,KAAKhV,GAC3ByO,EAAQzO,MAAQyO,EAAQ8qB,UAAYv5B,CACxC,MACIyO,EAAUhC,KAAKsnB,WAAatnB,KAAKsnB,SAtZ7C,SAA8B1T,EAAQrgB,GAClC,OAAOwc,GAAc6D,EAAQ,CACzBpO,QAAQ,EACRwiB,aAASrmB,EACTrO,aAAcC,EACdA,QACA0P,KAAM,UACN1R,KAAM,WAEd,CA6YwD07B,CAAqBjtB,KAAKC,MAAMkJ,aAAcnJ,KAAKzM,QAC/FyO,EAAQgmB,QAAUA,EAClBhmB,EAAQzO,MAAQyO,EAAQ1O,aAAe0M,KAAKzM,MAIhD,OAFAyO,EAAQwD,SAAWA,EACnBxD,EAAQiB,KAAOA,EACRjB,CACX,CACH,4BAAA4qB,CAA6B3pB,GACtB,OAAOjD,KAAKktB,uBAAuBltB,KAAKwnB,mBAAmBt2B,GAAI+R,EACnE,CACH,yBAAA4pB,CAA0Bt5B,EAAO0P,GAC1B,OAAOjD,KAAKktB,uBAAuBltB,KAAKynB,gBAAgBv2B,GAAI+R,EAAM1P,EACtE,CACH,sBAAA25B,CAAuBC,EAAalqB,EAAO,UAAW1P,GAC/C,MAAMiS,EAAkB,WAATvC,EACTuN,EAAQxQ,KAAK2mB,gBACb1nB,EAAWkuB,EAAc,IAAMlqB,EAC/BsjB,EAAS/V,EAAMvR,GACfmuB,EAAUptB,KAAKonB,qBAAuBnxB,EAAQ1C,GACpD,GAAIgzB,EACA,OAAOD,GAAiBC,EAAQ6G,GAEpC,MAAM3K,EAASziB,KAAKC,MAAMwiB,OACpB0H,EAAY1H,EAAO4K,wBAAwBrtB,KAAK6mB,MAAOsG,GACvDhd,EAAW3K,EAAS,CACtB,GAAG2nB,SACH,QACAA,EACA,IACA,CACAA,EACA,IAEEjd,EAASuS,EAAO4H,gBAAgBrqB,KAAKioB,aAAckC,GACnDmD,EAAQ97B,OAAOsB,KAAK8R,GAASzC,SAASgrB,IAEtCvtB,EAAS6iB,EAAO8K,oBAAoBrd,EAAQod,EADlC,IAAIttB,KAAKmJ,WAAW5V,EAAOiS,EAAQvC,GACekN,GAKlE,OAJIvQ,EAAOujB,UACPvjB,EAAOujB,QAAUiK,EACjB5c,EAAMvR,GAAYzN,OAAOg8B,OAAOlH,GAAiB1mB,EAAQwtB,KAEtDxtB,CACX,CACH,kBAAA6tB,CAAmBl6B,EAAOm6B,EAAYloB,GAC/B,MAAMvF,EAAQD,KAAKC,MACbuQ,EAAQxQ,KAAK2mB,gBACb1nB,EAAW,aAAayuB,IACxBnH,EAAS/V,EAAMvR,GACrB,GAAIsnB,EACA,OAAOA,EAEX,IAAIpyB,EACJ,IAAgC,IAA5B8L,EAAM9L,QAAQuN,UAAqB,CACnC,MAAM+gB,EAASziB,KAAKC,MAAMwiB,OACpB0H,EAAY1H,EAAOkL,0BAA0B3tB,KAAK6mB,MAAO6G,GACzDxd,EAASuS,EAAO4H,gBAAgBrqB,KAAKioB,aAAckC,GACzDh2B,EAAUsuB,EAAO6H,eAAepa,EAAQlQ,KAAKmJ,WAAW5V,EAAOiS,EAAQkoB,GAC3E,CACA,MAAM/nB,EAAa,IAAI6c,GAAWviB,EAAO9L,GAAWA,EAAQwR,YAI5D,OAHIxR,GAAWA,EAAQuc,aACnBF,EAAMvR,GAAYzN,OAAOg8B,OAAO7nB,IAE7BA,CACX,CACH,gBAAAioB,CAAiBz5B,GACV,GAAKA,EAAQgvB,QAGb,OAAOnjB,KAAKinB,iBAAmBjnB,KAAKinB,eAAiBz1B,OAAOkP,OAAO,CAAC,EAAGvM,GAC3E,CACH,cAAA05B,CAAe5qB,EAAM6qB,GACd,OAAQA,GAAiBzH,GAAmBpjB,IAASjD,KAAKC,MAAM8tB,mBACpE,CACH,iBAAAC,CAAkB50B,EAAO6J,GAClB,MAAMgrB,EAAYjuB,KAAK6sB,0BAA0BzzB,EAAO6J,GAClDirB,EAA0BluB,KAAKinB,eAC/B6G,EAAgB9tB,KAAK4tB,iBAAiBK,GACtCJ,EAAiB7tB,KAAK6tB,eAAe5qB,EAAM6qB,IAAkBA,IAAkBI,EAErF,OADAluB,KAAKmuB,oBAAoBL,EAAe7qB,EAAMgrB,GACvC,CACHH,gBACAD,iBAER,CACH,aAAAO,CAAcxW,EAASrkB,EAAOgS,EAAYtC,GAC/BojB,GAAmBpjB,GACnBzR,OAAOkP,OAAOkX,EAASrS,GAEvBvF,KAAKytB,mBAAmBl6B,EAAO0P,GAAM8e,OAAOnK,EAASrS,EAE7D,CACH,mBAAA4oB,CAAoBL,EAAe7qB,EAAMigB,GAC9B4K,IAAkBzH,GAAmBpjB,IACrCjD,KAAKytB,wBAAmB9rB,EAAWsB,GAAM8e,OAAO+L,EAAe5K,EAEvE,CACH,SAAAmL,CAAUzW,EAASrkB,EAAO0P,EAAMuC,GACzBoS,EAAQpS,OAASA,EACjB,MAAMrR,EAAU6L,KAAKsa,SAAS/mB,EAAOiS,GACrCxF,KAAKytB,mBAAmBl6B,EAAO0P,EAAMuC,GAAQuc,OAAOnK,EAAS,CACzDzjB,SAAUqR,GAAUxF,KAAK4tB,iBAAiBz5B,IAAYA,GAE9D,CACA,gBAAAm6B,CAAiB1W,EAAStkB,EAAcC,GACpCyM,KAAKquB,UAAUzW,EAASrkB,EAAO,UAAU,EAC7C,CACA,aAAAg7B,CAAc3W,EAAStkB,EAAcC,GACjCyM,KAAKquB,UAAUzW,EAASrkB,EAAO,UAAU,EAC7C,CACH,wBAAAi7B,GACO,MAAM5W,EAAU5X,KAAKqlB,YAAY2C,QAC7BpQ,GACA5X,KAAKquB,UAAUzW,OAASjW,EAAW,UAAU,EAErD,CACH,qBAAA8sB,GACO,MAAM7W,EAAU5X,KAAKqlB,YAAY2C,QAC7BpQ,GACA5X,KAAKquB,UAAUzW,OAASjW,EAAW,UAAU,EAErD,CACH,eAAAuoB,CAAgBH,GACT,MAAMxhB,EAAOvI,KAAK+mB,MACZ5kB,EAAWnC,KAAKqlB,YAAY9c,KAClC,IAAK,MAAOga,EAAQmM,EAAMC,KAAS3uB,KAAKunB,UACpCvnB,KAAKuiB,GAAQmM,EAAMC,GAEvB3uB,KAAKunB,UAAY,GACjB,MAAMqH,EAAUzsB,EAASpP,OACnB87B,EAAUtmB,EAAKxV,OACfqpB,EAAQ1lB,KAAKmD,IAAIg1B,EAASD,GAC5BxS,GACApc,KAAKuqB,MAAM,EAAGnO,GAEdyS,EAAUD,EACV5uB,KAAK8uB,gBAAgBF,EAASC,EAAUD,EAAS7E,GAC1C8E,EAAUD,GACjB5uB,KAAK+uB,gBAAgBF,EAASD,EAAUC,EAEhD,CACH,eAAAC,CAAgB11B,EAAOgjB,EAAO2N,GAAmB,GAC1C,MAAMjM,EAAO9d,KAAKqlB,YACZ9c,EAAOuV,EAAKvV,KACZlP,EAAMD,EAAQgjB,EACpB,IAAIxpB,EACJ,MAAMo8B,EAAQ/b,IAEV,IADAA,EAAIlgB,QAAUqpB,EACVxpB,EAAIqgB,EAAIlgB,OAAS,EAAGH,GAAKyG,EAAKzG,IAC9BqgB,EAAIrgB,GAAKqgB,EAAIrgB,EAAIwpB,IAIzB,IADA4S,EAAKzmB,GACD3V,EAAIwG,EAAOxG,EAAIyG,IAAOzG,EACtB2V,EAAK3V,GAAK,IAAIoN,KAAKynB,gBAEnBznB,KAAK8mB,UACLkI,EAAKlR,EAAKsI,SAEdpmB,KAAKuqB,MAAMnxB,EAAOgjB,GACd2N,GACA/pB,KAAKivB,eAAe1mB,EAAMnP,EAAOgjB,EAAO,QAEhD,CACA,cAAA6S,CAAerX,EAASxe,EAAOgjB,EAAOnZ,GAAO,CAChD,eAAA8rB,CAAgB31B,EAAOgjB,GAChB,MAAM0B,EAAO9d,KAAKqlB,YAClB,GAAIrlB,KAAK8mB,SAAU,CACf,MAAMoI,EAAUpR,EAAKsI,QAAQnrB,OAAO7B,EAAOgjB,GACvC0B,EAAK8J,UACLzB,GAAYrI,EAAMoR,EAE1B,CACApR,EAAKvV,KAAKtN,OAAO7B,EAAOgjB,EAC5B,CACH,KAAA+S,CAAM78B,GACC,GAAI0N,KAAK8mB,SACL9mB,KAAKunB,UAAU7xB,KAAKpD,OACjB,CACH,MAAOiwB,EAAQmM,EAAMC,GAAQr8B,EAC7B0N,KAAKuiB,GAAQmM,EAAMC,EACvB,CACA3uB,KAAKC,MAAMmvB,aAAa15B,KAAK,CACzBsK,KAAKzM,SACFjB,GAEX,CACA,WAAA+8B,GACI,MAAMjT,EAAQkT,UAAUv8B,OACxBiN,KAAKmvB,MAAM,CACP,kBACAnvB,KAAKioB,aAAa1f,KAAKxV,OAASqpB,EAChCA,GAER,CACA,UAAAmT,GACIvvB,KAAKmvB,MAAM,CACP,kBACAnvB,KAAKqlB,YAAY9c,KAAKxV,OAAS,EAC/B,GAER,CACA,YAAAy8B,GACIxvB,KAAKmvB,MAAM,CACP,kBACA,EACA,GAER,CACA,aAAAM,CAAcr2B,EAAOgjB,GACbA,GACApc,KAAKmvB,MAAM,CACP,kBACA/1B,EACAgjB,IAGR,MAAMsT,EAAWJ,UAAUv8B,OAAS,EAChC28B,GACA1vB,KAAKmvB,MAAM,CACP,kBACA/1B,EACAs2B,GAGZ,CACA,cAAAC,GACI3vB,KAAKmvB,MAAM,CACP,kBACA,EACAG,UAAUv8B,QAElB,EAm5BJ,MAAM68B,WAAuBnJ,GACzBC,UAAY,OACfA,gBAAkB,CACXc,mBAAoB,OACpBC,gBAAiB,QACjB7jB,UAAU,EACV4R,UAAU,GAEjBkR,iBAAmB,CACZ/iB,OAAQ,CACJksB,QAAS,CACLt+B,KAAM,YAEVu+B,QAAS,CACLv+B,KAAM,YAIlB,UAAAm2B,GACI1nB,KAAKonB,qBAAsB,EAC3BpnB,KAAKqnB,oBAAqB,EAC1B0I,MAAMrI,YACV,CACA,MAAA3F,CAAO9e,GACH,MAAM6a,EAAO9d,KAAKqlB,aACV2C,QAAS5b,EAAO7D,KAAM+L,EAAS,GAAG,SAAE0b,GAAclS,EACpDmS,EAAqBjwB,KAAKC,MAAM8tB,oBACtC,IAAI,MAAE30B,EAAM,MAAEgjB,GD38ClB,SAA0C0B,EAAMxJ,EAAQ2b,GACxD,MAAMC,EAAa5b,EAAOvhB,OAC1B,IAAIqG,EAAQ,EACRgjB,EAAQ8T,EACZ,GAAIpS,EAAK2M,QAAS,CACd,MAAM,OAAElF,EAAO,OAAER,EAAO,QAAEqB,GAAatI,EACjCtI,EAAWsI,EAAKkK,SAAUlK,EAAKkK,QAAQ7zB,QAAU2pB,EAAKkK,QAAQ7zB,QAAQqhB,SAAkB,KACxFiQ,EAAOF,EAAOE,MACd,IAAE5rB,EAAI,IAAEC,EAAI,WAAEkyB,EAAW,WAAEC,GAAgB1G,EAAO2G,gBACxD,GAAIF,EAAY,CAIZ,GAHA5yB,EAAQ1C,KAAKmD,IACbS,EAAa8rB,EAASX,EAAM5rB,GAAKQ,GACjC41B,EAAqBC,EAAa51B,EAAaga,EAAQmR,EAAMF,EAAO4K,iBAAiBt2B,IAAMQ,IACvFmb,EAAU,CACV,MAAM4a,EAAsBhK,EAAQx0B,MAAM,EAAGwH,EAAQ,GAAGzG,UAAU09B,UAAWjlB,IAASja,EAAcia,EAAM2Z,EAAOU,QACjHrsB,GAAS1C,KAAKoD,IAAI,EAAGs2B,EACzB,CACAh3B,EAAQQ,EAAYR,EAAO,EAAG82B,EAAa,EAC/C,CACA,GAAIjE,EAAY,CACZ,IAAI5yB,EAAM3C,KAAKoD,IACfQ,EAAa8rB,EAASb,EAAOE,KAAM3rB,GAAK,GAAMM,GAAK,EACnD61B,EAAqB,EAAI31B,EAAaga,EAAQmR,EAAMF,EAAO4K,iBAAiBr2B,IAAM,GAAMM,GAAK,GAC7F,GAAIob,EAAU,CACV,MAAM8a,EAAsBlK,EAAQx0B,MAAMyH,EAAM,GAAGg3B,UAAWjlB,IAASja,EAAcia,EAAM2Z,EAAOU,QAClGpsB,GAAO3C,KAAKoD,IAAI,EAAGw2B,EACvB,CACAlU,EAAQxiB,EAAYP,EAAKD,EAAO82B,GAAc92B,CAClD,MACIgjB,EAAQ8T,EAAa92B,CAE7B,CACA,MAAO,CACHA,QACAgjB,QAER,CCu6CiCmU,CAAiCzS,EAAMxJ,EAAQ2b,GACxEjwB,KAAKknB,WAAa9tB,EAClB4G,KAAKmnB,WAAa/K,EDn6CtB,SAA6B0B,GAC7B,MAAM,OAAEG,EAAO,OAAEC,EAAO,aAAEsS,GAAkB1S,EACtC2S,EAAY,CACdC,KAAMzS,EAAOpkB,IACb82B,KAAM1S,EAAOnkB,IACb82B,KAAM1S,EAAOrkB,IACbg3B,KAAM3S,EAAOpkB,KAEjB,IAAK02B,EAED,OADA1S,EAAK0S,aAAeC,GACb,EAEX,MAAMK,EAAUN,EAAaE,OAASzS,EAAOpkB,KAAO22B,EAAaG,OAAS1S,EAAOnkB,KAAO02B,EAAaI,OAAS1S,EAAOrkB,KAAO22B,EAAaK,OAAS3S,EAAOpkB,IAEzJ,OADAtI,OAAOkP,OAAO8vB,EAAcC,GACrBK,CACX,CCq5CYC,CAAoBjT,KACpB1kB,EAAQ,EACRgjB,EAAQ9H,EAAOvhB,QAEnBqZ,EAAKsW,OAAS1iB,KAAKC,MACnBmM,EAAK4kB,cAAgBhxB,KAAKzM,MAC1B6Y,EAAK6kB,aAAejB,EAASiB,WAC7B7kB,EAAKkI,OAASA,EACd,MAAMngB,EAAU6L,KAAK4sB,6BAA6B3pB,GAC7CjD,KAAK7L,QAAQyP,WACdzP,EAAQ8W,YAAc,GAE1B9W,EAAQmoB,QAAUtc,KAAK7L,QAAQmoB,QAC/Btc,KAAKouB,cAAchiB,OAAMzK,EAAW,CAChCuvB,UAAWjB,EACX97B,WACD8O,GACHjD,KAAKivB,eAAe3a,EAAQlb,EAAOgjB,EAAOnZ,EAC9C,CACA,cAAAgsB,CAAe3a,EAAQlb,EAAOgjB,EAAOnZ,GACjC,MAAMkmB,EAAiB,UAATlmB,GACR,OAAEsiB,EAAO,OAAER,EAAO,SAAE6C,EAAS,SAAEoI,GAAchwB,KAAKqlB,aAClD,cAAEyI,EAAc,eAAED,GAAoB7tB,KAAKguB,kBAAkB50B,EAAO6J,GACpEuiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,MACf,SAAEjQ,EAAS,QAAE8G,GAAatc,KAAK7L,QAC/Bg9B,EAAen5B,EAASwd,GAAYA,EAAWzjB,OAAO+E,kBACtDs6B,EAAepxB,KAAKC,MAAM8tB,qBAAuB5E,GAAkB,SAATlmB,EAC1D5J,EAAMD,EAAQgjB,EACdiV,EAAc/c,EAAOvhB,OAC3B,IAAIu+B,EAAal4B,EAAQ,GAAK4G,KAAKmrB,UAAU/xB,EAAQ,GACrD,IAAI,IAAIxG,EAAI,EAAGA,EAAIy+B,IAAez+B,EAAE,CAChC,MAAMwY,EAAQkJ,EAAO1hB,GACf2S,EAAa6rB,EAAehmB,EAAQ,CAAC,EAC3C,GAAIxY,EAAIwG,GAASxG,GAAKyG,EAAK,CACvBkM,EAAWgP,MAAO,EAClB,QACJ,CACA,MAAM6Q,EAASplB,KAAKmrB,UAAUv4B,GACxB2+B,EAAWpgC,EAAci0B,EAAOM,IAChCnP,EAAShR,EAAWigB,GAASD,EAAO4K,iBAAiB/K,EAAOI,GAAQ5yB,GACpE4jB,EAASjR,EAAWmgB,GAASyD,GAASoI,EAAWxM,EAAOyM,eAAiBzM,EAAOoL,iBAAiBvI,EAAW5nB,KAAKikB,WAAWc,EAAQK,EAAQwC,GAAYxC,EAAOM,GAAQ9yB,GAC7K2S,EAAWgP,KAAOlc,MAAMke,IAAWle,MAAMme,IAAW+a,EACpDhsB,EAAW+a,KAAO1tB,EAAI,GAAK8D,KAAKa,IAAI6tB,EAAOI,GAAS8L,EAAW9L,IAAU2L,EACrE7U,IACA/W,EAAW6f,OAASA,EACpB7f,EAAWwnB,IAAMiD,EAASznB,KAAK3V,IAE/Bi7B,IACAtoB,EAAWpR,QAAU25B,GAAiB9tB,KAAK6sB,0BAA0Bj6B,EAAGwY,EAAM5F,OAAS,SAAWvC,IAEjGmuB,GACDpxB,KAAKouB,cAAchjB,EAAOxY,EAAG2S,EAAYtC,GAE7CquB,EAAalM,CACjB,CACJ,CACH,cAAAiH,GACO,MAAMvO,EAAO9d,KAAKqlB,YACZ2C,EAAUlK,EAAKkK,QACf9gB,EAAS8gB,EAAQ7zB,SAAW6zB,EAAQ7zB,QAAQ8W,aAAe,EAC3D1C,EAAOuV,EAAKvV,MAAQ,GAC1B,IAAKA,EAAKxV,OACN,OAAOmU,EAEX,MAAMwN,EAAanM,EAAK,GAAGjS,KAAK0J,KAAK6sB,0BAA0B,IACzD4E,EAAYlpB,EAAKA,EAAKxV,OAAS,GAAGuD,KAAK0J,KAAK6sB,0BAA0BtkB,EAAKxV,OAAS,IAC1F,OAAO2D,KAAKoD,IAAIoN,EAAQwN,EAAY+c,GAAa,CACrD,CACA,IAAAlS,GACI,MAAMzB,EAAO9d,KAAKqlB,YAClBvH,EAAKkK,QAAQ0J,oBAAoB1xB,KAAKC,MAAM0d,UAAWG,EAAKyH,OAAOE,MACnEsK,MAAMxQ,MACV,EAkdJ,SAASoS,GAAaC,EAASnM,EAAMr0B,EAAO8R,GACxC,MAAM,WAAEiiB,EAAW,KAAE5c,EAAK,QAAEkiB,GAAamH,EACnCrM,EAASJ,EAAWE,YAAYE,OAChC/P,EAAWoc,EAAQ5J,SAAU4J,EAAQ5J,QAAQ7zB,QAAUy9B,EAAQ5J,QAAQ7zB,QAAQqhB,SAAkB,KACvG,GAAI+P,GAAUE,IAASF,EAAOE,MAAiB,MAATA,GAAgBgF,GAAWliB,EAAKxV,OAAQ,CAC1E,MAAM8+B,EAAetM,EAAOuM,eAAiBr3B,EAAgBH,EAC7D,IAAK4I,EAAW,CACZ,MAAMiV,EAAS0Z,EAAatpB,EAAMkd,EAAMr0B,GACxC,GAAIokB,EAAU,CACV,MAAM,OAAEuP,GAAYI,EAAWE,aACzB,QAAEe,GAAawL,EACfxB,EAAsBhK,EAAQx0B,MAAM,EAAGumB,EAAO9d,GAAK,GAAG1H,UAAU09B,UAAWjlB,IAASja,EAAcia,EAAM2Z,EAAOU,QACrHtN,EAAO9d,IAAM3D,KAAKoD,IAAI,EAAGs2B,GACzB,MAAME,EAAsBlK,EAAQx0B,MAAMumB,EAAO/d,IAAIi2B,UAAWjlB,IAASja,EAAcia,EAAM2Z,EAAOU,QACpGtN,EAAO/d,IAAM1D,KAAKoD,IAAI,EAAGw2B,EAC7B,CACA,OAAOnY,CACX,CAAO,GAAIgN,EAAW8B,eAAgB,CAClC,MAAM7M,EAAK7R,EAAK,GACV9Q,EAA+B,mBAAhB2iB,EAAG2X,UAA2B3X,EAAG2X,SAAStM,GAC/D,GAAIhuB,EAAO,CACP,MAAM2B,EAAQy4B,EAAatpB,EAAMkd,EAAMr0B,EAAQqG,GACzC4B,EAAMw4B,EAAatpB,EAAMkd,EAAMr0B,EAAQqG,GAC7C,MAAO,CACH4C,GAAIjB,EAAMiB,GACVD,GAAIf,EAAIe,GAEhB,CACJ,CACJ,CACA,MAAO,CACHC,GAAI,EACJD,GAAImO,EAAKxV,OAAS,EAE1B,CACC,SAASi/B,GAAyB/xB,EAAOwlB,EAAMwM,EAAUC,EAAShvB,GAC/D,MAAM6gB,EAAW9jB,EAAMkyB,+BACjB/gC,EAAQ6gC,EAASxM,GACvB,IAAI,IAAI7yB,EAAI,EAAGO,EAAO4wB,EAAShxB,OAAQH,EAAIO,IAAQP,EAAE,CACjD,MAAM,MAAEW,EAAM,KAAEgV,GAAUwb,EAASnxB,IAC7B,GAAEyH,EAAG,GAAED,GAAQu3B,GAAa5N,EAASnxB,GAAI6yB,EAAMr0B,EAAO8R,GAC5D,IAAI,IAAIkvB,EAAI/3B,EAAI+3B,GAAKh4B,IAAMg4B,EAAE,CACzB,MAAMxa,EAAUrP,EAAK6pB,GAChBxa,EAAQrD,MACT2d,EAAQta,EAASrkB,EAAO6+B,EAEhC,CACJ,CACJ,CAUC,SAASC,GAAkBpyB,EAAOgyB,EAAUxM,EAAM6M,EAAkBnvB,GACjE,MAAMmc,EAAQ,GACd,OAAKnc,GAAqBlD,EAAMsyB,cAAcN,IAe9CD,GAAyB/xB,EAAOwlB,EAAMwM,EAZf,SAASra,EAAStkB,EAAcC,IAC9C4P,GAAqBgI,GAAeyM,EAAS3X,EAAM0d,UAAW,KAG/D/F,EAAQ4a,QAAQP,EAASl9B,EAAGk9B,EAASh9B,EAAGq9B,IACxChT,EAAM5pB,KAAK,CACPkiB,UACAtkB,eACAC,SAGZ,GACgE,GACzD+rB,GAfIA,CAgBf,CA0DC,SAASmT,GAAgBxyB,EAAOgyB,EAAUxM,EAAMviB,EAAWovB,EAAkBnvB,GAC1E,OAAKA,GAAqBlD,EAAMsyB,cAAcN,GAG9B,MAATxM,GAAiBviB,EAvC3B,SAAkCjD,EAAOgyB,EAAUxM,EAAMviB,EAAWovB,EAAkBnvB,GACnF,IAAImc,EAAQ,GACZ,MAAMoT,EArDT,SAAkCjN,GAC/B,MAAMkN,GAA8B,IAAvBlN,EAAKxxB,QAAQ,KACpB2+B,GAA8B,IAAvBnN,EAAKxxB,QAAQ,KAC1B,OAAO,SAAS4E,EAAKC,GACjB,MAAM+5B,EAASF,EAAOj8B,KAAKa,IAAIsB,EAAI9D,EAAI+D,EAAI/D,GAAK,EAC1C+9B,EAASF,EAAOl8B,KAAKa,IAAIsB,EAAI5D,EAAI6D,EAAI7D,GAAK,EAChD,OAAOyB,KAAKqC,KAAKrC,KAAKmB,IAAIg7B,EAAQ,GAAKn8B,KAAKmB,IAAIi7B,EAAQ,GAC5D,CACJ,CA6C2BC,CAAyBtN,GAChD,IAAIuN,EAAcjhC,OAAO+E,kBA8BzB,OADAk7B,GAAyB/xB,EAAOwlB,EAAMwM,EA5BtC,SAAwBra,EAAStkB,EAAcC,GAC3C,MAAMi/B,EAAU5a,EAAQ4a,QAAQP,EAASl9B,EAAGk9B,EAASh9B,EAAGq9B,GACxD,GAAIpvB,IAAcsvB,EACd,OAEJ,MAAMS,EAASrb,EAAQsb,eAAeZ,GAEtC,IADsBnvB,IAAoBlD,EAAMsyB,cAAcU,KACzCT,EACjB,OAEJ,MAAMW,EAAWT,EAAeT,EAAUgB,GACtCE,EAAWH,GACX1T,EAAQ,CACJ,CACI1H,UACAtkB,eACAC,UAGRy/B,EAAcG,GACPA,IAAaH,GACpB1T,EAAM5pB,KAAK,CACPkiB,UACAtkB,eACAC,SAGZ,GAEO+rB,CACX,CAKyG8T,CAAyBnzB,EAAOgyB,EAAUxM,EAAMviB,EAAWovB,EAAkBnvB,GA7DrL,SAA+BlD,EAAOgyB,EAAUxM,EAAM6M,GACnD,IAAIhT,EAAQ,GAmBZ,OADA0S,GAAyB/xB,EAAOwlB,EAAMwM,EAjBtC,SAAwBra,EAAStkB,EAAcC,GAC3C,MAAM,WAAE8/B,EAAW,SAAEC,GAAc1b,EAAQ2b,SAAS,CAChD,aACA,YACDjB,IACG,MAAEn5B,GDtzEhB,SAA2Bq6B,EAAaC,GACpC,MAAMC,EAAsBD,EAAW1+B,EAAIy+B,EAAYz+B,EACjD4+B,EAAsBF,EAAWx+B,EAAIu+B,EAAYv+B,EACjD2+B,EAA2Bl9B,KAAKqC,KAAK26B,EAAsBA,EAAsBC,EAAsBA,GAC7G,IAAIx6B,EAAQzC,KAAKm9B,MAAMF,EAAqBD,GAI5C,OAHIv6B,GAAS,GAAM1C,IACf0C,GAASxC,GAEN,CACHwC,QACAg6B,SAAUS,EAElB,CC0yE2BE,CAAkBlc,EAAS,CAC1C7iB,EAAGk9B,EAASl9B,EACZE,EAAGg9B,EAASh9B,IAEZiE,EAAcC,EAAOk6B,EAAYC,IACjChU,EAAM5pB,KAAK,CACPkiB,UACAtkB,eACAC,SAGZ,GAEO+rB,CACX,CAwCwCyU,CAAsB9zB,EAAOgyB,EAAUxM,EAAM6M,GAFtE,EAGf,CACC,SAAS0B,GAAa/zB,EAAOgyB,EAAUxM,EAAMviB,EAAWovB,GACrD,MAAMhT,EAAQ,GACR2U,EAAuB,MAATxO,EAAe,WAAa,WAChD,IAAIyO,GAAiB,EAWrB,OAVAlC,GAAyB/xB,EAAOwlB,EAAMwM,EAAU,CAACra,EAAStkB,EAAcC,KAChEqkB,EAAQqc,IAAgBrc,EAAQqc,GAAahC,EAASxM,GAAO6M,KAC7DhT,EAAM5pB,KAAK,CACPkiB,UACAtkB,eACAC,UAEJ2gC,EAAiBA,GAAkBtc,EAAQ4a,QAAQP,EAASl9B,EAAGk9B,EAASh9B,EAAGq9B,MAG/EpvB,IAAcgxB,EACP,GAEJ5U,CACX,CACC,IAAI6U,GAAc,CACfnC,4BACAoC,MAAO,CACV,KAAA7gC,CAAO0M,EAAOvH,EAAGvE,EAASm+B,GACf,MAAML,EAAW5Z,GAAoB3f,EAAGuH,GAClCwlB,EAAOtxB,EAAQsxB,MAAQ,IACvBtiB,EAAmBhP,EAAQgP,mBAAoB,EAC/Cmc,EAAQnrB,EAAQ+O,UAAYmvB,GAAkBpyB,EAAOgyB,EAAUxM,EAAM6M,EAAkBnvB,GAAoBsvB,GAAgBxyB,EAAOgyB,EAAUxM,GAAM,EAAO6M,EAAkBnvB,GAC3KhB,EAAW,GACjB,OAAKmd,EAAMvsB,QAGXkN,EAAMkyB,+BAA+Bj3B,QAAS4iB,IAC1C,MAAMvqB,EAAQ+rB,EAAM,GAAG/rB,MACjBqkB,EAAUkG,EAAKvV,KAAKhV,GACtBqkB,IAAYA,EAAQrD,MACpBpS,EAASzM,KAAK,CACVkiB,UACAtkB,aAAcwqB,EAAKvqB,MACnBA,YAIL4O,GAbI,EAcf,EACP,OAAA6lB,CAAS/nB,EAAOvH,EAAGvE,EAASm+B,GACjB,MAAML,EAAW5Z,GAAoB3f,EAAGuH,GAClCwlB,EAAOtxB,EAAQsxB,MAAQ,KACvBtiB,EAAmBhP,EAAQgP,mBAAoB,EACrD,IAAImc,EAAQnrB,EAAQ+O,UAAYmvB,GAAkBpyB,EAAOgyB,EAAUxM,EAAM6M,EAAkBnvB,GAAoBsvB,GAAgBxyB,EAAOgyB,EAAUxM,GAAM,EAAO6M,EAAkBnvB,GAC/K,GAAImc,EAAMvsB,OAAS,EAAG,CAClB,MAAMO,EAAegsB,EAAM,GAAGhsB,aACxBiV,EAAOtI,EAAM+oB,eAAe11B,GAAciV,KAChD+W,EAAQ,GACR,IAAI,IAAI1sB,EAAI,EAAGA,EAAI2V,EAAKxV,SAAUH,EAC9B0sB,EAAM5pB,KAAK,CACPkiB,QAASrP,EAAK3V,GACdU,eACAC,MAAOX,GAGnB,CACA,OAAO0sB,CACX,EACPlU,MAAM,CAACnL,EAAOvH,EAAGvE,EAASm+B,IAIRD,GAAkBpyB,EAHRoY,GAAoB3f,EAAGuH,GAC3B9L,EAAQsxB,MAAQ,KAEmB6M,EADvBn+B,EAAQgP,mBAAoB,GAGhE,OAAAkxB,CAASp0B,EAAOvH,EAAGvE,EAASm+B,GACjB,MAAML,EAAW5Z,GAAoB3f,EAAGuH,GAClCwlB,EAAOtxB,EAAQsxB,MAAQ,KACvBtiB,EAAmBhP,EAAQgP,mBAAoB,EACrD,OAAOsvB,GAAgBxyB,EAAOgyB,EAAUxM,EAAMtxB,EAAQ+O,UAAWovB,EAAkBnvB,EACvF,EACPpO,EAAE,CAACkL,EAAOvH,EAAGvE,EAASm+B,IAEJ0B,GAAa/zB,EADHoY,GAAoB3f,EAAGuH,GACH,IAAK9L,EAAQ+O,UAAWovB,GAExEr9B,EAAE,CAACgL,EAAOvH,EAAGvE,EAASm+B,IAEJ0B,GAAa/zB,EADHoY,GAAoB3f,EAAGuH,GACH,IAAK9L,EAAQ+O,UAAWovB,KAKzE,MAAMgC,GAAmB,CACrB,OACA,MACA,QACA,UAEJ,SAASC,GAAiB35B,EAAOq3B,GAC7B,OAAOr3B,EAAMsY,OAAQpe,GAAIA,EAAEsjB,MAAQ6Z,EACvC,CACA,SAASuC,GAA4B55B,EAAO6qB,GACxC,OAAO7qB,EAAMsY,OAAQpe,IAAyC,IAArCw/B,GAAiBrgC,QAAQa,EAAEsjB,MAAetjB,EAAE6jB,IAAI8M,OAASA,EACtF,CACA,SAASgP,GAAa75B,EAAOjI,GACzB,OAAOiI,EAAM85B,KAAK,CAACt+B,EAAGC,KAClB,MAAMjD,EAAKT,EAAU0D,EAAID,EACnB/C,EAAKV,EAAUyD,EAAIC,EACzB,OAAOjD,EAAGqP,SAAWpP,EAAGoP,OAASrP,EAAGG,MAAQF,EAAGE,MAAQH,EAAGqP,OAASpP,EAAGoP,QAE9E,CA0EA,SAASkyB,GAAeC,EAAYjX,EAAWvnB,EAAGC,GAC9C,OAAOK,KAAKoD,IAAI86B,EAAWx+B,GAAIunB,EAAUvnB,IAAMM,KAAKoD,IAAI86B,EAAWv+B,GAAIsnB,EAAUtnB,GACrF,CACA,SAASw+B,GAAiBD,EAAYE,GAClCF,EAAW5uB,IAAMtP,KAAKoD,IAAI86B,EAAW5uB,IAAK8uB,EAAW9uB,KACrD4uB,EAAWzuB,KAAOzP,KAAKoD,IAAI86B,EAAWzuB,KAAM2uB,EAAW3uB,MACvDyuB,EAAW1uB,OAASxP,KAAKoD,IAAI86B,EAAW1uB,OAAQ4uB,EAAW5uB,QAC3D0uB,EAAW3uB,MAAQvP,KAAKoD,IAAI86B,EAAW3uB,MAAO6uB,EAAW7uB,MAC7D,CACA,SAAS8uB,GAAWpX,EAAWqX,EAAQC,EAAQvQ,GAC3C,MAAM,IAAEtM,EAAI,IAAEO,GAASsc,EACjBL,EAAajX,EAAUiX,WAC7B,IAAK/iC,EAASumB,GAAM,CACZ6c,EAAO3+B,OACPqnB,EAAUvF,IAAQ6c,EAAO3+B,MAE7B,MAAM4tB,EAAQQ,EAAOuQ,EAAO/Q,QAAU,CAClC5tB,KAAM,EACN8lB,MAAO,GAEX8H,EAAM5tB,KAAOI,KAAKoD,IAAIoqB,EAAM5tB,KAAM2+B,EAAOC,WAAavc,EAAIpP,OAASoP,EAAItR,OACvE4tB,EAAO3+B,KAAO4tB,EAAM5tB,KAAO4tB,EAAM9H,MACjCuB,EAAUvF,IAAQ6c,EAAO3+B,IAC7B,CACIqiB,EAAIwc,YACJN,GAAiBD,EAAYjc,EAAIwc,cAErC,MAAMC,EAAW1+B,KAAKoD,IAAI,EAAGk7B,EAAOK,WAAaV,GAAeC,EAAYjX,EAAW,OAAQ,UACzF2X,EAAY5+B,KAAKoD,IAAI,EAAGk7B,EAAOO,YAAcZ,GAAeC,EAAYjX,EAAW,MAAO,WAC1F6X,EAAeJ,IAAazX,EAAUhU,EACtC8rB,EAAgBH,IAAc3X,EAAU1P,EAG9C,OAFA0P,EAAUhU,EAAIyrB,EACdzX,EAAU1P,EAAIqnB,EACPL,EAAOC,WAAa,CACvBQ,KAAMF,EACNG,MAAOF,GACP,CACAC,KAAMD,EACNE,MAAOH,EAEf,CAaA,SAASI,GAAWV,EAAYvX,GAC5B,MAAMiX,EAAajX,EAAUiX,WAa7B,OAZA,SAA4B7c,GACxB,MAAMzM,EAAS,CACXnF,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GAKZ,OAHA6R,EAAU7c,QAASkd,IACf9M,EAAO8M,GAAO1hB,KAAKoD,IAAI6jB,EAAUvF,GAAMwc,EAAWxc,MAE/C9M,CACX,CACoBuqB,CAAbX,EAAgC,CACnC,OACA,SACoB,CACpB,MACA,UAER,CACA,SAASY,GAASC,EAAOpY,EAAWqX,EAAQtQ,GACxC,MAAMsR,EAAa,GACnB,IAAIpjC,EAAGO,EAAM8hC,EAAQtc,EAAKsd,EAAOnF,EACjC,IAAIl+B,EAAI,EAAGO,EAAO4iC,EAAMhjC,OAAQkjC,EAAQ,EAAGrjC,EAAIO,IAAQP,EAAE,CACrDqiC,EAASc,EAAMnjC,GACf+lB,EAAMsc,EAAOtc,IACbA,EAAIoJ,OAAOkT,EAAO5tB,OAASsW,EAAUhU,EAAGsrB,EAAO1rB,QAAUoU,EAAU1P,EAAG2nB,GAAWX,EAAOC,WAAYvX,IACpG,MAAM,KAAE+X,EAAK,MAAEC,GAAWZ,GAAWpX,EAAWqX,EAAQC,EAAQvQ,GAChEuR,GAASP,GAAQM,EAAWjjC,OAC5B+9B,EAAUA,GAAW6E,EAChBhd,EAAIud,UACLF,EAAWtgC,KAAKu/B,EAExB,CACA,OAAOgB,GAASH,GAASE,EAAYrY,EAAWqX,EAAQtQ,IAAWoM,CACvE,CACA,SAASqF,GAAWxd,EAAKxS,EAAMH,EAAKqB,EAAOkC,GACvCoP,EAAI3S,IAAMA,EACV2S,EAAIxS,KAAOA,EACXwS,EAAI1S,MAAQE,EAAOkB,EACnBsR,EAAIzS,OAASF,EAAMuD,EACnBoP,EAAItR,MAAQA,EACZsR,EAAIpP,OAASA,CACjB,CACA,SAAS6sB,GAAWL,EAAOpY,EAAWqX,EAAQtQ,GAC1C,MAAM2R,EAAcrB,EAAOjvB,QAC3B,IAAI,EAAEhR,EAAE,EAAEE,GAAO0oB,EACjB,IAAK,MAAMsX,KAAUc,EAAM,CACvB,MAAMpd,EAAMsc,EAAOtc,IACbuL,EAAQQ,EAAOuQ,EAAO/Q,QAAU,CAClC9H,MAAO,EACPka,OAAQ,EACR7zB,OAAQ,GAENA,EAASwyB,EAAOsB,YAAcrS,EAAMzhB,QAAU,EACpD,GAAIwyB,EAAOC,WAAY,CACnB,MAAM7tB,EAAQsW,EAAUhU,EAAIlH,EACtB8G,EAAS2a,EAAM5tB,MAAQqiB,EAAIpP,OAC7BtT,EAAQiuB,EAAM9qB,SACdnE,EAAIivB,EAAM9qB,OAEVuf,EAAIud,SACJC,GAAWxd,EAAK0d,EAAYlwB,KAAMlR,EAAG+/B,EAAOK,WAAagB,EAAYpwB,MAAQowB,EAAYlwB,KAAMoD,GAE/F4sB,GAAWxd,EAAKgF,EAAUxX,KAAO+d,EAAMoS,OAAQrhC,EAAGoS,EAAOkC,GAE7D2a,EAAM9qB,MAAQnE,EACdivB,EAAMoS,QAAUjvB,EAChBpS,EAAI0jB,EAAIzS,MACZ,KAAO,CACH,MAAMqD,EAASoU,EAAU1P,EAAIxL,EACvB4E,EAAQ6c,EAAM5tB,MAAQqiB,EAAItR,MAC5BpR,EAAQiuB,EAAM9qB,SACdrE,EAAImvB,EAAM9qB,OAEVuf,EAAIud,SACJC,GAAWxd,EAAK5jB,EAAGshC,EAAYrwB,IAAKqB,EAAO2tB,EAAOO,YAAcc,EAAYnwB,OAASmwB,EAAYrwB,KAEjGmwB,GAAWxd,EAAK5jB,EAAG4oB,EAAU3X,IAAMke,EAAMoS,OAAQjvB,EAAOkC,GAE5D2a,EAAM9qB,MAAQrE,EACdmvB,EAAMoS,QAAU/sB,EAChBxU,EAAI4jB,EAAI1S,KACZ,CACJ,CACA0X,EAAU5oB,EAAIA,EACd4oB,EAAU1oB,EAAIA,CAClB,CACA,IAAIuhC,GAAU,CACb,MAAAC,CAAQx2B,EAAO1J,GACH0J,EAAM81B,QACP91B,EAAM81B,MAAQ,IAElBx/B,EAAK2/B,SAAW3/B,EAAK2/B,WAAY,EACjC3/B,EAAK07B,SAAW17B,EAAK07B,UAAY,MACjC17B,EAAKkM,OAASlM,EAAKkM,QAAU,EAC7BlM,EAAKmgC,QAAUngC,EAAKmgC,SAAW,WAC3B,MAAO,CACH,CACIC,EAAG,EACH,IAAApX,CAAM5B,GACFpnB,EAAKgpB,KAAK5B,EACd,GAGZ,EACA1d,EAAM81B,MAAMrgC,KAAKa,EACrB,EACH,SAAAqgC,CAAW32B,EAAO42B,GACX,MAAMtjC,EAAQ0M,EAAM81B,MAAQ91B,EAAM81B,MAAM9hC,QAAQ4iC,IAAe,GAChD,IAAXtjC,GACA0M,EAAM81B,MAAM96B,OAAO1H,EAAO,EAElC,EACH,SAAAqvB,CAAW3iB,EAAO1J,EAAMpC,GACjBoC,EAAK2/B,SAAW/hC,EAAQ+hC,SACxB3/B,EAAK07B,SAAW99B,EAAQ89B,SACxB17B,EAAKkM,OAAStO,EAAQsO,MAC1B,EACH,MAAAsf,CAAQ9hB,EAAOoH,EAAOkC,EAAQutB,GACvB,IAAK72B,EACD,OAEJ,MAAM8F,EAAUoJ,GAAUlP,EAAM9L,QAAQ8gC,OAAOlvB,SACzCgxB,EAAiBrgC,KAAKoD,IAAIuN,EAAQtB,EAAQsB,MAAO,GACjD2vB,EAAkBtgC,KAAKoD,IAAIyP,EAASxD,EAAQwD,OAAQ,GACpDwsB,EAvMd,SAA0BA,GACtB,MAAMkB,EAxDV,SAAmBlB,GACf,MAAMkB,EAAc,GACpB,IAAIrkC,EAAGO,EAAMwlB,EAAKP,EAAK8L,EAAOqS,EAC9B,IAAI3jC,EAAI,EAAGO,GAAQ4iC,GAAS,IAAIhjC,OAAQH,EAAIO,IAAQP,EAChD+lB,EAAMod,EAAMnjC,KACTq/B,SAAU7Z,EAAMjkB,SAAW+vB,QAAQqS,cAAa,IAAU5d,GAC7Dse,EAAYvhC,KAAK,CACbnC,MAAOX,EACP+lB,MACAP,MACA8c,WAAYvc,EAAIue,eAChBz0B,OAAQkW,EAAIlW,OACZyhB,MAAOA,GAAS9L,EAAM8L,EACtBqS,gBAGR,OAAOU,CACX,CAuCwBE,CAAUpB,GACxBG,EAAWzB,GAAawC,EAAY/jB,OAAQkkB,GAAOA,EAAKze,IAAIud,WAAW,GACvE/vB,EAAOsuB,GAAaF,GAAiB0C,EAAa,SAAS,GAC3DhxB,EAAQwuB,GAAaF,GAAiB0C,EAAa,UACnDjxB,EAAMyuB,GAAaF,GAAiB0C,EAAa,QAAQ,GACzD/wB,EAASuuB,GAAaF,GAAiB0C,EAAa,WACpDI,EAAmB7C,GAA4ByC,EAAa,KAC5DK,EAAiB9C,GAA4ByC,EAAa,KAChE,MAAO,CACHf,WACAqB,WAAYpxB,EAAKqxB,OAAOxxB,GACxByxB,eAAgBxxB,EAAMuxB,OAAOF,GAAgBE,OAAOtxB,GAAQsxB,OAAOH,GACnE1Z,UAAW4W,GAAiB0C,EAAa,aACzCS,SAAUvxB,EAAKqxB,OAAOvxB,GAAOuxB,OAAOF,GACpCpC,WAAYlvB,EAAIwxB,OAAOtxB,GAAQsxB,OAAOH,GAE9C,CAsLsBM,CAAiB13B,EAAM81B,OAC/B6B,EAAgB7B,EAAM2B,SACtBG,EAAkB9B,EAAMb,WAC9BziC,EAAKwN,EAAM81B,MAAQpd,IACiB,mBAArBA,EAAImf,cACXnf,EAAImf,iBAGZ,MAAMC,EAA0BH,EAAc1X,OAAO,CAAC8X,EAAOZ,IAAOA,EAAKze,IAAIxkB,UAAwC,IAA7BijC,EAAKze,IAAIxkB,QAAQiS,QAAoB4xB,EAAQA,EAAQ,EAAG,IAAM,EAChJhD,EAASxjC,OAAOg8B,OAAO,CACzB6H,WAAYhuB,EACZkuB,YAAahsB,EACbxD,UACAgxB,iBACAC,kBACAiB,aAAclB,EAAiB,EAAIgB,EACnCG,cAAelB,EAAkB,IAE/BpC,EAAapjC,OAAOkP,OAAO,CAAC,EAAGqF,GACrC8uB,GAAiBD,EAAYzlB,GAAU2nB,IACvC,MAAMnZ,EAAYnsB,OAAOkP,OAAO,CAC5Bk0B,aACAjrB,EAAGotB,EACH9oB,EAAG+oB,EACHjiC,EAAGgR,EAAQI,KACXlR,EAAG8Q,EAAQC,KACZD,GACG2e,EArPb,SAAuB8R,EAASxB,GAC7B,MAAMtQ,EAnBV,SAAqB8R,GACjB,MAAM9R,EAAS,CAAC,EAChB,IAAK,MAAM0S,KAAQZ,EAAQ,CACvB,MAAM,MAAEtS,EAAM,IAAE9L,EAAI,YAAEme,GAAiBa,EACvC,IAAKlT,IAAUoQ,GAAiBxzB,SAASsX,GACrC,SAEJ,MAAM/F,EAASqS,EAAOR,KAAWQ,EAAOR,GAAS,CAC7C9H,MAAO,EACPka,OAAQ,EACR7zB,OAAQ,EACRnM,KAAM,IAEV+b,EAAO+J,QACP/J,EAAO5P,QAAU8zB,CACrB,CACA,OAAO7R,CACX,CAEmByT,CAAY3B,IACrB,aAAEyB,EAAa,cAAEC,GAAmBlD,EAC1C,IAAIpiC,EAAGO,EAAM8hC,EACb,IAAIriC,EAAI,EAAGO,EAAOqjC,EAAQzjC,OAAQH,EAAIO,IAAQP,EAAE,CAC5CqiC,EAASuB,EAAQ5jC,GACjB,MAAM,SAAEsjC,GAAcjB,EAAOtc,IACvBuL,EAAQQ,EAAOuQ,EAAO/Q,OACtBrD,EAASqD,GAAS+Q,EAAOsB,YAAcrS,EAAMzhB,OAC/CwyB,EAAOC,YACPD,EAAO5tB,MAAQwZ,EAASA,EAASoX,EAAe/B,GAAYlB,EAAO+B,eACnE9B,EAAO1rB,OAAS2uB,IAEhBjD,EAAO5tB,MAAQ4wB,EACfhD,EAAO1rB,OAASsX,EAASA,EAASqX,EAAgBhC,GAAYlB,EAAOgC,gBAE7E,CACA,OAAOtS,CACX,CAmOuB0T,CAAcR,EAAcJ,OAAOK,GAAkB7C,GACpEc,GAASC,EAAMG,SAAUvY,EAAWqX,EAAQtQ,GAC5CoR,GAAS8B,EAAeja,EAAWqX,EAAQtQ,GACvCoR,GAAS+B,EAAiBla,EAAWqX,EAAQtQ,IAC7CoR,GAAS8B,EAAeja,EAAWqX,EAAQtQ,GA3KvD,SAA0B/G,GACtB,MAAMiX,EAAajX,EAAUiX,WAC7B,SAASyD,EAAUjgB,GACf,MAAMkgB,EAAS5hC,KAAKoD,IAAI86B,EAAWxc,GAAOuF,EAAUvF,GAAM,GAE1D,OADAuF,EAAUvF,IAAQkgB,EACXA,CACX,CACA3a,EAAU1oB,GAAKojC,EAAU,OACzB1a,EAAU5oB,GAAKsjC,EAAU,QACzBA,EAAU,SACVA,EAAU,SACd,CAkKQE,CAAiB5a,GACjByY,GAAWL,EAAMwB,WAAY5Z,EAAWqX,EAAQtQ,GAChD/G,EAAU5oB,GAAK4oB,EAAUhU,EACzBgU,EAAU1oB,GAAK0oB,EAAU1P,EACzBmoB,GAAWL,EAAM0B,eAAgB9Z,EAAWqX,EAAQtQ,GACpDzkB,EAAM0d,UAAY,CACdxX,KAAMwX,EAAUxX,KAChBH,IAAK2X,EAAU3X,IACfC,MAAO0X,EAAUxX,KAAOwX,EAAUhU,EAClCzD,OAAQyX,EAAU3X,IAAM2X,EAAU1P,EAClC1E,OAAQoU,EAAU1P,EAClB5G,MAAOsW,EAAUhU,GAErBlX,EAAKsjC,EAAMpY,UAAYsX,IACnB,MAAMtc,EAAMsc,EAAOtc,IACnBnnB,OAAOkP,OAAOiY,EAAK1Y,EAAM0d,WACzBhF,EAAIoJ,OAAOpE,EAAUhU,EAAGgU,EAAU1P,EAAG,CACjC9H,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,KAGpB,GAGJ,MAAMsyB,GACL,cAAAC,CAAevvB,EAAQwvB,GAAc,CACrC,cAAAC,CAAe32B,GACR,OAAO,CACX,CACH,gBAAAgY,CAAiB/Z,EAAO1O,EAAMsJ,GAAW,CACzC,mBAAAof,CAAoBha,EAAO1O,EAAMsJ,GAAW,CAC5C,mBAAAqH,GACO,OAAO,CACX,CACH,cAAA02B,CAAehhB,EAASvQ,EAAOkC,EAAQmvB,GAGhC,OAFArxB,EAAQ3Q,KAAKoD,IAAI,EAAGuN,GAASuQ,EAAQvQ,OACrCkC,EAASA,GAAUqO,EAAQrO,OACpB,CACHlC,QACAkC,OAAQ7S,KAAKoD,IAAI,EAAG4+B,EAAchiC,KAAKoB,MAAMuP,EAAQqxB,GAAenvB,GAE5E,CACH,UAAAsvB,CAAW3vB,GACJ,OAAO,CACX,CACH,YAAA4vB,CAAarW,GACV,EAGJ,MAAMsW,WAAsBP,GACxB,cAAAC,CAAeliC,GACX,OAAOA,GAAQA,EAAK4S,YAAc5S,EAAK4S,WAAW,OAAS,IAC/D,CACA,YAAA2vB,CAAarW,GACTA,EAAOtuB,QAAQuN,WAAY,CAC/B,EAGJ,MAAMs3B,GAAc,WACbC,GAAc,CACjBC,WAAY,YACZC,UAAW,YACXC,SAAU,UACVC,aAAc,aACdC,YAAa,YACbC,YAAa,YACbC,UAAW,UACXC,aAAc,WACdC,WAAY,YAEVC,GAAiBvoC,GAAkB,OAAVA,GAA4B,KAAVA,EAoC3CwoC,KAAuB/f,IAA+B,CACxDE,SAAS,GAOb,SAAS8f,GAAe55B,EAAO1O,EAAMsJ,GAC7BoF,GAASA,EAAMiJ,QACfjJ,EAAMiJ,OAAO+Q,oBAAoB1oB,EAAMsJ,EAAU++B,GAEzD,CAYA,SAASE,GAAiBC,EAAU7wB,GAChC,IAAK,MAAM/H,KAAQ44B,EACf,GAAI54B,IAAS+H,GAAU/H,EAAK64B,SAAS9wB,GACjC,OAAO,CAGnB,CACA,SAAS+wB,GAAqBh6B,EAAO1O,EAAMsJ,GACvC,MAAMqO,EAASjJ,EAAMiJ,OACfgxB,EAAW,IAAIC,iBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMC,KAASF,EAChBC,EAAUA,GAAWP,GAAiBQ,EAAMC,WAAYrxB,GACxDmxB,EAAUA,IAAYP,GAAiBQ,EAAME,aAActxB,GAE3DmxB,GACAx/B,MAOR,OAJAq/B,EAASO,QAAQvjB,SAAU,CACvBwjB,WAAW,EACXC,SAAS,IAENT,CACX,CACA,SAASU,GAAqB36B,EAAO1O,EAAMsJ,GACvC,MAAMqO,EAASjJ,EAAMiJ,OACfgxB,EAAW,IAAIC,iBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMC,KAASF,EAChBC,EAAUA,GAAWP,GAAiBQ,EAAME,aAActxB,GAC1DmxB,EAAUA,IAAYP,GAAiBQ,EAAMC,WAAYrxB,GAEzDmxB,GACAx/B,MAOR,OAJAq/B,EAASO,QAAQvjB,SAAU,CACvBwjB,WAAW,EACXC,SAAS,IAENT,CACX,CACA,MAAMW,GAAqB,IAAIh8B,IAC/B,IAAIi8B,GAAsB,EAC1B,SAASC,KACL,MAAMC,EAAM5/B,OAAO2G,iBACfi5B,IAAQF,KAGZA,GAAsBE,EACtBH,GAAmB3/B,QAAQ,CAACuK,EAAQxF,KAC5BA,EAAM8I,0BAA4BiyB,GAClCv1B,MAGZ,CAaA,SAASw1B,GAAqBh7B,EAAO1O,EAAMsJ,GACvC,MAAMqO,EAASjJ,EAAMiJ,OACfgyB,EAAYhyB,GAAUiO,GAAejO,GAC3C,IAAKgyB,EACD,OAEJ,MAAMz1B,EAASnK,GAAU,CAAC+L,EAAOkC,KAC7B,MAAMI,EAAIuxB,EAAUC,YACpBtgC,EAASwM,EAAOkC,GACZI,EAAIuxB,EAAUC,aACdtgC,KAELO,QACG8+B,EAAW,IAAIkB,eAAgBhB,IACjC,MAAME,EAAQF,EAAQ,GAChB/yB,EAAQizB,EAAMe,YAAYh0B,MAC1BkC,EAAS+wB,EAAMe,YAAY9xB,OACnB,IAAVlC,GAA0B,IAAXkC,GAGnB9D,EAAO4B,EAAOkC,KAIlB,OAFA2wB,EAASO,QAAQS,GAlCrB,SAAuCj7B,EAAOwF,GACrCo1B,GAAmBvkC,MACpB8E,OAAO4e,iBAAiB,SAAU+gB,IAEtCF,GAAmBr7B,IAAIS,EAAOwF,EAClC,CA8BI61B,CAA8Br7B,EAAOwF,GAC9By0B,CACX,CACA,SAASqB,GAAgBt7B,EAAO1O,EAAM2oC,GAC9BA,GACAA,EAASsB,aAEA,WAATjqC,GApCR,SAAyC0O,GACrC46B,GAAmB/nB,OAAO7S,GACrB46B,GAAmBvkC,MACpB8E,OAAO6e,oBAAoB,SAAU8gB,GAE7C,CAgCQU,CAAgCx7B,EAExC,CACA,SAASy7B,GAAqBz7B,EAAO1O,EAAMsJ,GACvC,MAAMqO,EAASjJ,EAAMiJ,OACfgI,EAAQ5V,GAAWgd,IACH,OAAdrY,EAAM2C,KACN/H,EAtHZ,SAAyByd,EAAOrY,GAC5B,MAAM1O,EAAO0nC,GAAY3gB,EAAM/mB,OAAS+mB,EAAM/mB,MACxC,EAAEwD,EAAE,EAAEE,GAAOojB,GAAoBC,EAAOrY,GAC9C,MAAO,CACH1O,OACA0O,QACA07B,OAAQrjB,EACRvjB,OAAS4M,IAAN5M,EAAkBA,EAAI,KACzBE,OAAS0M,IAAN1M,EAAkBA,EAAI,KAEjC,CA4GqB2mC,CAAgBtjB,EAAOrY,KAErCA,GAEH,OApIJ,SAAqBkB,EAAM5P,EAAMsJ,GACzBsG,GACAA,EAAK6Y,iBAAiBzoB,EAAMsJ,EAAU++B,GAE9C,CA+HIiC,CAAY3yB,EAAQ3X,EAAM2f,GACnBA,CACX,CACC,MAAM4qB,WAAoBtD,GAC1B,cAAAC,CAAevvB,EAAQwvB,GAChB,MAAM12B,EAAUkH,GAAUA,EAAOC,YAAcD,EAAOC,WAAW,MACjE,OAAInH,GAAWA,EAAQkH,SAAWA,GA/KzC,SAAoBA,EAAQwvB,GACzB,MAAMn2B,EAAQ2G,EAAO3G,MACfw5B,EAAe7yB,EAAO8yB,aAAa,UACnCC,EAAc/yB,EAAO8yB,aAAa,SAcxC,GAbA9yB,EAAO8vB,IAAe,CAClBla,QAAS,CACLvV,OAAQwyB,EACR10B,MAAO40B,EACP15B,MAAO,CACH6D,QAAS7D,EAAM6D,QACfmD,OAAQhH,EAAMgH,OACdlC,MAAO9E,EAAM8E,SAIzB9E,EAAM6D,QAAU7D,EAAM6D,SAAW,QACjC7D,EAAMiW,UAAYjW,EAAMiW,WAAa,aACjCmhB,GAAcsC,GAAc,CAC5B,MAAMC,EAAehiB,GAAahR,EAAQ,cACrBvH,IAAjBu6B,IACAhzB,EAAO7B,MAAQ60B,EAEvB,CACA,GAAIvC,GAAcoC,GACd,GAA4B,KAAxB7yB,EAAO3G,MAAMgH,OACbL,EAAOK,OAASL,EAAO7B,OAASqxB,GAAe,OAC5C,CACH,MAAMyD,EAAgBjiB,GAAahR,EAAQ,eACrBvH,IAAlBw6B,IACAjzB,EAAOK,OAAS4yB,EAExB,CAGR,CA8IYC,CAAWlzB,EAAQwvB,GACZ12B,GAEJ,IACX,CACH,cAAA22B,CAAe32B,GACR,MAAMkH,EAASlH,EAAQkH,OACvB,IAAKA,EAAO8vB,IACR,OAAO,EAEX,MAAMla,EAAU5V,EAAO8vB,IAAala,QACpC,CACI,SACA,SACF5jB,QAAS+T,IACP,MAAM7d,EAAQ0tB,EAAQ7P,GAClB9d,EAAcC,GACd8X,EAAOmzB,gBAAgBptB,GAEvB/F,EAAOozB,aAAartB,EAAM7d,KAGlC,MAAMmR,EAAQuc,EAAQvc,OAAS,CAAC,EAMhC,OALA/Q,OAAOsB,KAAKyP,GAAOrH,QAASlH,IACxBkV,EAAO3G,MAAMvO,GAAOuO,EAAMvO,KAE9BkV,EAAO7B,MAAQ6B,EAAO7B,aACf6B,EAAO8vB,KACP,CACX,CACH,gBAAAhf,CAAiB/Z,EAAO1O,EAAMsJ,GACvBmF,KAAKia,oBAAoBha,EAAO1O,GAChC,MAAMgrC,EAAUt8B,EAAMu8B,WAAav8B,EAAMu8B,SAAW,CAAC,GAM/CtK,EALW,CACbuK,OAAQxC,GACRyC,OAAQ9B,GACRn1B,OAAQw1B,IAEa1pC,IAASmqC,GAClCa,EAAQhrC,GAAQ2gC,EAAQjyB,EAAO1O,EAAMsJ,EACzC,CACH,mBAAAof,CAAoBha,EAAO1O,GACpB,MAAMgrC,EAAUt8B,EAAMu8B,WAAav8B,EAAMu8B,SAAW,CAAC,GAC/CtrB,EAAQqrB,EAAQhrC,GACjB2f,KAGY,CACburB,OAAQlB,GACRmB,OAAQnB,GACR91B,OAAQ81B,IAEahqC,IAASsoC,IAC1B55B,EAAO1O,EAAM2f,GACrBqrB,EAAQhrC,QAAQoQ,EACpB,CACA,mBAAAO,GACI,OAAO9G,OAAO2G,gBAClB,CACH,cAAA62B,CAAe1vB,EAAQ7B,EAAOkC,EAAQmvB,GAC/B,ODhsCR,SAAwBxvB,EAAQyzB,EAASC,EAAUlE,GAC/C,MAAMn2B,EAAQoV,GAAiBzO,GACzB2zB,EAAU7kB,GAAmBzV,EAAO,UACpCuL,EAAWyJ,GAAchV,EAAMuL,SAAU5E,EAAQ,gBAAkBrS,EACnEimC,EAAYvlB,GAAchV,EAAMu6B,UAAW5zB,EAAQ,iBAAmBrS,EACtEkmC,EAhCV,SAA0B7zB,EAAQ7B,EAAOkC,GACrC,IAAIuE,EAAUgvB,EACd,QAAcn7B,IAAV0F,QAAkC1F,IAAX4H,EAAsB,CAC7C,MAAM2xB,EAAYhyB,GAAUiO,GAAejO,GAC3C,GAAKgyB,EAGE,CACH,MAAMnwB,EAAOmwB,EAAUjiB,wBACjB+jB,EAAiBrlB,GAAiBujB,GAClC+B,EAAkBjlB,GAAmBglB,EAAgB,SAAU,SAC/DE,EAAmBllB,GAAmBglB,EAAgB,WAC5D31B,EAAQ0D,EAAK1D,MAAQ61B,EAAiB71B,MAAQ41B,EAAgB51B,MAC9DkC,EAASwB,EAAKxB,OAAS2zB,EAAiB3zB,OAAS0zB,EAAgB1zB,OACjEuE,EAAWyJ,GAAcylB,EAAelvB,SAAUotB,EAAW,eAC7D4B,EAAYvlB,GAAcylB,EAAeF,UAAW5B,EAAW,eACnE,MAXI7zB,EAAQ6B,EAAOiyB,YACf5xB,EAASL,EAAOi0B,YAWxB,CACA,MAAO,CACH91B,QACAkC,SACAuE,SAAUA,GAAYjX,EACtBimC,UAAWA,GAAajmC,EAEhC,CAQ0BumC,CAAiBl0B,EAAQyzB,EAASC,GACxD,IAAI,MAAEv1B,EAAM,OAAEkC,GAAYwzB,EAC1B,GAAwB,gBAApBx6B,EAAMiW,UAA6B,CACnC,MAAME,EAAUV,GAAmBzV,EAAO,SAAU,SAC9CkW,EAAWT,GAAmBzV,EAAO,WAC3C8E,GAASoR,EAASpR,MAAQqR,EAAQrR,MAClCkC,GAAUkP,EAASlP,OAASmP,EAAQnP,MACxC,CAeA,OAdAlC,EAAQ3Q,KAAKoD,IAAI,EAAGuN,EAAQw1B,EAAQx1B,OACpCkC,EAAS7S,KAAKoD,IAAI,EAAG4+B,EAAcrxB,EAAQqxB,EAAcnvB,EAASszB,EAAQtzB,QAC1ElC,EAAQgS,GAAO3iB,KAAKmD,IAAIwN,EAAOyG,EAAUivB,EAAcjvB,WACvDvE,EAAS8P,GAAO3iB,KAAKmD,IAAI0P,EAAQuzB,EAAWC,EAAcD,YACtDz1B,IAAUkC,IAGVA,EAAS8P,GAAOhS,EAAQ,UAEO1F,IAAZg7B,QAAsCh7B,IAAbi7B,IAC1BlE,GAAeqE,EAAcxzB,QAAUA,EAASwzB,EAAcxzB,SAChFA,EAASwzB,EAAcxzB,OACvBlC,EAAQgS,GAAO3iB,KAAKoB,MAAMyR,EAASmvB,KAEhC,CACHrxB,QACAkC,SAER,CCiqCeqvB,CAAe1vB,EAAQ7B,EAAOkC,EAAQmvB,EACjD,CACH,UAAAG,CAAW3vB,GACJ,MAAMgyB,EAAYhyB,GAAUiO,GAAejO,GAC3C,SAAUgyB,IAAaA,EAAUmC,YACrC,EAUJ,MAAMC,GACF5W,gBAAkB,CAAC,EACnBA,0BAAuB/kB,EACvB5M,EACAE,EACAuQ,QAAS,EACTrR,QACAivB,YACA,eAAAma,CAAgBjL,GACZ,MAAM,EAAEv9B,EAAE,EAAEE,GAAO+K,KAAKuzB,SAAS,CAC7B,IACA,KACDjB,GACH,MAAO,CACHv9B,IACAE,IAER,CACA,QAAAuoC,GACI,OAAOxlC,EAASgI,KAAKjL,IAAMiD,EAASgI,KAAK/K,EAC7C,CACA,QAAAs+B,CAAS1kB,EAAO4uB,GACZ,MAAM/e,EAAQ1e,KAAKojB,YACnB,IAAKqa,IAAU/e,EAEX,OAAO1e,KAEX,MAAM8O,EAAM,CAAC,EAIb,OAHAD,EAAM3T,QAAS+T,IACXH,EAAIG,GAAQyP,EAAMzP,IAASyP,EAAMzP,GAAMzJ,SAAWkZ,EAAMzP,GAAM4S,IAAM7hB,KAAKiP,KAEtEH,CACX,EA2EH,SAASyF,GAAKxU,EAAO29B,EAAUC,EAASC,EAAYC,GACjD,MAAMzkC,EAAQjH,EAAeyrC,EAAY,GACnCvkC,EAAM3C,KAAKmD,IAAI1H,EAAe0rC,EAAU99B,EAAMhN,QAASgN,EAAMhN,QACnE,IACIA,EAAQH,EAAGiiB,EADXuH,EAAQ,EAQZ,IANAuhB,EAAUjnC,KAAKonC,KAAKH,GAChBE,IACA9qC,EAAS8qC,EAAWD,EACpBD,EAAU5qC,EAAS2D,KAAKoB,MAAM/E,EAAS4qC,IAE3C9oB,EAAOzb,EACDyb,EAAO,GACTuH,IACAvH,EAAOne,KAAKiB,MAAMyB,EAAQgjB,EAAQuhB,GAEtC,IAAI/qC,EAAI8D,KAAKoD,IAAIV,EAAO,GAAIxG,EAAIyG,EAAKzG,IAC7BA,IAAMiiB,IACN6oB,EAAShoC,KAAKqK,EAAMnN,IACpBwpB,IACAvH,EAAOne,KAAKiB,MAAMyB,EAAQgjB,EAAQuhB,GAG9C,CAeA,MACMI,GAAiB,CAACr6B,EAAOs6B,EAAM33B,IAAkB,QAAT23B,GAA2B,SAATA,EAAkBt6B,EAAMs6B,GAAQ33B,EAAS3C,EAAMs6B,GAAQ33B,EACjH43B,GAAgB,CAACC,EAAaC,IAAgBznC,KAAKmD,IAAIskC,GAAiBD,EAAaA,GAC1F,SAASE,GAAOnrB,EAAKorB,GAClB,MAAMlmB,EAAS,GACTmmB,EAAYrrB,EAAIlgB,OAASsrC,EACzBxrC,EAAMogB,EAAIlgB,OAChB,IAAIH,EAAI,EACR,KAAMA,EAAIC,EAAKD,GAAK0rC,EAChBnmB,EAAOziB,KAAKud,EAAIvc,KAAKoB,MAAMlF,KAE/B,OAAOulB,CACX,CACC,SAASomB,GAAoB76B,EAAOnQ,EAAOirC,GACxC,MAAMzrC,EAAS2Q,EAAM3D,MAAMhN,OACrB0rC,EAAa/nC,KAAKmD,IAAItG,EAAOR,EAAS,GACtCqG,EAAQsK,EAAMg7B,YACdrlC,EAAMqK,EAAMi7B,UACZrnC,EAAU,KAChB,IACI+O,EADAu4B,EAAYl7B,EAAMm7B,gBAAgBJ,GAEtC,KAAID,IAEIn4B,EADW,IAAXtT,EACS2D,KAAKoD,IAAI8kC,EAAYxlC,EAAOC,EAAMulC,GAC1B,IAAVrrC,GACGmQ,EAAMm7B,gBAAgB,GAAKD,GAAa,GAExCA,EAAYl7B,EAAMm7B,gBAAgBJ,EAAa,IAAM,EAEnEG,GAAaH,EAAalrC,EAAQ8S,GAAUA,EACxCu4B,EAAYxlC,EAAQ9B,GAAWsnC,EAAYvlC,EAAM/B,IAIzD,OAAOsnC,CACX,CAcC,SAASE,GAAkB3qC,GACxB,OAAOA,EAAQ0S,UAAY1S,EAAQ2S,WAAa,CACpD,CACC,SAASi4B,GAAe5qC,EAASmb,GAC9B,IAAKnb,EAAQiS,QACT,OAAO,EAEX,MAAM/D,EAAOgN,GAAOlb,EAAQkO,KAAMiN,GAC5BvJ,EAAUoJ,GAAUhb,EAAQ4R,SAElC,OADc1U,EAAQ8C,EAAQoT,MAAQpT,EAAQoT,KAAKxU,OAAS,GAC7CsP,EAAKG,WAAauD,EAAQwD,MAC7C,CAcA,SAASy1B,GAAWtjC,EAAOu2B,EAAUt/B,GAChC,IAAImc,EAAMrT,GAAmBC,GAI9B,OAHI/I,GAAwB,UAAbs/B,IAAyBt/B,GAAwB,UAAbs/B,KAC/CnjB,EA7Ea,CAACpT,GAAkB,SAAVA,EAAmB,QAAoB,UAAVA,EAAoB,OAASA,EA6E1EujC,CAAanwB,IAEhBA,CACX,CAwCA,MAAMowB,WAAc5B,GAChB,WAAA/7B,CAAY6f,GACR2O,QACC/vB,KAAK9O,GAAKkwB,EAAIlwB,GACd8O,KAAKzO,KAAO6vB,EAAI7vB,KAChByO,KAAK7L,aAAUwN,EACf3B,KAAK4C,IAAMwe,EAAIxe,IACf5C,KAAKC,MAAQmhB,EAAInhB,MACjBD,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKqH,WAAQ1F,EACb3B,KAAKuJ,YAAS5H,EACf3B,KAAKm/B,SAAW,CACZh5B,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEXlG,KAAK8N,cAAWnM,EAChB3B,KAAK88B,eAAYn7B,EACjB3B,KAAKo/B,gBAAaz9B,EAClB3B,KAAKq/B,mBAAgB19B,EACrB3B,KAAKs/B,iBAAc39B,EACnB3B,KAAKu/B,kBAAe59B,EACpB3B,KAAKylB,UAAO9jB,EACZ3B,KAAKw/B,mBAAgB79B,EACtB3B,KAAKnG,SAAM8H,EACX3B,KAAKlG,SAAM6H,EACX3B,KAAKy/B,YAAS99B,EACb3B,KAAKD,MAAQ,GACbC,KAAK0/B,eAAiB,KACtB1/B,KAAK2/B,YAAc,KACnB3/B,KAAK4/B,YAAc,KACpB5/B,KAAK6/B,QAAU,EACf7/B,KAAK8/B,WAAa,EAClB9/B,KAAK+/B,kBAAoB,CAAC,EACzB//B,KAAK0+B,iBAAc/8B,EACnB3B,KAAK2+B,eAAYh9B,EAClB3B,KAAK8xB,gBAAiB,EACtB9xB,KAAKggC,cAAWr+B,EAChB3B,KAAKigC,cAAWt+B,EAChB3B,KAAKkgC,mBAAgBv+B,EACrB3B,KAAKmgC,mBAAgBx+B,EACrB3B,KAAKogC,aAAe,EACpBpgC,KAAKqgC,aAAe,EACpBrgC,KAAKsgC,OAAS,CAAC,EACftgC,KAAKugC,mBAAoB,EACzBvgC,KAAKsnB,cAAW3lB,CACpB,CACH,IAAA6+B,CAAKrsC,GACE6L,KAAK7L,QAAUA,EAAQoe,WAAWvS,KAAKmJ,cACvCnJ,KAAKylB,KAAOtxB,EAAQsxB,KACpBzlB,KAAKigC,SAAWjgC,KAAKuqB,MAAMp2B,EAAQ0F,KACnCmG,KAAKggC,SAAWhgC,KAAKuqB,MAAMp2B,EAAQ2F,KACnCkG,KAAKmgC,cAAgBngC,KAAKuqB,MAAMp2B,EAAQssC,cACxCzgC,KAAKkgC,cAAgBlgC,KAAKuqB,MAAMp2B,EAAQusC,aAC5C,CACH,KAAAnW,CAAMwC,EAAKx5B,GACJ,OAAOw5B,CACX,CACH,aAAAb,GACO,IAAI,SAAE+T,EAAS,SAAED,EAAS,cAAEG,EAAc,cAAED,GAAmBlgC,KAK/D,OAJAigC,EAAWhuC,EAAgBguC,EAAUluC,OAAO+E,mBAC5CkpC,EAAW/tC,EAAgB+tC,EAAUjuC,OAAO85B,mBAC5CsU,EAAgBluC,EAAgBkuC,EAAepuC,OAAO+E,mBACtDopC,EAAgBjuC,EAAgBiuC,EAAenuC,OAAO85B,mBAC/C,CACHhyB,IAAK5H,EAAgBguC,EAAUE,GAC/BrmC,IAAK7H,EAAgB+tC,EAAUE,GAC/BlU,WAAYl6B,EAAemuC,GAC3BhU,WAAYn6B,EAAekuC,GAEnC,CACH,SAAAxU,CAAUC,GACH,IACIh0B,GADA,IAAEoC,EAAI,IAAEC,EAAI,WAAEkyB,EAAW,WAAEC,GAAgBjsB,KAAKksB,gBAEpD,GAAIF,GAAcC,EACd,MAAO,CACHpyB,MACAC,OAGR,MAAM6mC,EAAQ3gC,KAAKilB,0BACnB,IAAI,IAAIryB,EAAI,EAAGO,EAAOwtC,EAAM5tC,OAAQH,EAAIO,IAAQP,EAC5C6E,EAAQkpC,EAAM/tC,GAAGuyB,WAAWqG,UAAUxrB,KAAMyrB,GACvCO,IACDnyB,EAAMnD,KAAKmD,IAAIA,EAAKpC,EAAMoC,MAEzBoyB,IACDnyB,EAAMpD,KAAKoD,IAAIA,EAAKrC,EAAMqC,MAKlC,OAFAD,EAAMoyB,GAAcpyB,EAAMC,EAAMA,EAAMD,EACtCC,EAAMkyB,GAAcnyB,EAAMC,EAAMD,EAAMC,EAC/B,CACHD,IAAK5H,EAAgB4H,EAAK5H,EAAgB6H,EAAKD,IAC/CC,IAAK7H,EAAgB6H,EAAK7H,EAAgB4H,EAAKC,IAEvD,CACH,UAAAq7B,GACO,MAAO,CACHhvB,KAAMnG,KAAKs/B,aAAe,EAC1Bt5B,IAAKhG,KAAKo/B,YAAc,EACxBn5B,MAAOjG,KAAKu/B,cAAgB,EAC5Br5B,OAAQlG,KAAKq/B,eAAiB,EAEtC,CACH,QAAAuB,GACO,OAAO5gC,KAAKD,KAChB,CACH,SAAAgrB,GACO,MAAMxiB,EAAOvI,KAAKC,MAAMsI,KACxB,OAAOvI,KAAK7L,QAAQ22B,SAAW9qB,KAAKk3B,eAAiB3uB,EAAKs4B,QAAUt4B,EAAKu4B,UAAYv4B,EAAKuiB,QAAU,EACxG,CACH,aAAAiW,CAAcpjB,EAAY3d,KAAKC,MAAM0d,WAE9B,OADc3d,KAAK2/B,cAAgB3/B,KAAK2/B,YAAc3/B,KAAKghC,mBAAmBrjB,GAElF,CACA,YAAAma,GACI93B,KAAKsgC,OAAS,CAAC,EACftgC,KAAKugC,mBAAoB,CAC7B,CACA,YAAAU,GACI7uC,EAAS4N,KAAK7L,QAAQ8sC,aAAc,CAChCjhC,MAER,CACH,MAAA+hB,CAAOjU,EAAUgvB,EAAWD,GACrB,MAAM,YAAEv2B,EAAY,MAAEG,EAAQ1G,MAAOmhC,GAAclhC,KAAK7L,QAClDgtC,EAAaD,EAASC,WAC5BnhC,KAAKihC,eACLjhC,KAAK8N,SAAWA,EAChB9N,KAAK88B,UAAYA,EACjB98B,KAAKm/B,SAAWtC,EAAUrrC,OAAOkP,OAAO,CACpCyF,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GACT22B,GACH78B,KAAKD,MAAQ,KACbC,KAAK4/B,YAAc,KACnB5/B,KAAK0/B,eAAiB,KACtB1/B,KAAK2/B,YAAc,KACnB3/B,KAAKohC,sBACLphC,KAAKqhC,gBACLrhC,KAAKshC,qBACLthC,KAAK8/B,WAAa9/B,KAAKk3B,eAAiBl3B,KAAKqH,MAAQw1B,EAAQ12B,KAAO02B,EAAQ52B,MAAQjG,KAAKuJ,OAASszB,EAAQ72B,IAAM62B,EAAQ32B,OACnHlG,KAAKugC,oBACNvgC,KAAKuhC,mBACLvhC,KAAKwhC,sBACLxhC,KAAKyhC,kBACLzhC,KAAKy/B,ODxuEb,SAAmBiC,EAAQj7B,EAAOH,GAClC,MAAM,IAAEzM,EAAI,IAAEC,GAAS4nC,EACjBpJ,GAxiDkBqJ,GAwiDW7nC,EAAMD,GAAO,EAxiDK,iBAApCzI,EAwiDUqV,IAxiDsCrV,EAAMqE,SAAS,KAAO6C,WAAWlH,GAAS,IAAMuwC,GAAavwC,GAyiDxHwwC,EAAW,CAACxwC,EAAOyhB,IAAMvM,GAAyB,IAAVlV,EAAc,EAAIA,EAAQyhB,EAziDxD,IAACzhB,EAAOuwC,EA0iDxB,MAAO,CACH9nC,IAAK+nC,EAAS/nC,GAAMnD,KAAKa,IAAI+gC,IAC7Bx+B,IAAK8nC,EAAS9nC,EAAKw+B,GAE3B,CCguE0BuJ,CAAU7hC,KAAMyG,EAAOH,GACrCtG,KAAKugC,mBAAoB,GAE7BvgC,KAAK8hC,mBACL9hC,KAAKD,MAAQC,KAAK+hC,cAAgB,GAClC/hC,KAAKgiC,kBACL,MAAMC,EAAkBd,EAAanhC,KAAKD,MAAMhN,OAChDiN,KAAKkiC,sBAAsBD,EAAkB7D,GAAOp+B,KAAKD,MAAOohC,GAAcnhC,KAAKD,OACnFC,KAAK4iB,YACL5iB,KAAKmiC,+BACLniC,KAAKoiC,yBACLpiC,KAAKqiC,8BACDnB,EAAS96B,UAAY86B,EAASr5B,UAAgC,SAApBq5B,EAASztC,UACnDuM,KAAKD,MA3YjB,SAAkB2D,EAAO3D,GACrB,MAAMmhC,EAAWx9B,EAAMvP,QAAQ4L,MACzBuiC,EAyBV,SAA2B5+B,GACvB,MAAM2C,EAAS3C,EAAMvP,QAAQkS,OACvBS,EAAapD,EAAM6+B,YACnBC,EAAW9+B,EAAMm8B,QAAU/4B,GAAcT,EAAS,EAAI,GACtDo8B,EAAW/+B,EAAMo8B,WAAah5B,EACpC,OAAOpQ,KAAKoB,MAAMpB,KAAKmD,IAAI2oC,EAAUC,GACzC,CA/B+BC,CAAkBh/B,GACvCi/B,EAAajsC,KAAKmD,IAAIqnC,EAAS/C,eAAiBmE,EAAoBA,GACpEM,EAAe1B,EAASj5B,MAAM46B,QA6CvC,SAAyB9iC,GACtB,MAAMoY,EAAS,GACf,IAAIvlB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO4M,EAAMhN,OAAQH,EAAIO,EAAMP,IAClCmN,EAAMnN,GAAGqV,OACTkQ,EAAOziB,KAAK9C,GAGpB,OAAOulB,CACX,CAtDkD2qB,CAAgB/iC,GAAS,GACjEgjC,EAAkBH,EAAa7vC,OAC/BiwC,EAAQJ,EAAa,GACrBroC,EAAOqoC,EAAaG,EAAkB,GACtCrF,EAAW,GACjB,GAAIqF,EAAkBJ,EAElB,OAgDP,SAAoB5iC,EAAO29B,EAAUkF,EAAcjF,GAChD,IAEI/qC,EAFAwpB,EAAQ,EACRvH,EAAO+tB,EAAa,GAGxB,IADAjF,EAAUjnC,KAAKonC,KAAKH,GAChB/qC,EAAI,EAAGA,EAAImN,EAAMhN,OAAQH,IACrBA,IAAMiiB,IACN6oB,EAAShoC,KAAKqK,EAAMnN,IACpBwpB,IACAvH,EAAO+tB,EAAaxmB,EAAQuhB,GAGxC,CA7DQsF,CAAWljC,EAAO29B,EAAUkF,EAAcG,EAAkBJ,GACrDjF,EAEX,MAAMC,EAqBT,SAA0BiF,EAAc7iC,EAAO4iC,GAC5C,MAAMO,EA4DT,SAAwBjwB,GACrB,MAAMpgB,EAAMogB,EAAIlgB,OAChB,IAAIH,EAAGuwC,EACP,GAAItwC,EAAM,EACN,OAAO,EAEX,IAAIswC,EAAOlwB,EAAI,GAAIrgB,EAAI,EAAGA,EAAIC,IAAOD,EACjC,GAAIqgB,EAAIrgB,GAAKqgB,EAAIrgB,EAAI,KAAOuwC,EACxB,OAAO,EAGf,OAAOA,CACX,CAxE6BC,CAAeR,GAClCjF,EAAU59B,EAAMhN,OAAS4vC,EAC/B,IAAKO,EACD,OAAOxsC,KAAKoD,IAAI6jC,EAAS,GAE7B,MAAM0F,EDtsGN,SAAoBjyC,GACpB,MAAM+mB,EAAS,GACTpf,EAAOrC,KAAKqC,KAAK3H,GACvB,IAAIwB,EACJ,IAAIA,EAAI,EAAGA,EAAImG,EAAMnG,IACbxB,EAAQwB,IAAM,IACdulB,EAAOziB,KAAK9C,GACZulB,EAAOziB,KAAKtE,EAAQwB,IAO5B,OAJImG,KAAiB,EAAPA,IACVof,EAAOziB,KAAKqD,GAEhBof,EAAOuc,KAAK,CAACt+B,EAAGC,IAAID,EAAIC,GAAGspB,MACpBxH,CACX,CCurGoBmrB,CAAWJ,GAC3B,IAAI,IAAItwC,EAAI,EAAGO,EAAOkwC,EAAQtwC,OAAS,EAAGH,EAAIO,EAAMP,IAAI,CACpD,MAAMiuB,EAASwiB,EAAQzwC,GACvB,GAAIiuB,EAAS8c,EACT,OAAO9c,CAEf,CACA,OAAOnqB,KAAKoD,IAAI6jC,EAAS,EAC7B,CAnCoB4F,CAAiBX,EAAc7iC,EAAO4iC,GACtD,GAAII,EAAkB,EAAG,CACrB,IAAInwC,EAAGO,EACP,MAAMqwC,EAAkBT,EAAkB,EAAIrsC,KAAKiB,OAAO4C,EAAOyoC,IAAUD,EAAkB,IAAM,KAEnG,IADAxuB,GAAKxU,EAAO29B,EAAUC,EAASxsC,EAAcqyC,GAAmB,EAAIR,EAAQQ,EAAiBR,GACzFpwC,EAAI,EAAGO,EAAO4vC,EAAkB,EAAGnwC,EAAIO,EAAMP,IAC7C2hB,GAAKxU,EAAO29B,EAAUC,EAASiF,EAAahwC,GAAIgwC,EAAahwC,EAAI,IAGrE,OADA2hB,GAAKxU,EAAO29B,EAAUC,EAASpjC,EAAMpJ,EAAcqyC,GAAmBzjC,EAAMhN,OAASwH,EAAOipC,GACrF9F,CACX,CAEA,OADAnpB,GAAKxU,EAAO29B,EAAUC,GACfD,CACX,CAiXyB71B,CAAS7H,KAAMA,KAAKD,OACjCC,KAAK4/B,YAAc,KACnB5/B,KAAKyjC,iBAELxB,GACAjiC,KAAKkiC,sBAAsBliC,KAAKD,OAEpCC,KAAK0jC,YACL1jC,KAAK2jC,MACL3jC,KAAK4jC,WACL5jC,KAAK6jC,aACT,CACH,SAAAjhB,GACO,IACIkhB,EAAYC,EADZC,EAAgBhkC,KAAK7L,QAAQxB,QAE7BqN,KAAKk3B,gBACL4M,EAAa9jC,KAAKmG,KAClB49B,EAAW/jC,KAAKiG,QAEhB69B,EAAa9jC,KAAKgG,IAClB+9B,EAAW/jC,KAAKkG,OAChB89B,GAAiBA,GAErBhkC,KAAK0+B,YAAcoF,EACnB9jC,KAAK2+B,UAAYoF,EACjB/jC,KAAK8xB,eAAiBkS,EACtBhkC,KAAK6/B,QAAUkE,EAAWD,EAC1B9jC,KAAKikC,eAAiBjkC,KAAK7L,QAAQ+vC,aACvC,CACA,WAAAL,GACIzxC,EAAS4N,KAAK7L,QAAQ0vC,YAAa,CAC/B7jC,MAER,CACA,mBAAAohC,GACIhvC,EAAS4N,KAAK7L,QAAQitC,oBAAqB,CACvCphC,MAER,CACA,aAAAqhC,GACQrhC,KAAKk3B,gBACLl3B,KAAKqH,MAAQrH,KAAK8N,SAClB9N,KAAKmG,KAAO,EACZnG,KAAKiG,MAAQjG,KAAKqH,QAElBrH,KAAKuJ,OAASvJ,KAAK88B,UACnB98B,KAAKgG,IAAM,EACXhG,KAAKkG,OAASlG,KAAKuJ,QAEvBvJ,KAAKs/B,YAAc,EACnBt/B,KAAKo/B,WAAa,EAClBp/B,KAAKu/B,aAAe,EACpBv/B,KAAKq/B,cAAgB,CACzB,CACA,kBAAAiC,GACIlvC,EAAS4N,KAAK7L,QAAQmtC,mBAAoB,CACtCthC,MAER,CACA,UAAAmkC,CAAWlgC,GACPjE,KAAKC,MAAMmkC,cAAcngC,EAAMjE,KAAKmJ,cACpC/W,EAAS4N,KAAK7L,QAAQ8P,GAAO,CACzBjE,MAER,CACA,gBAAAuhC,GACIvhC,KAAKmkC,WAAW,mBACpB,CACA,mBAAA3C,GAAuB,CACvB,eAAAC,GACIzhC,KAAKmkC,WAAW,kBACpB,CACA,gBAAArC,GACI9hC,KAAKmkC,WAAW,mBACpB,CACH,UAAApC,GACO,MAAO,EACX,CACA,eAAAC,GACIhiC,KAAKmkC,WAAW,kBACpB,CACA,2BAAAE,GACIjyC,EAAS4N,KAAK7L,QAAQkwC,4BAA6B,CAC/CrkC,MAER,CACH,kBAAAskC,CAAmBvkC,GACZ,MAAMmhC,EAAWlhC,KAAK7L,QAAQ4L,MAC9B,IAAInN,EAAGO,EAAMusB,EACb,IAAI9sB,EAAI,EAAGO,EAAO4M,EAAMhN,OAAQH,EAAIO,EAAMP,IACtC8sB,EAAO3f,EAAMnN,GACb8sB,EAAK6M,MAAQn6B,EAAS8uC,EAAS9uC,SAAU,CACrCstB,EAAKtuB,MACLwB,EACAmN,GACDC,KAEX,CACA,0BAAAukC,GACInyC,EAAS4N,KAAK7L,QAAQowC,2BAA4B,CAC9CvkC,MAER,CACA,4BAAAmiC,GACI/vC,EAAS4N,KAAK7L,QAAQguC,6BAA8B,CAChDniC,MAER,CACA,sBAAAoiC,GACI,MAAMjuC,EAAU6L,KAAK7L,QACf+sC,EAAW/sC,EAAQ4L,MACnBykC,EAAWvG,GAAcj+B,KAAKD,MAAMhN,OAAQoB,EAAQ4L,MAAMo+B,eAC1D32B,EAAc05B,EAAS15B,aAAe,EACtCC,EAAcy5B,EAASz5B,YAC7B,IACIV,EAAW+1B,EAAW2H,EADtBjF,EAAgBh4B,EAEpB,IAAKxH,KAAK0kC,eAAiBxD,EAAS96B,SAAWoB,GAAeC,GAAe+8B,GAAY,IAAMxkC,KAAKk3B,eAEhG,YADAl3B,KAAKw/B,cAAgBh4B,GAGzB,MAAMm9B,EAAa3kC,KAAK4kC,iBAClBC,EAAgBF,EAAWG,OAAOz9B,MAClC09B,EAAiBJ,EAAWK,QAAQz7B,OACpCuE,EAAWlU,EAAYoG,KAAKC,MAAMoH,MAAQw9B,EAAe,EAAG7kC,KAAK8N,UACvE/G,EAAY5S,EAAQkS,OAASrG,KAAK8N,SAAW02B,EAAW12B,GAAY02B,EAAW,GAC3EK,EAAgB,EAAI99B,IACpBA,EAAY+G,GAAY02B,GAAYrwC,EAAQkS,OAAS,GAAM,IAC3Dy2B,EAAY98B,KAAK88B,UAAYgC,GAAkB3qC,EAAQuS,MAAQw6B,EAASn7B,QAAUg5B,GAAe5qC,EAAQmT,MAAOtH,KAAKC,MAAM9L,QAAQkO,MACnIoiC,EAAmB/tC,KAAKqC,KAAK8rC,EAAgBA,EAAgBE,EAAiBA,GAC9EvF,EAA0B9oC,KAAKmD,IAAInD,KAAKuuC,KAAKrrC,GAAa+qC,EAAWK,QAAQz7B,OAAS,GAAKxC,GAAY,EAAG,IAAKrQ,KAAKuuC,KAAKrrC,EAAYkjC,EAAY2H,GAAmB,EAAG,IAAM/tC,KAAKuuC,KAAKrrC,EAAYmrC,EAAiBN,GAAmB,EAAG,MD9nHhO,IAAMhuC,GC+nHhB+oC,EAAgB9oC,KAAKoD,IAAI0N,EAAa9Q,KAAKmD,IAAI4N,EAAa+3B,KAEhEx/B,KAAKw/B,cAAgBA,CACzB,CACA,2BAAA6C,GACIjwC,EAAS4N,KAAK7L,QAAQkuC,4BAA6B,CAC/CriC,MAER,CACA,aAAAyjC,GAAiB,CACjB,SAAAC,GACItxC,EAAS4N,KAAK7L,QAAQuvC,UAAW,CAC7B1jC,MAER,CACA,GAAA2jC,GACI,MAAMuB,EAAU,CACZ79B,MAAO,EACPkC,OAAQ,IAEN,MAAEtJ,EAAQ9L,SAAW4L,MAAOmhC,EAAW55B,MAAO69B,EAAYz+B,KAAM0+B,IAAiBplC,KACjFoG,EAAUpG,KAAK0kC,aACfxN,EAAel3B,KAAKk3B,eAC1B,GAAI9wB,EAAS,CACT,MAAMi/B,EAActG,GAAeoG,EAAWllC,EAAM9L,QAAQkO,MAQ5D,GAPI60B,GACAgO,EAAQ79B,MAAQrH,KAAK8N,SACrBo3B,EAAQ37B,OAASu1B,GAAkBsG,GAAYC,IAE/CH,EAAQ37B,OAASvJ,KAAK88B,UACtBoI,EAAQ79B,MAAQy3B,GAAkBsG,GAAYC,GAE9CnE,EAAS96B,SAAWpG,KAAKD,MAAMhN,OAAQ,CACvC,MAAM,MAAEiwC,EAAM,KAAEzoC,EAAK,OAAEuqC,EAAO,QAAEE,GAAahlC,KAAK4kC,iBAC5CU,EAAiC,EAAnBpE,EAASn7B,QACvBw/B,EAAehtC,EAAUyH,KAAKw/B,eAC9BxiC,EAAMtG,KAAKsG,IAAIuoC,GACfxpC,EAAMrF,KAAKqF,IAAIwpC,GACrB,GAAIrO,EAAc,CACd,MAAMsO,EAActE,EAASx5B,OAAS,EAAI3L,EAAM+oC,EAAOz9B,MAAQrK,EAAMgoC,EAAQz7B,OAC7E27B,EAAQ37B,OAAS7S,KAAKmD,IAAImG,KAAK88B,UAAWoI,EAAQ37B,OAASi8B,EAAcF,EAC7E,KAAO,CACH,MAAMG,EAAavE,EAASx5B,OAAS,EAAI1K,EAAM8nC,EAAOz9B,MAAQtL,EAAMipC,EAAQz7B,OAC5E27B,EAAQ79B,MAAQ3Q,KAAKmD,IAAImG,KAAK8N,SAAUo3B,EAAQ79B,MAAQo+B,EAAaH,EACzE,CACAtlC,KAAK0lC,kBAAkB1C,EAAOzoC,EAAMwB,EAAKiB,EAC7C,CACJ,CACAgD,KAAK2lC,iBACDzO,GACAl3B,KAAKqH,MAAQrH,KAAK6/B,QAAU5/B,EAAMoH,MAAQrH,KAAKm/B,SAASh5B,KAAOnG,KAAKm/B,SAASl5B,MAC7EjG,KAAKuJ,OAAS27B,EAAQ37B,SAEtBvJ,KAAKqH,MAAQ69B,EAAQ79B,MACrBrH,KAAKuJ,OAASvJ,KAAK6/B,QAAU5/B,EAAMsJ,OAASvJ,KAAKm/B,SAASn5B,IAAMhG,KAAKm/B,SAASj5B,OAEtF,CACA,iBAAAw/B,CAAkB1C,EAAOzoC,EAAMwB,EAAKiB,GAChC,MAAQ+C,OAAO,MAAErE,EAAM,QAAEqK,GAAW,SAAEksB,GAAcjyB,KAAK7L,QACnDyxC,EAAmC,IAAvB5lC,KAAKw/B,cACjBqG,EAAgC,QAAb5T,GAAoC,MAAdjyB,KAAKylB,KACpD,GAAIzlB,KAAKk3B,eAAgB,CACrB,MAAM4O,EAAa9lC,KAAK6+B,gBAAgB,GAAK7+B,KAAKmG,KAC5C4/B,EAAc/lC,KAAKiG,MAAQjG,KAAK6+B,gBAAgB7+B,KAAKD,MAAMhN,OAAS,GAC1E,IAAIusC,EAAc,EACdC,EAAe,EACfqG,EACIC,GACAvG,EAActiC,EAAMgmC,EAAM37B,MAC1Bk4B,EAAexjC,EAAMxB,EAAKgP,SAE1B+1B,EAAcvjC,EAAMinC,EAAMz5B,OAC1Bg2B,EAAeviC,EAAMzC,EAAK8M,OAEb,UAAV3L,EACP6jC,EAAehlC,EAAK8M,MACH,QAAV3L,EACP4jC,EAAc0D,EAAM37B,MACH,UAAV3L,IACP4jC,EAAc0D,EAAM37B,MAAQ,EAC5Bk4B,EAAehlC,EAAK8M,MAAQ,GAEhCrH,KAAKs/B,YAAc5oC,KAAKoD,KAAKwlC,EAAcwG,EAAa//B,GAAW/F,KAAKqH,OAASrH,KAAKqH,MAAQy+B,GAAa,GAC3G9lC,KAAKu/B,aAAe7oC,KAAKoD,KAAKylC,EAAewG,EAAchgC,GAAW/F,KAAKqH,OAASrH,KAAKqH,MAAQ0+B,GAAc,EACnH,KAAO,CACH,IAAI3G,EAAa7kC,EAAKgP,OAAS,EAC3B81B,EAAgB2D,EAAMz5B,OAAS,EACrB,UAAV7N,GACA0jC,EAAa,EACbC,EAAgB2D,EAAMz5B,QACL,QAAV7N,IACP0jC,EAAa7kC,EAAKgP,OAClB81B,EAAgB,GAEpBr/B,KAAKo/B,WAAaA,EAAar5B,EAC/B/F,KAAKq/B,cAAgBA,EAAgBt5B,CACzC,CACJ,CACH,cAAA4/B,GACW3lC,KAAKm/B,WACLn/B,KAAKm/B,SAASh5B,KAAOzP,KAAKoD,IAAIkG,KAAKs/B,YAAat/B,KAAKm/B,SAASh5B,MAC9DnG,KAAKm/B,SAASn5B,IAAMtP,KAAKoD,IAAIkG,KAAKo/B,WAAYp/B,KAAKm/B,SAASn5B,KAC5DhG,KAAKm/B,SAASl5B,MAAQvP,KAAKoD,IAAIkG,KAAKu/B,aAAcv/B,KAAKm/B,SAASl5B,OAChEjG,KAAKm/B,SAASj5B,OAASxP,KAAKoD,IAAIkG,KAAKq/B,cAAer/B,KAAKm/B,SAASj5B,QAE1E,CACA,QAAA09B,GACIxxC,EAAS4N,KAAK7L,QAAQyvC,SAAU,CAC5B5jC,MAER,CACH,YAAAk3B,GACO,MAAM,KAAEzR,EAAK,SAAEwM,GAAcjyB,KAAK7L,QAClC,MAAoB,QAAb89B,GAAmC,WAAbA,GAAkC,MAATxM,CAC1D,CACH,UAAAugB,GACO,OAAOhmC,KAAK7L,QAAQ+hC,QACxB,CACH,qBAAAgM,CAAsBniC,GAGf,IAAInN,EAAGO,EACP,IAHA6M,KAAKqkC,8BACLrkC,KAAKskC,mBAAmBvkC,GAEpBnN,EAAI,EAAGO,EAAO4M,EAAMhN,OAAQH,EAAIO,EAAMP,IAClCzB,EAAc4O,EAAMnN,GAAG25B,SACvBxsB,EAAM9E,OAAOrI,EAAG,GAChBO,IACAP,KAGRoN,KAAKukC,4BACT,CACH,cAAAK,GACO,IAAID,EAAa3kC,KAAK4/B,YACtB,IAAK+E,EAAY,CACb,MAAMxD,EAAanhC,KAAK7L,QAAQ4L,MAAMohC,WACtC,IAAIphC,EAAQC,KAAKD,MACbohC,EAAaphC,EAAMhN,SACnBgN,EAAQq+B,GAAOr+B,EAAOohC,IAE1BnhC,KAAK4/B,YAAc+E,EAAa3kC,KAAKimC,mBAAmBlmC,EAAOA,EAAMhN,OAAQiN,KAAK7L,QAAQ4L,MAAMo+B,cACpG,CACA,OAAOwG,CACX,CACH,kBAAAsB,CAAmBlmC,EAAOhN,EAAQorC,GAC3B,MAAM,IAAEv7B,EAAMm9B,kBAAmBmG,GAAYlmC,KACvCmmC,EAAS,GACTC,EAAU,GACV9H,EAAY5nC,KAAKoB,MAAM/E,EAASkrC,GAAclrC,EAAQorC,IAC5D,IAEIvrC,EAAGw/B,EAAGiU,EAAM9Z,EAAO+Z,EAAUC,EAAY/1B,EAAOhO,EAAY6E,EAAOkC,EAAQi9B,EAF3EC,EAAkB,EAClBC,EAAmB,EAEvB,IAAI9zC,EAAI,EAAGA,EAAIG,EAAQH,GAAK0rC,EAAU,CAUlC,GATA/R,EAAQxsB,EAAMnN,GAAG25B,MACjB+Z,EAAWtmC,KAAK2mC,wBAAwB/zC,GACxCgQ,EAAIP,KAAOkkC,EAAaD,EAAS59B,OACjC8H,EAAQ01B,EAAOK,GAAcL,EAAOK,IAAe,CAC/Ch+B,KAAM,CAAC,EACPC,GAAI,IAERhG,EAAa8jC,EAAS9jC,WACtB6E,EAAQkC,EAAS,EACZpY,EAAco7B,IAAWl7B,EAAQk7B,IAG/B,GAAIl7B,EAAQk7B,GACf,IAAI6F,EAAI,EAAGiU,EAAO9Z,EAAMx5B,OAAQq/B,EAAIiU,IAAQjU,EACxCoU,EAAeja,EAAM6F,GAChBjhC,EAAcq1C,IAAiBn1C,EAAQm1C,KACxCn/B,EAAQiB,GAAa1F,EAAK4N,EAAMjI,KAAMiI,EAAMhI,GAAInB,EAAOm/B,GACvDj9B,GAAU/G,QAPlB6E,EAAQiB,GAAa1F,EAAK4N,EAAMjI,KAAMiI,EAAMhI,GAAInB,EAAOklB,GACvDhjB,EAAS/G,EAUb2jC,EAAOzwC,KAAK2R,GACZ++B,EAAQ1wC,KAAK6T,GACbk9B,EAAkB/vC,KAAKoD,IAAIuN,EAAOo/B,GAClCC,EAAmBhwC,KAAKoD,IAAIyP,EAAQm9B,EACxC,EA7iBP,SAAwBR,EAAQnzC,GAC7BN,EAAKyzC,EAAS11B,IACV,MAAMhI,EAAKgI,EAAMhI,GACXo+B,EAAQp+B,EAAGzV,OAAS,EAC1B,IAAIH,EACJ,GAAIg0C,EAAQ7zC,EAAQ,CAChB,IAAIH,EAAI,EAAGA,EAAIg0C,IAASh0C,SACb4d,EAAMjI,KAAKC,EAAG5V,IAEzB4V,EAAGvN,OAAO,EAAG2rC,EACjB,GAER,CAkiBQC,CAAeX,EAAQnzC,GACvB,MAAM+xC,EAASqB,EAAOlyC,QAAQwyC,GACxBzB,EAAUoB,EAAQnyC,QAAQyyC,GAC1BI,EAAWC,IAAM,CACf1/B,MAAO8+B,EAAOY,IAAQ,EACtBx9B,OAAQ68B,EAAQW,IAAQ,IAEhC,MAAO,CACH/D,MAAO8D,EAAQ,GACfvsC,KAAMusC,EAAQ/zC,EAAS,GACvB+xC,OAAQgC,EAAQhC,GAChBE,QAAS8B,EAAQ9B,GACjBmB,SACAC,UAER,CACH,gBAAA5Z,CAAiBp7B,GACV,OAAOA,CACX,CACH,gBAAA++B,CAAiB/+B,EAAOmC,GACjB,OAAOg4B,GACX,CACH,gBAAAyb,CAAiBl+B,GAAQ,CACzB,eAAA+1B,CAAgBtrC,GACT,MAAMwM,EAAQC,KAAKD,MACnB,OAAIxM,EAAQ,GAAKA,EAAQwM,EAAMhN,OAAS,EAC7B,KAEJiN,KAAKmwB,iBAAiBpwB,EAAMxM,GAAOnC,MAC9C,CACH,kBAAA61C,CAAmBC,GACRlnC,KAAK8xB,iBACLoV,EAAU,EAAIA,GAElB,MAAMp+B,EAAQ9I,KAAK0+B,YAAcwI,EAAUlnC,KAAK6/B,QAChD,OD1wHGjmC,EC0wHgBoG,KAAKikC,eAAiBp7B,GAAY7I,KAAKC,MAAO6I,EAAO,GAAKA,GD1wHtD,MAAO,MC2wHlC,CACH,kBAAAq+B,CAAmBr+B,GACZ,MAAMo+B,GAAWp+B,EAAQ9I,KAAK0+B,aAAe1+B,KAAK6/B,QAClD,OAAO7/B,KAAK8xB,eAAiB,EAAIoV,EAAUA,CAC/C,CACH,YAAA1V,GACO,OAAOxxB,KAAKmwB,iBAAiBnwB,KAAKonC,eACtC,CACH,YAAAA,GACO,MAAM,IAAEvtC,EAAI,IAAEC,GAASkG,KACvB,OAAOnG,EAAM,GAAKC,EAAM,EAAIA,EAAMD,EAAM,GAAKC,EAAM,EAAID,EAAM,CACjE,CACH,UAAAsP,CAAW5V,GACJ,MAAMwM,EAAQC,KAAKD,OAAS,GAC5B,GAAIxM,GAAS,GAAKA,EAAQwM,EAAMhN,OAAQ,CACpC,MAAM2sB,EAAO3f,EAAMxM,GACnB,OAAOmsB,EAAK4H,WAAa5H,EAAK4H,SAnkB1C,SAA2B1T,EAAQrgB,EAAOmsB,GACtC,OAAO3P,GAAc6D,EAAQ,CACzB8L,OACAnsB,QACAhC,KAAM,QAEd,CA6jBqD81C,CAAkBrnC,KAAKmJ,aAAc5V,EAAOmsB,GACzF,CACA,OAAO1f,KAAKsnB,WAAatnB,KAAKsnB,SA1kB3BvX,GA0kByD/P,KAAKC,MAAMkJ,aA1kB9C,CACzBzF,MAykBqF1D,KAxkBrFzO,KAAM,UAykBV,CACH,SAAAgxC,GACO,MAAM+E,EAActnC,KAAK7L,QAAQ4L,MAC3BwnC,EAAMhvC,EAAUyH,KAAKw/B,eACrBxiC,EAAMtG,KAAKa,IAAIb,KAAKsG,IAAIuqC,IACxBxrC,EAAMrF,KAAKa,IAAIb,KAAKqF,IAAIwrC,IACxB5C,EAAa3kC,KAAK4kC,iBAClB7+B,EAAUuhC,EAAYx/B,iBAAmB,EACzC6B,EAAIg7B,EAAaA,EAAWG,OAAOz9B,MAAQtB,EAAU,EACrDkI,EAAI02B,EAAaA,EAAWK,QAAQz7B,OAASxD,EAAU,EAC7D,OAAO/F,KAAKk3B,eAAiBjpB,EAAIjR,EAAM2M,EAAI5N,EAAM4N,EAAI3M,EAAMiR,EAAIlS,EAAMkS,EAAIlS,EAAM4N,EAAI3M,EAAMiR,EAAIjR,EAAM2M,EAAI5N,CAC3G,CACH,UAAA2oC,GACO,MAAMt+B,EAAUpG,KAAK7L,QAAQiS,QAC7B,MAAgB,SAAZA,IACSA,EAENpG,KAAKilB,0BAA0BlyB,OAAS,CACnD,CACH,qBAAAy0C,CAAsB7pB,GACf,MAAM8H,EAAOzlB,KAAKylB,KACZxlB,EAAQD,KAAKC,MACb9L,EAAU6L,KAAK7L,SACf,KAAEuS,EAAK,SAAEurB,EAAS,OAAE/qB,GAAY/S,EAChCkS,EAASK,EAAKL,OACd6wB,EAAel3B,KAAKk3B,eAEpBgH,EADQl+B,KAAKD,MACOhN,QAAUsT,EAAS,EAAI,GAC3CohC,EAAK3I,GAAkBp4B,GACvB4Y,EAAQ,GACRooB,EAAaxgC,EAAOqL,WAAWvS,KAAKmJ,cACpCw+B,EAAYD,EAAWthC,QAAUshC,EAAWrgC,MAAQ,EACpDugC,EAAgBD,EAAY,EAC5BE,EAAmB,SAAS/+B,GAC9B,OAAOD,GAAY5I,EAAO6I,EAAO6+B,EACrC,EACA,IAAIG,EAAal1C,EAAGgsC,EAAWmJ,EAC3BC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EACpC,GAAiB,QAAbtW,EACA6V,EAAcD,EAAiB7nC,KAAKkG,QACpC+hC,EAAMjoC,KAAKkG,OAASuhC,EACpBU,EAAML,EAAcF,EACpBS,EAAKR,EAAiBlqB,EAAU3X,KAAO4hC,EACvCW,EAAK5qB,EAAUzX,YACZ,GAAiB,WAAb+rB,EACP6V,EAAcD,EAAiB7nC,KAAKgG,KACpCqiC,EAAK1qB,EAAU3X,IACfuiC,EAAKV,EAAiBlqB,EAAUzX,QAAU0hC,EAC1CK,EAAMH,EAAcF,EACpBO,EAAMnoC,KAAKgG,IAAMyhC,OACd,GAAiB,SAAbxV,EACP6V,EAAcD,EAAiB7nC,KAAKiG,OACpC+hC,EAAMhoC,KAAKiG,MAAQwhC,EACnBS,EAAMJ,EAAcF,EACpBQ,EAAKP,EAAiBlqB,EAAUxX,MAAQyhC,EACxCU,EAAK3qB,EAAU1X,WACZ,GAAiB,UAAbgsB,EACP6V,EAAcD,EAAiB7nC,KAAKmG,MACpCiiC,EAAKzqB,EAAUxX,KACfmiC,EAAKT,EAAiBlqB,EAAU1X,OAAS2hC,EACzCI,EAAMF,EAAcF,EACpBM,EAAMloC,KAAKmG,KAAOshC,OACf,GAAa,MAAThiB,EAAc,CACrB,GAAiB,WAAbwM,EACA6V,EAAcD,GAAkBlqB,EAAU3X,IAAM2X,EAAUzX,QAAU,EAAI,SACrE,GAAIrU,EAASogC,GAAW,CAC3B,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvBV,EAAcD,EAAiB7nC,KAAKC,MAAM0D,OAAO6kC,GAAgBrY,iBAAiB/+B,GACtF,CACAi3C,EAAK1qB,EAAU3X,IACfuiC,EAAK5qB,EAAUzX,OACf+hC,EAAMH,EAAcF,EACpBO,EAAMF,EAAMR,CAChB,MAAO,GAAa,MAAThiB,EAAc,CACrB,GAAiB,WAAbwM,EACA6V,EAAcD,GAAkBlqB,EAAUxX,KAAOwX,EAAU1X,OAAS,QACjE,GAAIpU,EAASogC,GAAW,CAC3B,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvBV,EAAcD,EAAiB7nC,KAAKC,MAAM0D,OAAO6kC,GAAgBrY,iBAAiB/+B,GACtF,CACA42C,EAAMF,EAAcF,EACpBM,EAAMF,EAAMP,EACZW,EAAKzqB,EAAUxX,KACfmiC,EAAK3qB,EAAU1X,KACnB,CACA,MAAMwiC,EAAQt2C,EAAegC,EAAQ4L,MAAMo+B,cAAeD,GACpDwK,EAAOhyC,KAAKoD,IAAI,EAAGpD,KAAKonC,KAAKI,EAAcuK,IACjD,IAAI71C,EAAI,EAAGA,EAAIsrC,EAAatrC,GAAK81C,EAAK,CAClC,MAAM1mC,EAAUhC,KAAKmJ,WAAWvW,GAC1B+1C,EAAcjiC,EAAK6L,WAAWvQ,GAC9B4mC,EAAoB1hC,EAAOqL,WAAWvQ,GACtC2E,EAAYgiC,EAAYhiC,UACxBkiC,EAAYF,EAAYtqC,MACxB+e,EAAawrB,EAAkBzhC,MAAQ,GACvCkW,EAAmBurB,EAAkBxhC,WACrCL,EAAY4hC,EAAY5hC,UACxBE,EAAY0hC,EAAY1hC,UACxB6hC,EAAiBH,EAAYG,gBAAkB,GAC/CC,EAAuBJ,EAAYI,qBACzCnK,EAAYL,GAAoBv+B,KAAMpN,EAAGyT,QACvB1E,IAAdi9B,IAGJmJ,EAAmBl/B,GAAY5I,EAAO2+B,EAAWj4B,GAC7CuwB,EACA8Q,EAAME,EAAME,EAAKE,EAAKP,EAEtBE,EAAME,EAAME,EAAKE,EAAKR,EAE1BzoB,EAAM5pB,KAAK,CACPsyC,MACAC,MACAC,MACAC,MACAC,KACAC,KACAC,KACAC,KACAlhC,MAAOV,EACPtI,MAAOwqC,EACPzrB,aACAC,mBACAtW,YACAE,YACA6hC,iBACAC,yBAER,CAGA,OAFA/oC,KAAKogC,aAAelC,EACpBl+B,KAAKqgC,aAAeyH,EACbxoB,CACX,CACH,kBAAA0hB,CAAmBrjB,GACZ,MAAM8H,EAAOzlB,KAAKylB,KACZtxB,EAAU6L,KAAK7L,SACf,SAAE89B,EAAWlyB,MAAOunC,GAAiBnzC,EACrC+iC,EAAel3B,KAAKk3B,eACpBn3B,EAAQC,KAAKD,OACb,MAAErE,EAAM,WAAEwM,EAAW,QAAEnC,EAAQ,OAAE2B,GAAY4/B,EAC7CG,EAAK3I,GAAkB3qC,EAAQuS,MAC/BsiC,EAAiBvB,EAAK1hC,EACtBkjC,EAAkBvhC,GAAU3B,EAAUijC,EACtC9+B,GAAY3R,EAAUyH,KAAKw/B,eAC3BlgB,EAAQ,GACd,IAAI1sB,EAAGO,EAAMusB,EAAM6M,EAAOx3B,EAAGE,EAAGwY,EAAW3E,EAAOzG,EAAMG,EAAY0mC,EAAWC,EAC3Ez7B,EAAe,SACnB,GAAiB,QAAbukB,EACAh9B,EAAI+K,KAAKkG,OAAS+iC,EAClBx7B,EAAYzN,KAAKopC,+BACd,GAAiB,WAAbnX,EACPh9B,EAAI+K,KAAKgG,IAAMijC,EACfx7B,EAAYzN,KAAKopC,+BACd,GAAiB,SAAbnX,EAAqB,CAC5B,MAAMnjB,EAAM9O,KAAKqpC,wBAAwB5B,GACzCh6B,EAAYqB,EAAIrB,UAChB1Y,EAAI+Z,EAAI/Z,CACZ,MAAO,GAAiB,UAAbk9B,EAAsB,CAC7B,MAAMnjB,EAAM9O,KAAKqpC,wBAAwB5B,GACzCh6B,EAAYqB,EAAIrB,UAChB1Y,EAAI+Z,EAAI/Z,CACZ,MAAO,GAAa,MAAT0wB,EAAc,CACrB,GAAiB,WAAbwM,EACAh9B,GAAK0oB,EAAU3X,IAAM2X,EAAUzX,QAAU,EAAI8iC,OAC1C,GAAIn3C,EAASogC,GAAW,CAC3B,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvBvzC,EAAI+K,KAAKC,MAAM0D,OAAO6kC,GAAgBrY,iBAAiB/+B,GAAS43C,CACpE,CACAv7B,EAAYzN,KAAKopC,yBACrB,MAAO,GAAa,MAAT3jB,EAAc,CACrB,GAAiB,WAAbwM,EACAl9B,GAAK4oB,EAAUxX,KAAOwX,EAAU1X,OAAS,EAAI+iC,OAC1C,GAAIn3C,EAASogC,GAAW,CAC3B,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvBzzC,EAAIiL,KAAKC,MAAM0D,OAAO6kC,GAAgBrY,iBAAiB/+B,EAC3D,CACAqc,EAAYzN,KAAKqpC,wBAAwB5B,GAAIh6B,SACjD,CACa,MAATgY,IACc,UAAV/pB,EACAgS,EAAe,MACE,QAAVhS,IACPgS,EAAe,WAGvB,MAAMi3B,EAAa3kC,KAAK4kC,iBACxB,IAAIhyC,EAAI,EAAGO,EAAO4M,EAAMhN,OAAQH,EAAIO,IAAQP,EAAE,CAC1C8sB,EAAO3f,EAAMnN,GACb25B,EAAQ7M,EAAK6M,MACb,MAAMoc,EAAcrB,EAAY/0B,WAAWvS,KAAKmJ,WAAWvW,IAC3DkW,EAAQ9I,KAAK6+B,gBAAgBjsC,GAAK00C,EAAYv/B,YAC9C1F,EAAOrC,KAAK2mC,wBAAwB/zC,GACpC4P,EAAaH,EAAKG,WAClB0mC,EAAY73C,EAAQk7B,GAASA,EAAMx5B,OAAS,EAC5C,MAAMu2C,EAAYJ,EAAY,EACxB7qC,EAAQsqC,EAAYtqC,MACpBkP,EAAco7B,EAAY/gC,gBAC1B0F,EAAcq7B,EAAYhhC,gBAChC,IAuCIiG,EAvCA27B,EAAgB97B,EAwCpB,GAvCIypB,GACAniC,EAAI+T,EACc,UAAd2E,IAEI87B,EADA32C,IAAMO,EAAO,EACI6M,KAAK7L,QAAQxB,QAAoB,OAAV,QAC3B,IAANC,EACUoN,KAAK7L,QAAQxB,QAAmB,QAAT,OAExB,UAKhBw2C,EAFS,QAAblX,EACmB,SAAf/pB,GAAsC,IAAbgC,GACXg/B,EAAY1mC,EAAaA,EAAa,EAC9B,WAAf0F,GACOy8B,EAAWK,QAAQz7B,OAAS,EAAI+/B,EAAY9mC,EAAaA,GAEzDmiC,EAAWK,QAAQz7B,OAAS/G,EAAa,EAGxC,SAAf0F,GAAsC,IAAbgC,EACZ1H,EAAa,EACJ,WAAf0F,EACMy8B,EAAWK,QAAQz7B,OAAS,EAAI+/B,EAAY9mC,EAE5CmiC,EAAWK,QAAQz7B,OAAS2/B,EAAY1mC,EAGzDkF,IACAyhC,IAAe,GAEF,IAAbj/B,GAAmBy+B,EAAYxgC,oBAC/BpT,GAAKyN,EAAa,EAAI9L,KAAKqF,IAAImO,MAGnCjV,EAAI6T,EACJqgC,GAAc,EAAID,GAAa1mC,EAAa,GAG5CmmC,EAAYxgC,kBAAmB,CAC/B,MAAMqhC,EAAer6B,GAAUw5B,EAAYtgC,iBACrCkB,EAASo7B,EAAWyB,QAAQxzC,GAC5ByU,EAAQs9B,EAAWwB,OAAOvzC,GAChC,IAAIoT,EAAMmjC,EAAaK,EAAaxjC,IAChCG,EAAO,EAAIqjC,EAAarjC,KAC5B,OAAOuH,GACH,IAAK,SACD1H,GAAOuD,EAAS,EAChB,MACJ,IAAK,SACDvD,GAAOuD,EAGf,OAAOkE,GACH,IAAK,SACDtH,GAAQkB,EAAQ,EAChB,MACJ,IAAK,QACDlB,GAAQkB,EACR,MACJ,IAAK,QACGzU,IAAMO,EAAO,EACbgT,GAAQkB,EACDzU,EAAI,IACXuT,GAAQkB,EAAQ,GAI5BuG,EAAW,CACPzH,OACAH,MACAqB,MAAOA,EAAQmiC,EAAaniC,MAC5BkC,OAAQA,EAASigC,EAAajgC,OAC9BlL,MAAOsqC,EAAYvgC,cAE3B,CACAkX,EAAM5pB,KAAK,CACP62B,QACAlqB,OACA8mC,aACAh1C,QAAS,CACL+V,WACA7L,QACAkP,cACAD,cACAG,UAAW87B,EACX77B,eACAF,YAAa,CACTzY,EACAE,GAEJ2Y,aAGZ,CACA,OAAO0R,CACX,CACA,uBAAA8pB,GACI,MAAM,SAAEnX,EAAS,MAAElyB,GAAWC,KAAK7L,QAEnC,IADkBoE,EAAUyH,KAAKw/B,eAE7B,MAAoB,QAAbvN,EAAqB,OAAS,QAEzC,IAAIv2B,EAAQ,SAQZ,MAPoB,UAAhBqE,EAAMrE,MACNA,EAAQ,OACe,QAAhBqE,EAAMrE,MACbA,EAAQ,QACe,UAAhBqE,EAAMrE,QACbA,EAAQ,SAELA,CACX,CACA,uBAAA2tC,CAAwB5B,GACpB,MAAM,SAAExV,EAAWlyB,OAAO,WAAEmI,EAAW,OAAER,EAAO,QAAE3B,IAAgB/F,KAAK7L,QAEjE60C,EAAiBvB,EAAK1hC,EACtB++B,EAFa9kC,KAAK4kC,iBAEEE,OAAOz9B,MACjC,IAAIoG,EACA1Y,EAoDJ,MAnDiB,SAAbk9B,EACIvqB,GACA3S,EAAIiL,KAAKiG,MAAQF,EACE,SAAfmC,EACAuF,EAAY,OACU,WAAfvF,GACPuF,EAAY,SACZ1Y,GAAK+vC,EAAS,IAEdr3B,EAAY,QACZ1Y,GAAK+vC,KAGT/vC,EAAIiL,KAAKiG,MAAQ+iC,EACE,SAAf9gC,EACAuF,EAAY,QACU,WAAfvF,GACPuF,EAAY,SACZ1Y,GAAK+vC,EAAS,IAEdr3B,EAAY,OACZ1Y,EAAIiL,KAAKmG,OAGG,UAAb8rB,EACHvqB,GACA3S,EAAIiL,KAAKmG,KAAOJ,EACG,SAAfmC,EACAuF,EAAY,QACU,WAAfvF,GACPuF,EAAY,SACZ1Y,GAAK+vC,EAAS,IAEdr3B,EAAY,OACZ1Y,GAAK+vC,KAGT/vC,EAAIiL,KAAKmG,KAAO6iC,EACG,SAAf9gC,EACAuF,EAAY,OACU,WAAfvF,GACPuF,EAAY,SACZ1Y,GAAK+vC,EAAS,IAEdr3B,EAAY,QACZ1Y,EAAIiL,KAAKiG,QAIjBwH,EAAY,QAET,CACHA,YACA1Y,IAER,CACH,iBAAA00C,GACO,GAAIzpC,KAAK7L,QAAQ4L,MAAM2H,OACnB,OAEJ,MAAMzH,EAAQD,KAAKC,MACbgyB,EAAWjyB,KAAK7L,QAAQ89B,SAC9B,MAAiB,SAAbA,GAAoC,UAAbA,EAChB,CACHjsB,IAAK,EACLG,KAAMnG,KAAKmG,KACXD,OAAQjG,EAAMsJ,OACdtD,MAAOjG,KAAKiG,OAGH,QAAbgsB,GAAmC,WAAbA,EACf,CACHjsB,IAAKhG,KAAKgG,IACVG,KAAM,EACND,OAAQlG,KAAKkG,OACbD,MAAOhG,EAAMoH,YALrB,CAQJ,CACH,cAAAqiC,GACO,MAAM,IAAE9mC,EAAMzO,SAAS,gBAAEyN,GAAmB,KAAEuE,EAAK,IAAEH,EAAI,MAAEqB,EAAM,OAAEkC,GAAYvJ,KAC3E4B,IACAgB,EAAIwG,OACJxG,EAAImK,UAAYnL,EAChBgB,EAAIuK,SAAShH,EAAMH,EAAKqB,EAAOkC,GAC/B3G,EAAI4G,UAEZ,CACA,oBAAAmgC,CAAqBv4C,GACjB,MAAMsV,EAAO1G,KAAK7L,QAAQuS,KAC1B,IAAK1G,KAAK0kC,eAAiBh+B,EAAKN,QAC5B,OAAO,EAEX,MACM7S,EADQyM,KAAKD,MACCswB,UAAWx0B,GAAIA,EAAEzK,QAAUA,GAC/C,OAAImC,GAAS,EACImT,EAAK6L,WAAWvS,KAAKmJ,WAAW5V,IACjCoT,UAET,CACX,CACH,QAAAijC,CAASjsB,GACF,MAAMjX,EAAO1G,KAAK7L,QAAQuS,KACpB9D,EAAM5C,KAAK4C,IACX0c,EAAQtf,KAAK0/B,iBAAmB1/B,KAAK0/B,eAAiB1/B,KAAKwnC,sBAAsB7pB,IACvF,IAAI/qB,EAAGO,EACP,MAAM02C,EAAW,CAACrvB,EAAIC,EAAIlY,KACjBA,EAAM8E,OAAU9E,EAAMlE,QAG3BuE,EAAIwG,OACJxG,EAAI+D,UAAYpE,EAAM8E,MACtBzE,EAAIkK,YAAcvK,EAAMlE,MACxBuE,EAAIknC,YAAYvnC,EAAM6a,YAAc,IACpCxa,EAAImnC,eAAiBxnC,EAAM8a,iBAC3Bza,EAAI4H,YACJ5H,EAAIgI,OAAO4P,EAAGzlB,EAAGylB,EAAGvlB,GACpB2N,EAAIiI,OAAO4P,EAAG1lB,EAAG0lB,EAAGxlB,GACpB2N,EAAIsI,SACJtI,EAAI4G,YAER,GAAI9C,EAAKN,QACL,IAAIxT,EAAI,EAAGO,EAAOmsB,EAAMvsB,OAAQH,EAAIO,IAAQP,EAAE,CAC1C,MAAM2D,EAAO+oB,EAAM1sB,GACf8T,EAAKE,iBACLijC,EAAS,CACL90C,EAAGwB,EAAK6xC,GACRnzC,EAAGsB,EAAK8xC,IACT,CACCtzC,EAAGwB,EAAK+xC,GACRrzC,EAAGsB,EAAKgyC,IACThyC,GAEHmQ,EAAKG,WACLgjC,EAAS,CACL90C,EAAGwB,EAAKyxC,IACR/yC,EAAGsB,EAAK0xC,KACT,CACClzC,EAAGwB,EAAK2xC,IACRjzC,EAAGsB,EAAK4xC,KACT,CACC9pC,MAAO9H,EAAK0Q,UACZI,MAAO9Q,EAAKwQ,UACZqW,WAAY7mB,EAAKuyC,eACjBzrB,iBAAkB9mB,EAAKwyC,sBAGnC,CAER,CACH,UAAAiB,GACO,MAAM,MAAE/pC,EAAM,IAAE2C,EAAMzO,SAAS,OAAE+S,EAAO,KAAER,IAAa1G,KACjD0nC,EAAaxgC,EAAOqL,WAAWvS,KAAKmJ,cACpCw+B,EAAYzgC,EAAOd,QAAUshC,EAAWrgC,MAAQ,EACtD,IAAKsgC,EACD,OAEJ,MAAMsC,EAAgBvjC,EAAK6L,WAAWvS,KAAKmJ,WAAW,IAAIxC,UACpDmhC,EAAc9nC,KAAKqgC,aACzB,IAAI+H,EAAIE,EAAID,EAAIE,EACZvoC,KAAKk3B,gBACLkR,EAAKv/B,GAAY5I,EAAOD,KAAKmG,KAAMwhC,GAAaA,EAAY,EAC5DW,EAAKz/B,GAAY5I,EAAOD,KAAKiG,MAAOgkC,GAAiBA,EAAgB,EACrE5B,EAAKE,EAAKT,IAEVO,EAAKx/B,GAAY5I,EAAOD,KAAKgG,IAAK2hC,GAAaA,EAAY,EAC3DY,EAAK1/B,GAAY5I,EAAOD,KAAKkG,OAAQ+jC,GAAiBA,EAAgB,EACtE7B,EAAKE,EAAKR,GAEdllC,EAAIwG,OACJxG,EAAI+D,UAAY+gC,EAAWrgC,MAC3BzE,EAAIkK,YAAc46B,EAAWrpC,MAC7BuE,EAAI4H,YACJ5H,EAAIgI,OAAOw9B,EAAIC,GACfzlC,EAAIiI,OAAOy9B,EAAIC,GACf3lC,EAAIsI,SACJtI,EAAI4G,SACR,CACH,UAAA0gC,CAAWvsB,GAEJ,IADoB3d,KAAK7L,QAAQ4L,MAChBqG,QACb,OAEJ,MAAMxD,EAAM5C,KAAK4C,IACXyI,EAAOrL,KAAKypC,oBACdp+B,GACAE,GAAS3I,EAAKyI,GAElB,MAAMiU,EAAQtf,KAAK+gC,cAAcpjB,GACjC,IAAK,MAAMpnB,KAAQ+oB,EAAM,CACrB,MAAM6qB,EAAoB5zC,EAAKpC,QACzBmyC,EAAW/vC,EAAK8L,KAGtB+K,GAAWxK,EAFGrM,EAAKg2B,MAEI,EADbh2B,EAAK4yC,WACc7C,EAAU6D,EAC3C,CACI9+B,GACAG,GAAW5I,EAEnB,CACH,SAAAwnC,GACO,MAAM,IAAExnC,EAAMzO,SAAS,SAAE89B,EAAS,MAAE3qB,EAAM,QAAE3U,IAAgBqN,KAC5D,IAAKsH,EAAMlB,QACP,OAEJ,MAAM/D,EAAOgN,GAAO/H,EAAMjF,MACpB0D,EAAUoJ,GAAU7H,EAAMvB,SAC1BrK,EAAQ4L,EAAM5L,MACpB,IAAI2K,EAAShE,EAAKG,WAAa,EACd,WAAbyvB,GAAsC,WAAbA,GAAyBpgC,EAASogC,IAC3D5rB,GAAUN,EAAQG,OACd7U,EAAQiW,EAAMC,QACdlB,GAAUhE,EAAKG,YAAc8E,EAAMC,KAAKxU,OAAS,KAGrDsT,GAAUN,EAAQC,IAEtB,MAAM,OAAEqkC,EAAO,OAAEC,EAAO,SAAEx8B,EAAS,SAAE5D,GAnlC7C,SAAmBxG,EAAO2C,EAAQ4rB,EAAUv2B,GACxC,MAAM,IAAEsK,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,MAAEhG,GAAWyD,GAC3C,UAAEia,EAAU,OAAEha,GAAY1D,EAChC,IACI6N,EAAUu8B,EAAQC,EADlBpgC,EAAW,EAEf,MAAMX,EAASrD,EAASF,EAClBqB,EAAQpB,EAAQE,EACtB,GAAIzC,EAAMwzB,eAAgB,CAEtB,GADAmT,EAAS1uC,GAAeD,EAAOyK,EAAMF,GACjCpU,EAASogC,GAAW,CACpB,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvB8B,EAAS3mC,EAAO6kC,GAAgBrY,iBAAiB/+B,GAASmY,EAASlD,CACvE,MACIikC,EADoB,WAAbrY,GACGtU,EAAUzX,OAASyX,EAAU3X,KAAO,EAAIuD,EAASlD,EAElD03B,GAAer6B,EAAOuuB,EAAU5rB,GAE7CyH,EAAW7H,EAAQE,CACvB,KAAO,CACH,GAAItU,EAASogC,GAAW,CACpB,MAAMuW,EAAiBh3C,OAAOsB,KAAKm/B,GAAU,GACvC7gC,EAAQ6gC,EAASuW,GACvB6B,EAAS1mC,EAAO6kC,GAAgBrY,iBAAiB/+B,GAASiW,EAAQhB,CACtE,MACIgkC,EADoB,WAAbpY,GACGtU,EAAUxX,KAAOwX,EAAU1X,OAAS,EAAIoB,EAAQhB,EAEjD03B,GAAer6B,EAAOuuB,EAAU5rB,GAE7CikC,EAAS3uC,GAAeD,EAAOwK,EAAQF,GACvCkE,EAAwB,SAAb+nB,GAAuBj7B,EAAUA,CAChD,CACA,MAAO,CACHqzC,SACAC,SACAx8B,WACA5D,WAER,CA6iC2DqgC,CAAUvqC,KAAMqG,EAAQ4rB,EAAUv2B,GACrF0R,GAAWxK,EAAK0E,EAAMC,KAAM,EAAG,EAAGlF,EAAM,CACpChE,MAAOiJ,EAAMjJ,MACbyP,WACA5D,WACAuD,UAAWuxB,GAAWtjC,EAAOu2B,EAAUt/B,GACvC+a,aAAc,SACdF,YAAa,CACT68B,EACAC,IAGZ,CACA,IAAA/qB,CAAK5B,GACI3d,KAAK0kC,eAGV1kC,KAAK0pC,iBACL1pC,KAAK4pC,SAASjsB,GACd3d,KAAKgqC,aACLhqC,KAAKoqC,YACLpqC,KAAKkqC,WAAWvsB,GACpB,CACH,OAAA+Y,GACO,MAAMrqB,EAAOrM,KAAK7L,QACZq2C,EAAKn+B,EAAKtM,OAASsM,EAAKtM,MAAM42B,GAAK,EACnC8T,EAAKt4C,EAAeka,EAAK3F,MAAQ2F,EAAK3F,KAAKiwB,GAAI,GAC/C+T,EAAKv4C,EAAeka,EAAKnF,QAAUmF,EAAKnF,OAAOyvB,EAAG,GACxD,OAAK32B,KAAK0kC,cAAgB1kC,KAAKuf,OAAS2f,GAAMztC,UAAU8tB,KAUjD,CACH,CACIoX,EAAG8T,EACHlrB,KAAO5B,IACH3d,KAAK0pC,iBACL1pC,KAAK4pC,SAASjsB,GACd3d,KAAKoqC,cAGb,CACIzT,EAAG+T,EACHnrB,KAAM,KACFvf,KAAKgqC,eAGb,CACIrT,EAAG6T,EACHjrB,KAAO5B,IACH3d,KAAKkqC,WAAWvsB,MA3BjB,CACH,CACIgZ,EAAG6T,EACHjrB,KAAO5B,IACH3d,KAAKuf,KAAK5B,KA2B9B,CACH,uBAAAsH,CAAwB1zB,GACjB,MAAMovC,EAAQ3gC,KAAKC,MAAMkyB,+BACnBwY,EAAS3qC,KAAKylB,KAAO,SACrBtN,EAAS,GACf,IAAIvlB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAOwtC,EAAM5tC,OAAQH,EAAIO,IAAQP,EAAE,CAC1C,MAAMkrB,EAAO6iB,EAAM/tC,GACfkrB,EAAK6sB,KAAY3qC,KAAK9O,IAAQK,GAAQusB,EAAKvsB,OAASA,GACpD4mB,EAAOziB,KAAKooB,EAEpB,CACA,OAAO3F,CACX,CACH,uBAAAwuB,CAAwBpzC,GAEjB,OAAO8b,GADMrP,KAAK7L,QAAQ4L,MAAMwS,WAAWvS,KAAKmJ,WAAW5V,IACxC8O,KACvB,CACH,UAAAuoC,GACO,MAAMC,EAAW7qC,KAAK2mC,wBAAwB,GAAGnkC,WACjD,OAAQxC,KAAKk3B,eAAiBl3B,KAAKqH,MAAQrH,KAAKuJ,QAAUshC,CAC9D,EAGJ,MAAMC,GACF,WAAAvpC,CAAYhQ,EAAM8P,EAAO0C,GACrB/D,KAAKzO,KAAOA,EACZyO,KAAKqB,MAAQA,EACbrB,KAAK+D,SAAWA,EAChB/D,KAAKsf,MAAQ9tB,OAAOoC,OAAO,KAC/B,CACA,SAAAm3C,CAAUx5C,GACN,OAAOC,OAAOC,UAAUu5C,cAAcr5C,KAAKqO,KAAKzO,KAAKE,UAAWF,EAAKE,UACzE,CACH,QAAAw5C,CAAS10C,GACF,MAAM20C,EAAQ15C,OAAOkgB,eAAenb,GACpC,IAAI40C,GAiEZ,SAA2BD,GACvB,MAAO,OAAQA,GAAS,aAAcA,CAC1C,EAlEYE,CAAkBF,KAClBC,EAAcnrC,KAAKirC,SAASC,IAEhC,MAAM5rB,EAAQtf,KAAKsf,MACbpuB,EAAKqF,EAAKrF,GACVmQ,EAAQrB,KAAKqB,MAAQ,IAAMnQ,EACjC,IAAKA,EACD,MAAM,IAAIyhB,MAAM,2BAA6Bpc,GAEjD,OAAIrF,KAAMouB,IAGVA,EAAMpuB,GAAMqF,EAyBpB,SAA0BA,EAAM8K,EAAO8pC,GACnC,MAAME,EAAe/2C,EAAM9C,OAAOoC,OAAO,MAAO,CAC5Cu3C,EAAcvmC,GAASvF,IAAI8rC,GAAe,CAAC,EAC3CvmC,GAASvF,IAAIgC,GACb9K,EAAKqO,WAETA,GAASpF,IAAI6B,EAAOgqC,GAChB90C,EAAK+0C,eAOb,SAAuBjqC,EAAOkqC,GAC1B/5C,OAAOsB,KAAKy4C,GAAQrwC,QAASif,IACzB,MAAMqxB,EAAgBrxB,EAAS7kB,MAAM,KAC/Bm2C,EAAaD,EAAc7rB,MAC3B+rB,EAAc,CAChBrqC,GACFm2B,OAAOgU,GAAe54B,KAAK,KACvBvd,EAAQk2C,EAAOpxB,GAAU7kB,MAAM,KAC/B6O,EAAa9O,EAAMsqB,MACnBzb,EAAc7O,EAAMud,KAAK,KAC/BhO,GAASZ,MAAM0nC,EAAaD,EAAYvnC,EAAaC,IAE7D,CAlBQwnC,CAActqC,EAAO9K,EAAK+0C,eAE1B/0C,EAAK0K,aACL2D,GAASd,SAASzC,EAAO9K,EAAK0K,YAEtC,CArCQ2qC,CAAiBr1C,EAAM8K,EAAO8pC,GAC1BnrC,KAAK+D,UACLa,GAASb,SAASxN,EAAKrF,GAAIqF,EAAKyK,YALzBK,CAQf,CACH,GAAAhC,CAAInO,GACG,OAAO8O,KAAKsf,MAAMpuB,EACtB,CACH,UAAA26C,CAAWt1C,GACJ,MAAM+oB,EAAQtf,KAAKsf,MACbpuB,EAAKqF,EAAKrF,GACVmQ,EAAQrB,KAAKqB,MACfnQ,KAAMouB,UACCA,EAAMpuB,GAEbmQ,GAASnQ,KAAM0T,GAASvD,YACjBuD,GAASvD,GAAOnQ,GACnB8O,KAAK+D,iBACE/C,GAAU9P,GAG7B,EAiCJ,MAAM46C,GACF,WAAAvqC,GACIvB,KAAK+rC,YAAc,IAAIjB,GAAcrkB,GAAmB,YAAY,GACpEzmB,KAAKmC,SAAW,IAAI2oC,GAAcxN,GAAS,YAC3Ct9B,KAAKwD,QAAU,IAAIsnC,GAAct5C,OAAQ,WACzCwO,KAAK2D,OAAS,IAAImnC,GAAc5L,GAAO,UACvCl/B,KAAKgsC,iBAAmB,CACpBhsC,KAAK+rC,YACL/rC,KAAK2D,OACL3D,KAAKmC,SAEb,CACH,GAAA0Q,IAAOvgB,GACA0N,KAAKisC,MAAM,WAAY35C,EAC3B,CACA,MAAAkuB,IAAUluB,GACN0N,KAAKisC,MAAM,aAAc35C,EAC7B,CACH,cAAA45C,IAAkB55C,GACX0N,KAAKisC,MAAM,WAAY35C,EAAM0N,KAAK+rC,YACtC,CACH,WAAAlkB,IAAev1B,GACR0N,KAAKisC,MAAM,WAAY35C,EAAM0N,KAAKmC,SACtC,CACH,UAAAgqC,IAAc75C,GACP0N,KAAKisC,MAAM,WAAY35C,EAAM0N,KAAKwD,QACtC,CACH,SAAA4oC,IAAa95C,GACN0N,KAAKisC,MAAM,WAAY35C,EAAM0N,KAAK2D,OACtC,CACH,aAAA0oC,CAAcn7C,GACP,OAAO8O,KAAKssC,KAAKp7C,EAAI8O,KAAK+rC,YAAa,aAC3C,CACH,UAAAQ,CAAWr7C,GACJ,OAAO8O,KAAKssC,KAAKp7C,EAAI8O,KAAKmC,SAAU,UACxC,CACH,SAAAqqC,CAAUt7C,GACH,OAAO8O,KAAKssC,KAAKp7C,EAAI8O,KAAKwD,QAAS,SACvC,CACH,QAAAipC,CAASv7C,GACF,OAAO8O,KAAKssC,KAAKp7C,EAAI8O,KAAK2D,OAAQ,QACtC,CACH,iBAAA+oC,IAAqBp6C,GACd0N,KAAKisC,MAAM,aAAc35C,EAAM0N,KAAK+rC,YACxC,CACH,cAAAY,IAAkBr6C,GACX0N,KAAKisC,MAAM,aAAc35C,EAAM0N,KAAKmC,SACxC,CACH,aAAAyqC,IAAiBt6C,GACV0N,KAAKisC,MAAM,aAAc35C,EAAM0N,KAAKwD,QACxC,CACH,YAAAqpC,IAAgBv6C,GACT0N,KAAKisC,MAAM,aAAc35C,EAAM0N,KAAK2D,OACxC,CACH,KAAAsoC,CAAM1pB,EAAQjwB,EAAMw6C,GACb,IACOx6C,GACL4I,QAAS6xC,IACP,MAAMC,EAAMF,GAAiB9sC,KAAKitC,oBAAoBF,GAClDD,GAAiBE,EAAIjC,UAAUgC,IAAQC,IAAQhtC,KAAKwD,SAAWupC,EAAI77C,GACnE8O,KAAKktC,MAAM3qB,EAAQyqB,EAAKD,GAExBt6C,EAAKs6C,EAAMx2C,IACP,MAAM42C,EAAUL,GAAiB9sC,KAAKitC,oBAAoB12C,GAC1DyJ,KAAKktC,MAAM3qB,EAAQ4qB,EAAS52C,MAI5C,CACH,KAAA22C,CAAM3qB,EAAQ6qB,EAAUC,GACjB,MAAMC,EAAcz3C,EAAY0sB,GAChCnwB,EAASi7C,EAAU,SAAWC,GAAc,GAAID,GAChDD,EAAS7qB,GAAQ8qB,GACjBj7C,EAASi7C,EAAU,QAAUC,GAAc,GAAID,EACnD,CACH,mBAAAJ,CAAoB17C,GACb,IAAI,IAAIqB,EAAI,EAAGA,EAAIoN,KAAKgsC,iBAAiBj5C,OAAQH,IAAI,CACjD,MAAMo6C,EAAMhtC,KAAKgsC,iBAAiBp5C,GAClC,GAAIo6C,EAAIjC,UAAUx5C,GACd,OAAOy7C,CAEf,CACA,OAAOhtC,KAAKwD,OAChB,CACH,IAAA8oC,CAAKp7C,EAAI47C,EAAev7C,GACjB,MAAMgF,EAAOu2C,EAAcztC,IAAInO,GAC/B,QAAayQ,IAATpL,EACA,MAAM,IAAIoc,MAAM,IAAMzhB,EAAK,yBAA2BK,EAAO,KAEjE,OAAOgF,CACX,EAEJ,IAAI62C,GAA2B,IAAItB,GAEnC,MAAMyB,GACF,WAAAhsC,GACIvB,KAAKwtC,MAAQ,EACjB,CACH,MAAAC,CAAOxtC,EAAOytC,EAAMp7C,EAAM4gB,GACN,eAATw6B,IACA1tC,KAAKwtC,MAAQxtC,KAAK2tC,mBAAmB1tC,GAAO,GAC5CD,KAAKye,QAAQze,KAAKwtC,MAAOvtC,EAAO,YAEpC,MAAMgB,EAAciS,EAASlT,KAAKwB,aAAavB,GAAOiT,OAAOA,GAAUlT,KAAKwB,aAAavB,GACnFkY,EAASnY,KAAKye,QAAQxd,EAAahB,EAAOytC,EAAMp7C,GAKtD,MAJa,iBAATo7C,IACA1tC,KAAKye,QAAQxd,EAAahB,EAAO,QACjCD,KAAKye,QAAQze,KAAKwtC,MAAOvtC,EAAO,cAE7BkY,CACX,CACH,OAAAsG,CAAQxd,EAAahB,EAAOytC,EAAMp7C,GAC3BA,EAAOA,GAAQ,CAAC,EAChB,IAAK,MAAMs7C,KAAc3sC,EAAY,CACjC,MAAM4sC,EAASD,EAAWC,OAO1B,IAAyC,IAArCz7C,EANWy7C,EAAOH,GACP,CACXztC,EACA3N,EACAs7C,EAAWz5C,SAEc05C,IAAqBv7C,EAAKw7C,WACnD,OAAO,CAEf,CACA,OAAO,CACX,CACA,UAAAC,GACS58C,EAAc6O,KAAKsgC,UACpBtgC,KAAKguC,UAAYhuC,KAAKsgC,OACtBtgC,KAAKsgC,YAAS3+B,EAEtB,CACH,YAAAH,CAAavB,GACN,GAAID,KAAKsgC,OACL,OAAOtgC,KAAKsgC,OAEhB,MAAMr/B,EAAcjB,KAAKsgC,OAAStgC,KAAK2tC,mBAAmB1tC,GAE1D,OADAD,KAAKiuC,oBAAoBhuC,GAClBgB,CACX,CACA,kBAAA0sC,CAAmB1tC,EAAOujB,GACtB,MAAMf,EAASxiB,GAASA,EAAMwiB,OACxBtuB,EAAUhC,EAAeswB,EAAOtuB,SAAWsuB,EAAOtuB,QAAQqP,QAAS,CAAC,GACpEA,EAWb,SAAoBif,GACjB,MAAMyrB,EAAW,CAAC,EACZ1qC,EAAU,GACV1Q,EAAOtB,OAAOsB,KAAKs6C,GAAS5pC,QAAQ8b,OAC1C,IAAI,IAAI1sB,EAAI,EAAGA,EAAIE,EAAKC,OAAQH,IAC5B4Q,EAAQ9N,KAAK03C,GAASZ,UAAU15C,EAAKF,KAEzC,MAAM8R,EAAQ+d,EAAOjf,SAAW,GAChC,IAAI,IAAI5Q,EAAI,EAAGA,EAAI8R,EAAM3R,OAAQH,IAAI,CACjC,MAAMi7C,EAASnpC,EAAM9R,IACY,IAA7B4Q,EAAQvP,QAAQ45C,KAChBrqC,EAAQ9N,KAAKm4C,GACbK,EAASL,EAAO38C,KAAM,EAE9B,CACA,MAAO,CACHsS,UACA0qC,WAER,CA9BwBC,CAAW1rB,GAC3B,OAAmB,IAAZtuB,GAAsBqvB,EAuCrC,SAA2BvjB,GAAO,QAAEuD,EAAQ,SAAE0qC,GAAa/5C,EAASqvB,GAChE,MAAMrL,EAAS,GACTnW,EAAU/B,EAAMkJ,aACtB,IAAK,MAAM0kC,KAAUrqC,EAAQ,CACzB,MAAMtS,EAAK28C,EAAO38C,GACZmb,EAAO+hC,GAAQj6C,EAAQjD,GAAKsyB,GACrB,OAATnX,GAGJ8L,EAAOziB,KAAK,CACRm4C,SACA15C,QAASk6C,GAAWpuC,EAAMwiB,OAAQ,CAC9BorB,SACAnpC,MAAOwpC,EAASh9C,IACjBmb,EAAMrK,IAEjB,CACA,OAAOmW,CACX,CAzDgDm2B,CAAkBruC,EAAOuD,EAASrP,EAASqvB,GAAhD,EACvC,CACH,mBAAAyqB,CAAoBhuC,GACb,MAAMsuC,EAAsBvuC,KAAKguC,WAAa,GACxC/sC,EAAcjB,KAAKsgC,OACnB6C,EAAO,CAAC/sC,EAAGC,IAAID,EAAE8c,OAAQne,IAAKsB,EAAEm4C,KAAMv5C,GAAIF,EAAE84C,OAAO38C,KAAO+D,EAAE44C,OAAO38C,KACzE8O,KAAKye,QAAQ0kB,EAAKoL,EAAqBttC,GAAchB,EAAO,QAC5DD,KAAKye,QAAQ0kB,EAAKliC,EAAastC,GAAsBtuC,EAAO,QAChE,EAsBJ,SAASmuC,GAAQj6C,EAASqvB,GACtB,OAAKA,IAAmB,IAAZrvB,GAGI,IAAZA,EACO,CAAC,EAELA,EALI,IAMf,CAoBA,SAASk6C,GAAW5rB,GAAQ,OAAEorB,EAAO,MAAEnpC,GAAU2H,EAAMrK,GACnD,MAAMlP,EAAO2vB,EAAOgsB,gBAAgBZ,GAC9B39B,EAASuS,EAAO4H,gBAAgBhe,EAAMvZ,GAI5C,OAHI4R,GAASmpC,EAAOjpC,UAChBsL,EAAOxa,KAAKm4C,EAAOjpC,UAEhB6d,EAAO6H,eAAepa,EAAQlO,EAAS,CAC1C,IACD,CACCuR,YAAY,EACZC,WAAW,EACXH,SAAS,GAEjB,CAEA,SAASq7B,GAAan9C,EAAM4C,GACxB,MAAMw6C,EAAkB/pC,GAAS9C,SAASvQ,IAAS,CAAC,EAEpD,QADwB4C,EAAQ2N,UAAY,CAAC,GAAGvQ,IAAS,CAAC,GACpCwR,WAAa5O,EAAQ4O,WAAa4rC,EAAgB5rC,WAAa,GACzF,CAaA,SAAS6rC,GAAc19C,GACnB,GAAW,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,EAC5B,OAAOA,CAEf,CACA,SAAS29C,GAAiB5c,GACtB,MAAiB,QAAbA,GAAmC,WAAbA,EACf,IAEM,SAAbA,GAAoC,UAAbA,EAChB,SADX,CAGJ,CACA,SAAS6c,GAAc59C,KAAO69C,GAC1B,GAAIH,GAAc19C,GACd,OAAOA,EAEX,IAAK,MAAMmb,KAAQ0iC,EAAa,CAC5B,MAAMtpB,EAAOpZ,EAAKoZ,MAAQopB,GAAiBxiC,EAAK4lB,WAAa/gC,EAAG6B,OAAS,GAAK67C,GAAc19C,EAAG,GAAG89C,eAClG,GAAIvpB,EACA,OAAOA,CAEf,CACA,MAAM,IAAI9S,MAAM,6BAA6BzhB,uDACjD,CACA,SAAS+9C,GAAmB/9C,EAAIu0B,EAAMuC,GAClC,GAAIA,EAAQvC,EAAO,YAAcv0B,EAC7B,MAAO,CACHu0B,OAGZ,CAgEA,SAASypB,GAAYzsB,GACjB,MAAMtuB,EAAUsuB,EAAOtuB,UAAYsuB,EAAOtuB,QAAU,CAAC,GACrDA,EAAQqP,QAAUrR,EAAegC,EAAQqP,QAAS,CAAC,GACnDrP,EAAQwP,OAzDZ,SAA0B8e,EAAQtuB,GAC9B,MAAMg7C,EAAgBnuC,GAAUyhB,EAAOlxB,OAAS,CAC5CoS,OAAQ,CAAC,GAEPyrC,EAAej7C,EAAQwP,QAAU,CAAC,EAClC0rC,EAAiBX,GAAajsB,EAAOlxB,KAAM4C,GAC3CwP,EAASnS,OAAOoC,OAAO,MA8C7B,OA7CApC,OAAOsB,KAAKs8C,GAAcl0C,QAAShK,IAC/B,MAAMo+C,EAAYF,EAAal+C,GAC/B,IAAKW,EAASy9C,GACV,OAAO9/B,QAAQ+/B,MAAM,0CAA0Cr+C,KAEnE,GAAIo+C,EAAUp9B,OACV,OAAO1C,QAAQC,KAAK,kDAAkDve,KAE1E,MAAMu0B,EAAOqpB,GAAc59C,EAAIo+C,EAxBvC,SAAkCp+C,EAAIuxB,GAClC,GAAIA,EAAOla,MAAQka,EAAOla,KAAKzG,SAAU,CACrC,MAAM0tC,EAAU/sB,EAAOla,KAAKzG,SAASoR,OAAQhV,GAAIA,EAAEmqB,UAAYn3B,GAAMgN,EAAEqqB,UAAYr3B,GACnF,GAAIs+C,EAAQz8C,OACR,OAAOk8C,GAAmB/9C,EAAI,IAAKs+C,EAAQ,KAAOP,GAAmB/9C,EAAI,IAAKs+C,EAAQ,GAE9F,CACA,MAAO,CAAC,CACZ,CAgBkDC,CAAyBv+C,EAAIuxB,GAAS7d,GAASjB,OAAO2rC,EAAU/9C,OACpGm+C,EA5Dd,SAAmCjqB,EAAM1iB,GACrC,OAAO0iB,IAAS1iB,EAAY,UAAY,SAC5C,CA0D0B4sC,CAA0BlqB,EAAM4pB,GAC5CO,EAAsBT,EAAcxrC,QAAU,CAAC,EACrDA,EAAOzS,GAAMwD,EAAQlD,OAAOoC,OAAO,MAAO,CACtC,CACI6xB,QAEJ6pB,EACAM,EAAoBnqB,GACpBmqB,EAAoBF,OAG5BjtB,EAAOla,KAAKzG,SAAS5G,QAAS8sB,IAC1B,MAAMz2B,EAAOy2B,EAAQz2B,MAAQkxB,EAAOlxB,KAC9BwR,EAAYilB,EAAQjlB,WAAa2rC,GAAan9C,EAAM4C,GAEpDy7C,GADkB5uC,GAAUzP,IAAS,CAAC,GACAoS,QAAU,CAAC,EACvDnS,OAAOsB,KAAK88C,GAAqB10C,QAAS20C,IACtC,MAAMpqB,EAtFlB,SAAmCv0B,EAAI6R,GACnC,IAAI0iB,EAAOv0B,EAMX,MALW,YAAPA,EACAu0B,EAAO1iB,EACO,YAAP7R,IACPu0B,EAAqB,MAAd1iB,EAAoB,IAAM,KAE9B0iB,CACX,CA8EyBqqB,CAA0BD,EAAW9sC,GAC5C7R,EAAK82B,EAAQvC,EAAO,WAAaA,EACvC9hB,EAAOzS,GAAMyS,EAAOzS,IAAOM,OAAOoC,OAAO,MACzCc,EAAQiP,EAAOzS,GAAK,CAChB,CACIu0B,QAEJ2pB,EAAal+C,GACb0+C,EAAoBC,SAIhCr+C,OAAOsB,KAAK6Q,GAAQzI,QAASlH,IACzB,MAAM0P,EAAQC,EAAO3P,GACrBU,EAAQgP,EAAO,CACXkB,GAASjB,OAAOD,EAAMnS,MACtBqT,GAASlB,UAGVC,CACX,CAIqBosC,CAAiBttB,EAAQtuB,EAC9C,CACA,SAAS67C,GAASznC,GAId,OAHAA,EAAOA,GAAQ,CAAC,GACXzG,SAAWyG,EAAKzG,UAAY,GACjCyG,EAAKuiB,OAASviB,EAAKuiB,QAAU,GACtBviB,CACX,CAOA,MAAM0nC,GAAW,IAAIpxC,IACfqxC,GAAa,IAAI59B,IACvB,SAAS69B,GAAWlxC,EAAUmxC,GAC1B,IAAIt9C,EAAOm9C,GAAS5wC,IAAIJ,GAMxB,OALKnM,IACDA,EAAOs9C,IACPH,GAASzwC,IAAIP,EAAUnM,GACvBo9C,GAAWr9B,IAAI/f,IAEZA,CACX,CACA,MAAMu9C,GAAa,CAAC7wC,EAAKrK,EAAKnB,KAC1B,MAAMqY,EAAOnX,EAAiBC,EAAKnB,QACtB2N,IAAT0K,GACA7M,EAAIqT,IAAIxG,IAGhB,MAAMikC,GACF,WAAA/uC,CAAYkhB,GACRziB,KAAKuwC,QAzBb,SAAoB9tB,GAIhB,OAHAA,EAASA,GAAU,CAAC,GACbla,KAAOynC,GAASvtB,EAAOla,MAC9B2mC,GAAYzsB,GACLA,CACX,CAoBuB+tB,CAAW/tB,GAC1BziB,KAAKywC,YAAc,IAAI5xC,IACvBmB,KAAK0wC,eAAiB,IAAI7xC,GAC9B,CACA,YAAIoD,GACA,OAAOjC,KAAKuwC,QAAQtuC,QACxB,CACA,QAAI1Q,GACA,OAAOyO,KAAKuwC,QAAQh/C,IACxB,CACA,QAAIA,CAAKA,GACLyO,KAAKuwC,QAAQh/C,KAAOA,CACxB,CACA,QAAIgX,GACA,OAAOvI,KAAKuwC,QAAQhoC,IACxB,CACA,QAAIA,CAAKA,GACLvI,KAAKuwC,QAAQhoC,KAAOynC,GAASznC,EACjC,CACA,WAAIpU,GACA,OAAO6L,KAAKuwC,QAAQp8C,OACxB,CACA,WAAIA,CAAQA,GACR6L,KAAKuwC,QAAQp8C,QAAUA,CAC3B,CACA,WAAIqP,GACA,OAAOxD,KAAKuwC,QAAQ/sC,OACxB,CACA,MAAAue,GACI,MAAMU,EAASziB,KAAKuwC,QACpBvwC,KAAK2wC,aACLzB,GAAYzsB,EAChB,CACA,UAAAkuB,GACI3wC,KAAKywC,YAAYG,QACjB5wC,KAAK0wC,eAAeE,OACxB,CACH,gBAAAxmB,CAAiBymB,GACV,OAAOV,GAAWU,EAAa,IAAI,CAC3B,CACI,YAAYA,IACZ,KAGhB,CACH,yBAAAljB,CAA0BkjB,EAAanjB,GAChC,OAAOyiB,GAAW,GAAGU,gBAA0BnjB,IAAc,IAAI,CACzD,CACI,YAAYmjB,iBAA2BnjB,IACvC,eAAeA,KAEnB,CACI,YAAYmjB,IACZ,KAGhB,CACH,uBAAAxjB,CAAwBwjB,EAAa1jB,GAC9B,OAAOgjB,GAAW,GAAGU,KAAe1jB,IAAe,IAAI,CAC/C,CACI,YAAY0jB,cAAwB1jB,IACpC,YAAY0jB,IACZ,YAAY1jB,IACZ,KAGhB,CACH,eAAAshB,CAAgBZ,GACT,MAAM38C,EAAK28C,EAAO38C,GAElB,OAAOi/C,GAAW,GADLnwC,KAAKzO,eACkBL,IAAM,IAAI,CACtC,CACI,WAAWA,OACR28C,EAAOiD,wBAA0B,KAGpD,CACH,aAAAC,CAAcC,EAAWC,GAClB,MAAMR,EAAczwC,KAAKywC,YACzB,IAAIjgC,EAAQigC,EAAYpxC,IAAI2xC,GAK5B,OAJKxgC,IAASygC,IACVzgC,EAAQ,IAAI3R,IACZ4xC,EAAYjxC,IAAIwxC,EAAWxgC,IAExBA,CACX,CACH,eAAA6Z,CAAgB2mB,EAAWE,EAAUD,GAC9B,MAAM,QAAE98C,EAAQ,KAAE5C,GAAUyO,KACtBwQ,EAAQxQ,KAAK+wC,cAAcC,EAAWC,GACtC1qB,EAAS/V,EAAMnR,IAAI6xC,GACzB,GAAI3qB,EACA,OAAOA,EAEX,MAAMrW,EAAS,IAAIoC,IACnB4+B,EAASh2C,QAASpI,IACVk+C,IACA9gC,EAAO2C,IAAIm+B,GACXl+C,EAAKoI,QAASlH,GAAMq8C,GAAWngC,EAAQ8gC,EAAWh9C,KAEtDlB,EAAKoI,QAASlH,GAAMq8C,GAAWngC,EAAQ/b,EAASH,IAChDlB,EAAKoI,QAASlH,GAAMq8C,GAAWngC,EAAQlP,GAAUzP,IAAS,CAAC,EAAGyC,IAC9DlB,EAAKoI,QAASlH,GAAMq8C,GAAWngC,EAAQtL,GAAU5Q,IACjDlB,EAAKoI,QAASlH,GAAMq8C,GAAWngC,EAAQjP,GAAajN,MAExD,MAAM4G,EAAQtJ,MAAM8T,KAAK8K,GAOzB,OANqB,IAAjBtV,EAAM7H,QACN6H,EAAMlF,KAAKlE,OAAOoC,OAAO,OAEzBs8C,GAAW15C,IAAI06C,IACf1gC,EAAMhR,IAAI0xC,EAAUt2C,GAEjBA,CACX,CACH,iBAAAu2C,GACO,MAAM,QAAEh9C,EAAQ,KAAE5C,GAAUyO,KAC5B,MAAO,CACH7L,EACA6M,GAAUzP,IAAS,CAAC,EACpBqT,GAAS9C,SAASvQ,IAAS,CAAC,EAC5B,CACIA,QAEJqT,GACA3D,GAER,CACH,mBAAAssB,CAAoBrd,EAAQod,EAAOtrB,EAASmO,EAAW,CAChD,KAEA,MAAMgI,EAAS,CACXgL,SAAS,IAEP,SAAE/tB,EAAS,YAAEg8C,GAAiBC,GAAYrxC,KAAK0wC,eAAgBxgC,EAAQC,GAC7E,IAAIhc,EAAUiB,GAsCtB,SAAqB8b,EAAOoc,GACxB,MAAM,aAAE7a,EAAa,YAAEO,GAAiBxR,GAAa0P,GACrD,IAAK,MAAMjC,KAAQqe,EAAM,CACrB,MAAM/Z,EAAad,EAAaxD,GAC1BuE,EAAYR,EAAY/D,GACxB7d,GAASoiB,GAAaD,IAAerC,EAAMjC,GACjD,GAAIsE,IAAerd,EAAW9E,IAAUkgD,GAAYlgD,KAAWoiB,GAAaniB,EAAQD,GAChF,OAAO,CAEf,CACA,OAAO,CACX,EAhDYmgD,CAAYn8C,EAAUk4B,KACtBnV,EAAOgL,SAAU,EAGjBhvB,EAAU4d,GAAe3c,EAFzB4M,EAAU9L,EAAW8L,GAAWA,IAAYA,EACxBhC,KAAKsqB,eAAepa,EAAQlO,EAASovC,KAG7D,IAAK,MAAMniC,KAAQqe,EACfnV,EAAOlJ,GAAQ9a,EAAQ8a,GAE3B,OAAOkJ,CACX,CACH,cAAAmS,CAAepa,EAAQlO,EAASmO,EAAW,CACpC,IACD8B,GACC,MAAM,SAAE7c,GAAci8C,GAAYrxC,KAAK0wC,eAAgBxgC,EAAQC,GAC/D,OAAOte,EAASmQ,GAAW+P,GAAe3c,EAAU4M,OAASL,EAAWsQ,GAAsB7c,CAClG,EAEJ,SAASi8C,GAAYG,EAAethC,EAAQC,GACxC,IAAIK,EAAQghC,EAAcnyC,IAAI6Q,GACzBM,IACDA,EAAQ,IAAI3R,IACZ2yC,EAAchyC,IAAI0Q,EAAQM,IAE9B,MAAMvR,EAAWkR,EAASyC,OAC1B,IAAI2T,EAAS/V,EAAMnR,IAAIJ,GASvB,OARKsnB,IAEDA,EAAS,CACLnxB,SAFa6a,GAAgBC,EAAQC,GAGrCihC,YAAajhC,EAAS+C,OAAQva,IAAKA,EAAEq2C,cAAcluC,SAAS,WAEhE0P,EAAMhR,IAAIP,EAAUsnB,IAEjBA,CACX,CACA,MAAM+qB,GAAelgD,GAAQS,EAAST,IAAUI,OAAOuxB,oBAAoB3xB,GAAOo9C,KAAMx6C,GAAMkC,EAAW9E,EAAM4C,KAgBzGy9C,GAAkB,CACpB,MACA,SACA,OACA,QACA,aAEJ,SAASC,GAAqBzf,EAAUxM,GACpC,MAAoB,QAAbwM,GAAmC,WAAbA,IAAgE,IAAvCwf,GAAgBx9C,QAAQg+B,IAA6B,MAATxM,CACtG,CACA,SAASksB,GAAcC,EAAIC,GACvB,OAAO,SAASz7C,EAAGC,GACf,OAAOD,EAAEw7C,KAAQv7C,EAAEu7C,GAAMx7C,EAAEy7C,GAAMx7C,EAAEw7C,GAAMz7C,EAAEw7C,GAAMv7C,EAAEu7C,EACvD,CACJ,CACA,SAASE,GAAqB9vC,GAC1B,MAAM/B,EAAQ+B,EAAQ/B,MAChB4iB,EAAmB5iB,EAAM9L,QAAQuN,UACvCzB,EAAMmkC,cAAc,eACpBhyC,EAASywB,GAAoBA,EAAiBkvB,WAAY,CACtD/vC,GACD/B,EACP,CACA,SAAS+xC,GAAoBhwC,GACzB,MAAM/B,EAAQ+B,EAAQ/B,MAChB4iB,EAAmB5iB,EAAM9L,QAAQuN,UACvCtP,EAASywB,GAAoBA,EAAiBovB,WAAY,CACtDjwC,GACD/B,EACP,CACC,SAASiyC,GAAU37C,GAShB,OARI0gB,MAAqC,iBAAT1gB,EAC5BA,EAAO2gB,SAASi7B,eAAe57C,GACxBA,GAAQA,EAAKxD,SACpBwD,EAAOA,EAAK,IAEZA,GAAQA,EAAK2S,SACb3S,EAAOA,EAAK2S,QAET3S,CACX,CACA,MAAM67C,GAAY,CAAC,EACbC,GAAYr+C,IACd,MAAMkV,EAASgpC,GAAUl+C,GACzB,OAAOxC,OAAOoO,OAAOwyC,IAAWl/B,OAAQ4H,GAAIA,EAAE5R,SAAWA,GAAQyW,OAErE,SAAS2yB,GAAgBn9C,EAAKiE,EAAO41B,GACjC,MAAMl8B,EAAOtB,OAAOsB,KAAKqC,GACzB,IAAK,MAAMnB,KAAOlB,EAAK,CACnB,MAAMy/C,GAAUv+C,EAChB,GAAIu+C,GAAUn5C,EAAO,CACjB,MAAMhI,EAAQ+D,EAAInB,UACXmB,EAAInB,IACPg7B,EAAO,GAAKujB,EAASn5C,KACrBjE,EAAIo9C,EAASvjB,GAAQ59B,EAE7B,CACJ,CACJ,CAUA,MAAMohD,GACF9rB,gBAAkB9hB,GAClB8hB,iBAAmB0rB,GACnB1rB,iBAAmB1lB,GACnB0lB,gBAAkB0mB,GAClB1mB,eA3EU,QA4EVA,gBAAkB2rB,GAClB,eAAOpH,IAAY3rB,GACf8tB,GAASv6B,OAAOyM,GAChBmzB,IACJ,CACA,iBAAO5G,IAAcvsB,GACjB8tB,GAAS5sB,UAAUlB,GACnBmzB,IACJ,CACA,WAAAlxC,CAAYhL,EAAMm8C,GACd,MAAMjwB,EAASziB,KAAKyiB,OAAS,IAAI6tB,GAAOoC,GAClCC,EAAgBT,GAAU37C,GAC1Bq8C,EAAgBP,GAASM,GAC/B,GAAIC,EACA,MAAM,IAAIjgC,MAAM,4CAA+CigC,EAAc1hD,GAA7D,kDAA6H0hD,EAAc1pC,OAAOhY,GAAK,oBAE3K,MAAMiD,EAAUsuB,EAAO6H,eAAe7H,EAAO0uB,oBAAqBnxC,KAAKmJ,cACvEnJ,KAAKiC,SAAW,IAAKwgB,EAAOxgB,UAnmEpC,SAAyBiH,GACrB,OAAK+N,MAAgD,oBAApB47B,iBAAmC3pC,aAAkB2pC,gBAC3E9Z,GAEJ+C,EACX,CA8lEgDgX,CAAgBH,IACxD3yC,KAAKiC,SAAS62B,aAAarW,GAC3B,MAAMzgB,EAAUhC,KAAKiC,SAASw2B,eAAeka,EAAex+C,EAAQukC,aAC9DxvB,EAASlH,GAAWA,EAAQkH,OAC5BK,EAASL,GAAUA,EAAOK,OAC1BlC,EAAQ6B,GAAUA,EAAO7B,MAC/BrH,KAAK9O,GAAKD,IACV+O,KAAK4C,IAAMZ,EACXhC,KAAKkJ,OAASA,EACdlJ,KAAKqH,MAAQA,EACbrH,KAAKuJ,OAASA,EACdvJ,KAAK+yC,SAAW5+C,EAChB6L,KAAKgzC,aAAehzC,KAAK04B,YACzB14B,KAAK02B,QAAU,GACf12B,KAAKizC,UAAY,GACjBjzC,KAAKslB,aAAU3jB,EACf3B,KAAK+1B,MAAQ,GACb/1B,KAAK+I,6BAA0BpH,EAC/B3B,KAAK2d,eAAYhc,EACjB3B,KAAKwf,QAAU,GACfxf,KAAKkzC,gBAAavxC,EAClB3B,KAAKmzC,WAAa,CAAC,EAClBnzC,KAAKozC,0BAAuBzxC,EAC7B3B,KAAKqzC,gBAAkB,GACvBrzC,KAAK2D,OAAS,CAAC,EACf3D,KAAKszC,SAAW,IAAI/F,GACpBvtC,KAAKw8B,SAAW,CAAC,EACjBx8B,KAAKuzC,eAAiB,CAAC,EACvBvzC,KAAKwzC,UAAW,EAChBxzC,KAAK+tB,yBAAsBpsB,EAC3B3B,KAAKsnB,cAAW3lB,EAChB3B,KAAKyzC,UD39JT,SAAkBphD,EAAI4S,GACtB,IAAIyuC,EACJ,OAAO,YAAYphD,GAOf,OANI2S,GACA0uC,aAAaD,GACbA,EAAUE,WAAWvhD,EAAI4S,EAAO3S,IAEhCD,EAAGG,MAAMwN,KAAM1N,GAEZ2S,CACX,CACJ,CCg9JyB4uC,CAAU5wC,GAAOjD,KAAK+hB,OAAO9e,GAAO9O,EAAQ2/C,aAAe,GAC5E9zC,KAAKovB,aAAe,GACpBgjB,GAAUpyC,KAAK9O,IAAM8O,KAChBgC,GAAYkH,GAIjBuX,GAAST,OAAOhgB,KAAM,WAAY8xC,IAClCrxB,GAAST,OAAOhgB,KAAM,WAAYgyC,IAClChyC,KAAK+zC,cACD/zC,KAAKwzC,UACLxzC,KAAK+hB,UAPLvS,QAAQ+/B,MAAM,oEAStB,CACA,eAAI7W,GACA,MAAQvkC,SAAS,YAAEukC,EAAY,oBAAEt1B,GAAuB,MAAEiE,EAAM,OAAEkC,EAAO,aAAEypC,GAAkBhzC,KAC7F,OAAK7O,EAAcunC,GAGft1B,GAAuB4vC,EAChBA,EAEJzpC,EAASlC,EAAQkC,EAAS,KALtBmvB,CAMf,CACA,QAAInwB,GACA,OAAOvI,KAAKyiB,OAAOla,IACvB,CACA,QAAIA,CAAKA,GACLvI,KAAKyiB,OAAOla,KAAOA,CACvB,CACA,WAAIpU,GACA,OAAO6L,KAAK+yC,QAChB,CACA,WAAI5+C,CAAQA,GACR6L,KAAKyiB,OAAOtuB,QAAUA,CAC1B,CACA,YAAIi5C,GACA,OAAOA,EACX,CACH,WAAA2G,GASO,OARA/zC,KAAKokC,cAAc,cACfpkC,KAAK7L,QAAQsP,WACbzD,KAAKyF,SAEL6T,GAAYtZ,KAAMA,KAAK7L,QAAQ4N,kBAEnC/B,KAAKg0C,aACLh0C,KAAKokC,cAAc,aACZpkC,IACX,CACA,KAAA4wC,GAEI,OADA3nC,GAAYjJ,KAAKkJ,OAAQlJ,KAAK4C,KACvB5C,IACX,CACA,IAAAsgB,GAEI,OADAG,GAASH,KAAKtgB,MACPA,IACX,CACH,MAAAyF,CAAO4B,EAAOkC,GACFkX,GAASpB,QAAQrf,MAGlBA,KAAKi0C,kBAAoB,CACrB5sC,QACAkC,UAJJvJ,KAAKk0C,QAAQ7sC,EAAOkC,EAO5B,CACA,OAAA2qC,CAAQ7sC,EAAOkC,GACX,MAAMpV,EAAU6L,KAAK7L,QACf+U,EAASlJ,KAAKkJ,OACdwvB,EAAcvkC,EAAQiP,qBAAuBpD,KAAK04B,YAClDyb,EAAUn0C,KAAKiC,SAAS22B,eAAe1vB,EAAQ7B,EAAOkC,EAAQmvB,GAC9D0b,EAAWjgD,EAAQ4N,kBAAoB/B,KAAKiC,SAASC,sBACrDe,EAAOjD,KAAKqH,MAAQ,SAAW,SACrCrH,KAAKqH,MAAQ8sC,EAAQ9sC,MACrBrH,KAAKuJ,OAAS4qC,EAAQ5qC,OACtBvJ,KAAKgzC,aAAehzC,KAAK04B,YACpBpf,GAAYtZ,KAAMo0C,GAAU,KAGjCp0C,KAAKokC,cAAc,SAAU,CACzB9tC,KAAM69C,IAEV/hD,EAAS+B,EAAQkgD,SAAU,CACvBr0C,KACAm0C,GACDn0C,MACCA,KAAKwzC,UACDxzC,KAAKyzC,UAAUxwC,IACfjD,KAAKs0C,SAGjB,CACA,mBAAAC,GAGI9hD,EAFgBuN,KAAK7L,QACSwP,QAAU,CAAC,EACrB,CAAC6wC,EAAa7J,KAC9B6J,EAAYtjD,GAAKy5C,GAEzB,CACH,mBAAA8J,GACO,MAAMtgD,EAAU6L,KAAK7L,QACfugD,EAAYvgD,EAAQwP,OACpBA,EAAS3D,KAAK2D,OACdgxC,EAAUnjD,OAAOsB,KAAK6Q,GAAQuc,OAAO,CAAC/qB,EAAKjE,KAC7CiE,EAAIjE,IAAM,EACHiE,GACR,CAAC,GACJ,IAAImqB,EAAQ,GACRo1B,IACAp1B,EAAQA,EAAMkY,OAAOhmC,OAAOsB,KAAK4hD,GAAWhhD,IAAKxC,IAC7C,MAAM69C,EAAe2F,EAAUxjD,GACzBu0B,EAAOqpB,GAAc59C,EAAI69C,GACzB6F,EAAoB,MAATnvB,EACXyR,EAAwB,MAATzR,EACrB,MAAO,CACHtxB,QAAS46C,EACT8F,UAAWD,EAAW,YAAc1d,EAAe,SAAW,OAC9D4d,MAAOF,EAAW,eAAiB1d,EAAe,WAAa,cAI3EzkC,EAAK6sB,EAAQ/oB,IACT,MAAMw4C,EAAex4C,EAAKpC,QACpBjD,EAAK69C,EAAa79C,GAClBu0B,EAAOqpB,GAAc59C,EAAI69C,GACzBgG,EAAY5iD,EAAe48C,EAAax9C,KAAMgF,EAAKu+C,YAC3BnzC,IAA1BotC,EAAa9c,UAA0Byf,GAAqB3C,EAAa9c,SAAUxM,KAAUisB,GAAqBn7C,EAAKs+C,aACvH9F,EAAa9c,SAAW17B,EAAKs+C,WAEjCF,EAAQzjD,IAAM,EACd,IAAIwS,EAAQ,KACRxS,KAAMyS,GAAUA,EAAOzS,GAAIK,OAASwjD,EACpCrxC,EAAQC,EAAOzS,IAGfwS,EAAQ,IADW0pC,GAASX,SAASsI,GAC7B,CAAe,CACnB7jD,KACAK,KAAMwjD,EACNnyC,IAAK5C,KAAK4C,IACV3C,MAAOD,OAEX2D,EAAOD,EAAMxS,IAAMwS,GAEvBA,EAAM88B,KAAKuO,EAAc56C,KAE7B1B,EAAKkiD,EAAS,CAACK,EAAY9jD,KAClB8jD,UACMrxC,EAAOzS,KAGtBuB,EAAKkR,EAASD,IACV8yB,GAAQ5T,UAAU5iB,KAAM0D,EAAOA,EAAMvP,SACrCqiC,GAAQC,OAAOz2B,KAAM0D,IAE7B,CACH,eAAAuxC,GACO,MAAMlxB,EAAW/jB,KAAKizC,UAChBpkB,EAAU7uB,KAAKuI,KAAKzG,SAAS/O,OAC7B67B,EAAU7K,EAAShxB,OAEzB,GADAgxB,EAAS2Q,KAAK,CAACt+B,EAAGC,IAAID,EAAE7C,MAAQ8C,EAAE9C,OAC9Bq7B,EAAUC,EAAS,CACnB,IAAI,IAAIj8B,EAAIi8B,EAASj8B,EAAIg8B,IAAWh8B,EAChCoN,KAAKk1C,oBAAoBtiD,GAE7BmxB,EAAS9oB,OAAO4zB,EAASD,EAAUC,EACvC,CACA7uB,KAAKqzC,gBAAkBtvB,EAASnyB,MAAM,GAAG8iC,KAAKid,GAAc,QAAS,SACzE,CACH,2BAAAwD,GACO,MAAQlC,UAAWlvB,EAAWxb,MAAM,SAAEzG,IAAiB9B,KACnD+jB,EAAShxB,OAAS+O,EAAS/O,eACpBiN,KAAKslB,QAEhBvB,EAAS7oB,QAAQ,CAAC4iB,EAAMvqB,KACqC,IAArDuO,EAASoR,OAAQne,GAAIA,IAAM+oB,EAAKkS,UAAUj9B,QAC1CiN,KAAKk1C,oBAAoB3hD,IAGrC,CACA,wBAAA6hD,GACI,MAAMC,EAAiB,GACjBvzC,EAAW9B,KAAKuI,KAAKzG,SAC3B,IAAIlP,EAAGO,EAEP,IADA6M,KAAKm1C,8BACDviD,EAAI,EAAGO,EAAO2O,EAAS/O,OAAQH,EAAIO,EAAMP,IAAI,CAC7C,MAAMo1B,EAAUlmB,EAASlP,GACzB,IAAIkrB,EAAO9d,KAAKgpB,eAAep2B,GAC/B,MAAMrB,EAAOy2B,EAAQz2B,MAAQyO,KAAKyiB,OAAOlxB,KAWzC,GAVIusB,EAAKvsB,MAAQusB,EAAKvsB,OAASA,IAC3ByO,KAAKk1C,oBAAoBtiD,GACzBkrB,EAAO9d,KAAKgpB,eAAep2B,IAE/BkrB,EAAKvsB,KAAOA,EACZusB,EAAK/a,UAAYilB,EAAQjlB,WAAa2rC,GAAan9C,EAAMyO,KAAK7L,SAC9D2pB,EAAKw3B,MAAQttB,EAAQstB,OAAS,EAC9Bx3B,EAAKvqB,MAAQX,EACbkrB,EAAKyO,MAAQ,GAAKvE,EAAQuE,MAC1BzO,EAAKlY,QAAU5F,KAAKu1C,iBAAiB3iD,GACjCkrB,EAAKqH,WACLrH,EAAKqH,WAAW4C,YAAYn1B,GAC5BkrB,EAAKqH,WAAWwC,iBACb,CACH,MAAM6tB,EAAkBpI,GAASf,cAAc96C,IACzC,mBAAEi2B,EAAmB,gBAAEC,GAAqB7iB,GAAS9C,SAASvQ,GACpEC,OAAOkP,OAAO80C,EAAiB,CAC3B/tB,gBAAiB2lB,GAASb,WAAW9kB,GACrCD,mBAAoBA,GAAsB4lB,GAASb,WAAW/kB,KAElE1J,EAAKqH,WAAa,IAAIqwB,EAAgBx1C,KAAMpN,GAC5CyiD,EAAe3/C,KAAKooB,EAAKqH,WAC7B,CACJ,CAEA,OADAnlB,KAAKi1C,kBACEI,CACX,CACH,cAAAI,GACOhjD,EAAKuN,KAAKuI,KAAKzG,SAAU,CAACkmB,EAAS10B,KAC/B0M,KAAKgpB,eAAe11B,GAAc6xB,WAAWgE,SAC9CnpB,KACP,CACH,KAAAmpB,GACOnpB,KAAKy1C,iBACLz1C,KAAKokC,cAAc,QACvB,CACA,MAAAriB,CAAO9e,GACH,MAAMwf,EAASziB,KAAKyiB,OACpBA,EAAOV,SACP,MAAM5tB,EAAU6L,KAAK+yC,SAAWtwB,EAAO6H,eAAe7H,EAAO0uB,oBAAqBnxC,KAAKmJ,cACjFusC,EAAgB11C,KAAK+tB,qBAAuB55B,EAAQuN,UAK1D,GAJA1B,KAAK21C,gBACL31C,KAAK41C,sBACL51C,KAAK61C,uBACL71C,KAAKszC,SAASvF,cAIP,IAHH/tC,KAAKokC,cAAc,eAAgB,CACnCnhC,OACA6qC,YAAY,IAEZ,OAEJ,MAAMuH,EAAiBr1C,KAAKo1C,2BAC5Bp1C,KAAKokC,cAAc,wBACnB,IAAItN,EAAa,EACjB,IAAI,IAAIlkC,EAAI,EAAGO,EAAO6M,KAAKuI,KAAKzG,SAAS/O,OAAQH,EAAIO,EAAMP,IAAI,CAC3D,MAAM,WAAEuyB,GAAgBnlB,KAAKgpB,eAAep2B,GACtCu2B,GAASusB,IAAyD,IAAxCL,EAAephD,QAAQkxB,GACvDA,EAAW2E,sBAAsBX,GACjC2N,EAAapgC,KAAKoD,KAAKqrB,EAAWkH,iBAAkByK,EACxD,CACAA,EAAa92B,KAAK81C,YAAc3hD,EAAQ8gC,OAAOnvB,YAAcgxB,EAAa,EAC1E92B,KAAK+1C,cAAcjf,GACd4e,GACDjjD,EAAK4iD,EAAiBlwB,IAClBA,EAAWgE,UAGnBnpB,KAAKg2C,gBAAgB/yC,GACrBjD,KAAKokC,cAAc,cAAe,CAC9BnhC,SAEJjD,KAAK02B,QAAQhC,KAAKid,GAAc,IAAK,SACrC,MAAM,QAAEnyB,EAAQ,WAAE0zB,GAAgBlzC,KAC9BkzC,EACAlzC,KAAKi2C,cAAc/C,GAAY,GACxB1zB,EAAQzsB,QACfiN,KAAKk2C,mBAAmB12B,EAASA,GAAS,GAE9Cxf,KAAKs0C,QACT,CACH,aAAAqB,GACOljD,EAAKuN,KAAK2D,OAASD,IACf8yB,GAAQI,UAAU52B,KAAM0D,KAE5B1D,KAAKu0C,sBACLv0C,KAAKy0C,qBACT,CACH,mBAAAmB,GACO,MAAMzhD,EAAU6L,KAAK7L,QACfgiD,EAAiB,IAAI7jC,IAAI9gB,OAAOsB,KAAKkN,KAAKmzC,aAC1CiD,EAAY,IAAI9jC,IAAIne,EAAQiO,QAC7BjM,EAAUggD,EAAgBC,MAAgBp2C,KAAKozC,uBAAyBj/C,EAAQsP,aACjFzD,KAAKq2C,eACLr2C,KAAKg0C,aAEb,CACH,oBAAA6B,GACO,MAAM,eAAEtC,GAAoBvzC,KACtBs2C,EAAUt2C,KAAKu2C,0BAA4B,GACjD,IAAK,MAAM,OAAEh0B,EAAO,MAAEnpB,EAAM,MAAEgjB,KAAYk6B,EAEtChE,GAAgBiB,EAAgBn6C,EADR,oBAAXmpB,GAAgCnG,EAAQA,EAG7D,CACH,sBAAAm6B,GACO,MAAMnnB,EAAepvB,KAAKovB,aAC1B,IAAKA,IAAiBA,EAAar8B,OAC/B,OAEJiN,KAAKovB,aAAe,GACpB,MAAMonB,EAAex2C,KAAKuI,KAAKzG,SAAS/O,OAClC0jD,EAAW1P,GAAM,IAAIz0B,IAAI8c,EAAalc,OAAQ4H,GAAIA,EAAE,KAAOisB,GAAKrzC,IAAI,CAAConB,EAAGloB,IAAIA,EAAI,IAAMkoB,EAAE7f,OAAO,GAAG2X,KAAK,OACvG8jC,EAAYD,EAAQ,GAC1B,IAAI,IAAI7jD,EAAI,EAAGA,EAAI4jD,EAAc5jD,IAC7B,IAAKuD,EAAUugD,EAAWD,EAAQ7jD,IAC9B,OAGR,OAAOtB,MAAM8T,KAAKsxC,GAAWhjD,IAAKonB,GAAIA,EAAExlB,MAAM,MAAM5B,IAAK0C,IAAI,CACrDmsB,OAAQnsB,EAAE,GACVgD,OAAQhD,EAAE,GACVgmB,OAAQhmB,EAAE,KAEtB,CACH,aAAA2/C,CAAcjf,GACP,IAEO,IAFH92B,KAAKokC,cAAc,eAAgB,CACnC0J,YAAY,IAEZ,OAEJtX,GAAQzU,OAAO/hB,KAAMA,KAAKqH,MAAOrH,KAAKuJ,OAAQutB,GAC9C,MAAMzrB,EAAOrL,KAAK2d,UACZg5B,EAAStrC,EAAKhE,OAAS,GAAKgE,EAAK9B,QAAU,EACjDvJ,KAAK02B,QAAU,GACfjkC,EAAKuN,KAAK+1B,MAAQpd,IACVg+B,GAA2B,cAAjBh+B,EAAIsZ,WAGdtZ,EAAIiK,WACJjK,EAAIiK,YAER5iB,KAAK02B,QAAQhhC,QAAQijB,EAAI+d,aAC1B12B,MACHA,KAAK02B,QAAQx7B,QAAQ,CAAC3E,EAAMhD,KACxBgD,EAAKqgD,KAAOrjD,IAEhByM,KAAKokC,cAAc,cACvB,CACH,eAAA4R,CAAgB/yC,GACT,IAGO,IAHHjD,KAAKokC,cAAc,uBAAwB,CAC3CnhC,OACA6qC,YAAY,IAFhB,CAMA,IAAI,IAAIl7C,EAAI,EAAGO,EAAO6M,KAAKuI,KAAKzG,SAAS/O,OAAQH,EAAIO,IAAQP,EACzDoN,KAAKgpB,eAAep2B,GAAGuyB,WAAWvC,YAEtC,IAAI,IAAIhwB,EAAI,EAAGO,EAAO6M,KAAKuI,KAAKzG,SAAS/O,OAAQH,EAAIO,IAAQP,EACzDoN,KAAK62C,eAAejkD,EAAGsD,EAAW+M,GAAQA,EAAK,CAC3C3P,aAAcV,IACbqQ,GAETjD,KAAKokC,cAAc,sBAAuB,CACtCnhC,QAVJ,CAYJ,CACH,cAAA4zC,CAAetjD,EAAO0P,GACf,MAAM6a,EAAO9d,KAAKgpB,eAAez1B,GAC3BjB,EAAO,CACTwrB,OACAvqB,QACA0P,OACA6qC,YAAY,IAEwC,IAApD9tC,KAAKokC,cAAc,sBAAuB9xC,KAG9CwrB,EAAKqH,WAAWlG,QAAQhc,GACxB3Q,EAAKw7C,YAAa,EAClB9tC,KAAKokC,cAAc,qBAAsB9xC,GAC7C,CACA,MAAAgiD,IAGW,IAFHt0C,KAAKokC,cAAc,eAAgB,CACnC0J,YAAY,MAIZrtB,GAASjqB,IAAIwJ,MACTA,KAAKwzC,WAAa/yB,GAASpB,QAAQrf,OACnCygB,GAASrnB,MAAM4G,OAGnBA,KAAKuf,OACLuyB,GAAqB,CACjB7xC,MAAOD,QAGnB,CACA,IAAAuf,GACI,IAAI3sB,EACJ,GAAIoN,KAAKi0C,kBAAmB,CACxB,MAAM,MAAE5sC,EAAM,OAAEkC,GAAYvJ,KAAKi0C,kBACjCj0C,KAAKi0C,kBAAoB,KACzBj0C,KAAKk0C,QAAQ7sC,EAAOkC,EACxB,CAEA,GADAvJ,KAAK4wC,QACD5wC,KAAKqH,OAAS,GAAKrH,KAAKuJ,QAAU,EAClC,OAEJ,IAEO,IAFHvJ,KAAKokC,cAAc,aAAc,CACjC0J,YAAY,IAEZ,OAEJ,MAAMgJ,EAAS92C,KAAK02B,QACpB,IAAI9jC,EAAI,EAAGA,EAAIkkD,EAAO/jD,QAAU+jD,EAAOlkD,GAAG+jC,GAAK,IAAK/jC,EAChDkkD,EAAOlkD,GAAG2sB,KAAKvf,KAAK2d,WAGxB,IADA3d,KAAK+2C,gBACCnkD,EAAIkkD,EAAO/jD,SAAUH,EACvBkkD,EAAOlkD,GAAG2sB,KAAKvf,KAAK2d,WAExB3d,KAAKokC,cAAc,YACvB,CACH,sBAAApgB,CAAuBF,GAChB,MAAMC,EAAW/jB,KAAKqzC,gBAChBl7B,EAAS,GACf,IAAIvlB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO4wB,EAAShxB,OAAQH,EAAIO,IAAQP,EAAE,CAC7C,MAAMkrB,EAAOiG,EAASnxB,GACjBkxB,IAAiBhG,EAAKlY,SACvBuS,EAAOziB,KAAKooB,EAEpB,CACA,OAAO3F,CACX,CACH,4BAAAga,GACO,OAAOnyB,KAAKgkB,wBAAuB,EACvC,CACH,aAAA+yB,GACO,IAEO,IAFH/2C,KAAKokC,cAAc,qBAAsB,CACzC0J,YAAY,IAEZ,OAEJ,MAAM/pB,EAAW/jB,KAAKmyB,+BACtB,IAAI,IAAIv/B,EAAImxB,EAAShxB,OAAS,EAAGH,GAAK,IAAKA,EACvCoN,KAAKg3C,aAAajzB,EAASnxB,IAE/BoN,KAAKokC,cAAc,oBACvB,CACH,YAAA4S,CAAal5B,GACN,MAAMlb,EAAM5C,KAAK4C,IACXtQ,EAAO,CACTwrB,OACAvqB,MAAOuqB,EAAKvqB,MACZu6C,YAAY,GAEVtnC,EAAOqX,GAAmB7d,KAAM8d,IACgB,IAAlD9d,KAAKokC,cAAc,oBAAqB9xC,KAGxCkU,GACA+E,GAAS3I,EAAK4D,GAElBsX,EAAKqH,WAAW5F,OACZ/Y,GACAgF,GAAW5I,GAEftQ,EAAKw7C,YAAa,EAClB9tC,KAAKokC,cAAc,mBAAoB9xC,GAC3C,CACH,aAAAigC,CAAcnnB,GACP,OAAOD,GAAeC,EAAOpL,KAAK2d,UAAW3d,KAAK81C,YACtD,CACA,yBAAAmB,CAA0Bv+C,EAAGuK,EAAM9O,EAASm+B,GACxC,MAAM/P,EAAS4R,GAAYC,MAAMnxB,GACjC,MAAsB,mBAAXsf,EACAA,EAAOviB,KAAMtH,EAAGvE,EAASm+B,GAE7B,EACX,CACA,cAAAtJ,CAAe11B,GACX,MAAM00B,EAAUhoB,KAAKuI,KAAKzG,SAASxO,GAC7BywB,EAAW/jB,KAAKizC,UACtB,IAAIn1B,EAAOiG,EAAS7Q,OAAQne,GAAIA,GAAKA,EAAEi7B,WAAahI,GAASrI,MAkB7D,OAjBK7B,IACDA,EAAO,CACHvsB,KAAM,KACNgX,KAAM,GACNyf,QAAS,KACT7C,WAAY,KACZwG,OAAQ,KACRtD,QAAS,KACTE,QAAS,KACT+sB,MAAOttB,GAAWA,EAAQstB,OAAS,EACnC/hD,MAAOD,EACP08B,SAAUhI,EACV5B,QAAS,GACTqE,SAAS,GAEb1G,EAASruB,KAAKooB,IAEXA,CACX,CACA,UAAA3U,GACI,OAAOnJ,KAAKsnB,WAAatnB,KAAKsnB,SAAWvX,GAAc,KAAM,CACzD9P,MAAOD,KACPzO,KAAM,UAEd,CACA,sBAAA2lD,GACI,OAAOl3C,KAAKmyB,+BAA+Bp/B,MAC/C,CACA,gBAAAwiD,CAAiBjiD,GACb,MAAM00B,EAAUhoB,KAAKuI,KAAKzG,SAASxO,GACnC,IAAK00B,EACD,OAAO,EAEX,MAAMlK,EAAO9d,KAAKgpB,eAAe11B,GACjC,MAA8B,kBAAhBwqB,EAAK6N,QAAwB7N,EAAK6N,QAAU3D,EAAQ2D,MACtE,CACA,oBAAAwrB,CAAqB7jD,EAAcsS,GAClB5F,KAAKgpB,eAAe11B,GAC5Bq4B,QAAU/lB,CACnB,CACA,oBAAAwxC,CAAqB7jD,GACjByM,KAAKuzC,eAAehgD,IAAUyM,KAAKuzC,eAAehgD,EACtD,CACA,iBAAA8jD,CAAkB9jD,GACd,OAAQyM,KAAKuzC,eAAehgD,EAChC,CACH,iBAAA+jD,CAAkBhkD,EAAcw5B,EAAWlnB,GACpC,MAAM3C,EAAO2C,EAAU,OAAS,OAC1BkY,EAAO9d,KAAKgpB,eAAe11B,GAC3BorB,EAAQZ,EAAKqH,WAAWsI,wBAAmB9rB,EAAWsB,GACxDhN,EAAQ62B,IACRhP,EAAKvV,KAAKukB,GAAWnB,QAAU/lB,EAC/B5F,KAAK+hB,WAEL/hB,KAAKm3C,qBAAqB7jD,EAAcsS,GACxC8Y,EAAMqD,OAAOjE,EAAM,CACflY,YAEJ5F,KAAK+hB,OAAQnf,GAAMA,EAAItP,eAAiBA,EAAe2P,OAAOtB,GAEtE,CACA,IAAAkE,CAAKvS,EAAcw5B,GACf9sB,KAAKs3C,kBAAkBhkD,EAAcw5B,GAAW,EACpD,CACA,IAAApnB,CAAKpS,EAAcw5B,GACf9sB,KAAKs3C,kBAAkBhkD,EAAcw5B,GAAW,EACpD,CACH,mBAAAooB,CAAoB5hD,GACb,MAAMwqB,EAAO9d,KAAKizC,UAAU3/C,GACxBwqB,GAAQA,EAAKqH,YACbrH,EAAKqH,WAAWiE,kBAEbppB,KAAKizC,UAAU3/C,EAC1B,CACA,KAAAikD,GACI,IAAI3kD,EAAGO,EAGP,IAFA6M,KAAKsgB,OACLG,GAASD,OAAOxgB,MACZpN,EAAI,EAAGO,EAAO6M,KAAKuI,KAAKzG,SAAS/O,OAAQH,EAAIO,IAAQP,EACrDoN,KAAKk1C,oBAAoBtiD,EAEjC,CACA,OAAA4kD,GACIx3C,KAAKokC,cAAc,iBACnB,MAAM,OAAEl7B,EAAO,IAAEtG,GAAS5C,KAC1BA,KAAKu3C,QACLv3C,KAAKyiB,OAAOkuB,aACRznC,IACAlJ,KAAKq2C,eACLptC,GAAYC,EAAQtG,GACpB5C,KAAKiC,SAAS02B,eAAe/1B,GAC7B5C,KAAKkJ,OAAS,KACdlJ,KAAK4C,IAAM,aAERwvC,GAAUpyC,KAAK9O,IACtB8O,KAAKokC,cAAc,eACvB,CACA,aAAAqT,IAAiBnlD,GACb,OAAO0N,KAAKkJ,OAAOwuC,aAAaplD,EACpC,CACH,UAAA0hD,GACOh0C,KAAK23C,iBACD33C,KAAK7L,QAAQsP,WACbzD,KAAK43C,uBAEL53C,KAAKwzC,UAAW,CAExB,CACH,cAAAmE,GACO,MAAM38C,EAAYgF,KAAKmzC,WACjBlxC,EAAWjC,KAAKiC,SAChB41C,EAAO,CAACtmD,EAAMsJ,KAChBoH,EAAS+X,iBAAiBha,KAAMzO,EAAMsJ,GACtCG,EAAUzJ,GAAQsJ,GAEhBA,EAAW,CAACnC,EAAG3D,EAAGE,KACpByD,EAAEmgB,QAAU9jB,EACZ2D,EAAEogB,QAAU7jB,EACZ+K,KAAKi2C,cAAcv9C,IAEvBjG,EAAKuN,KAAK7L,QAAQiO,OAAS7Q,GAAOsmD,EAAKtmD,EAAMsJ,GACjD,CACH,oBAAA+8C,GACY53C,KAAKozC,uBACNpzC,KAAKozC,qBAAuB,CAAC,GAEjC,MAAMp4C,EAAYgF,KAAKozC,qBACjBnxC,EAAWjC,KAAKiC,SAChB41C,EAAO,CAACtmD,EAAMsJ,KAChBoH,EAAS+X,iBAAiBha,KAAMzO,EAAMsJ,GACtCG,EAAUzJ,GAAQsJ,GAEhBi9C,EAAU,CAACvmD,EAAMsJ,KACfG,EAAUzJ,KACV0Q,EAASgY,oBAAoBja,KAAMzO,EAAMsJ,UAClCG,EAAUzJ,KAGnBsJ,EAAW,CAACwM,EAAOkC,KACjBvJ,KAAKkJ,QACLlJ,KAAKyF,OAAO4B,EAAOkC,IAG3B,IAAIwuC,EACJ,MAAMvE,EAAW,KACbsE,EAAQ,SAAUtE,GAClBxzC,KAAKwzC,UAAW,EAChBxzC,KAAKyF,SACLoyC,EAAK,SAAUh9C,GACfg9C,EAAK,SAAUE,IAEnBA,EAAW,KACP/3C,KAAKwzC,UAAW,EAChBsE,EAAQ,SAAUj9C,GAClBmF,KAAKu3C,QACLv3C,KAAKk0C,QAAQ,EAAG,GAChB2D,EAAK,SAAUrE,IAEfvxC,EAAS42B,WAAW74B,KAAKkJ,QACzBsqC,IAEAuE,GAER,CACH,YAAA1B,GACO5jD,EAAKuN,KAAKmzC,WAAY,CAACt4C,EAAUtJ,KAC7ByO,KAAKiC,SAASgY,oBAAoBja,KAAMzO,EAAMsJ,KAElDmF,KAAKmzC,WAAa,CAAC,EACnB1gD,EAAKuN,KAAKozC,qBAAsB,CAACv4C,EAAUtJ,KACvCyO,KAAKiC,SAASgY,oBAAoBja,KAAMzO,EAAMsJ,KAElDmF,KAAKozC,0BAAuBzxC,CAChC,CACA,gBAAAq2C,CAAiB14B,EAAOrc,EAAM4/B,GAC1B,MAAM1xB,EAAS0xB,EAAU,MAAQ,SACjC,IAAI/kB,EAAMvnB,EAAM3D,EAAGO,EAKnB,IAJa,YAAT8P,IACA6a,EAAO9d,KAAKgpB,eAAe1J,EAAM,GAAGhsB,cACpCwqB,EAAKqH,WAAW,IAAMhU,EAAS,wBAE/Bve,EAAI,EAAGO,EAAOmsB,EAAMvsB,OAAQH,EAAIO,IAAQP,EAAE,CAC1C2D,EAAO+oB,EAAM1sB,GACb,MAAMuyB,EAAa5uB,GAAQyJ,KAAKgpB,eAAezyB,EAAKjD,cAAc6xB,WAC9DA,GACAA,EAAWhU,EAAS,cAAc5a,EAAKqhB,QAASrhB,EAAKjD,aAAciD,EAAKhD,MAEhF,CACJ,CACH,iBAAA0kD,GACO,OAAOj4C,KAAKwf,SAAW,EAC3B,CACH,iBAAA04B,CAAkBC,GACX,MAAMC,EAAap4C,KAAKwf,SAAW,GAC7Bha,EAAS2yC,EAAezkD,IAAI,EAAGJ,eAAeC,YAChD,MAAMuqB,EAAO9d,KAAKgpB,eAAe11B,GACjC,IAAKwqB,EACD,MAAM,IAAInL,MAAM,6BAA+Brf,GAEnD,MAAO,CACHA,eACAskB,QAASkG,EAAKvV,KAAKhV,GACnBA,YAGSP,EAAewS,EAAQ4yC,KAEpCp4C,KAAKwf,QAAUha,EACfxF,KAAKkzC,WAAa,KAClBlzC,KAAKk2C,mBAAmB1wC,EAAQ4yC,GAExC,CACH,aAAAhU,CAAcsJ,EAAMp7C,EAAM4gB,GACnB,OAAOlT,KAAKszC,SAAS7F,OAAOztC,KAAM0tC,EAAMp7C,EAAM4gB,EAClD,CACH,eAAA4U,CAAgBuwB,GACT,OAA6E,IAAtEr4C,KAAKszC,SAAShT,OAAOptB,OAAQva,GAAIA,EAAEk1C,OAAO38C,KAAOmnD,GAAUtlD,MACtE,CACH,kBAAAmjD,CAAmB1wC,EAAQ4yC,EAAYE,GAChC,MAAMC,EAAev4C,KAAK7L,QAAQuO,MAC5BygC,EAAO,CAAC/sC,EAAGC,IAAID,EAAE8c,OAAQne,IAAKsB,EAAEm4C,KAAMv5C,GAAIF,EAAEzB,eAAiB2B,EAAE3B,cAAgByB,EAAExB,QAAU0B,EAAE1B,QAC7FilD,EAAcrV,EAAKiV,EAAY5yC,GAC/BizC,EAAYH,EAAS9yC,EAAS29B,EAAK39B,EAAQ4yC,GAC7CI,EAAYzlD,QACZiN,KAAKg4C,iBAAiBQ,EAAaD,EAAat1C,MAAM,GAEtDw1C,EAAU1lD,QAAUwlD,EAAat1C,MACjCjD,KAAKg4C,iBAAiBS,EAAWF,EAAat1C,MAAM,EAE5D,CACH,aAAAgzC,CAAcv9C,EAAG4/C,GACV,MAAMhmD,EAAO,CACTgmB,MAAO5f,EACP4/C,SACAxK,YAAY,EACZ4K,YAAa14C,KAAKuyB,cAAc75B,IAE9BigD,EAAe9K,IAAUA,EAAO15C,QAAQiO,QAAUpC,KAAK7L,QAAQiO,QAAQtB,SAASpI,EAAEijC,OAAOpqC,MAC/F,IAA6D,IAAzDyO,KAAKokC,cAAc,cAAe9xC,EAAMqmD,GACxC,OAEJ,MAAM7nB,EAAU9wB,KAAK44C,aAAalgD,EAAG4/C,EAAQhmD,EAAKomD,aAMlD,OALApmD,EAAKw7C,YAAa,EAClB9tC,KAAKokC,cAAc,aAAc9xC,EAAMqmD,IACnC7nB,GAAWx+B,EAAKw+B,UAChB9wB,KAAKs0C,SAEFt0C,IACX,CACH,YAAA44C,CAAalgD,EAAG4/C,EAAQI,GACjB,MAAQl5B,QAAS44B,EAAa,GAAG,QAAEjkD,GAAa6L,KAC1CsyB,EAAmBgmB,EACnB9yC,EAASxF,KAAK64C,mBAAmBngD,EAAG0/C,EAAYM,EAAapmB,GAC7DwmB,EDj/LV,SAAuBpgD,GACvB,MAAkB,YAAXA,EAAEnH,MAAiC,UAAXmH,EAAEnH,MAA+B,gBAAXmH,EAAEnH,IAC3D,CC++LwBwnD,CAAcrgD,GACxBsgD,EA1xBb,SAA4BtgD,EAAGsgD,EAAWN,EAAaI,GACpD,OAAKJ,GAA0B,aAAXhgD,EAAEnH,KAGlBunD,EACOE,EAEJtgD,EALI,IAMf,CAkxB0BugD,CAAmBvgD,EAAGsH,KAAKkzC,WAAYwF,EAAaI,GAClEJ,IACA14C,KAAKkzC,WAAa,KAClB9gD,EAAS+B,EAAQkP,QAAS,CACtB3K,EACA8M,EACAxF,MACDA,MACC84C,GACA1mD,EAAS+B,EAAQmP,QAAS,CACtB5K,EACA8M,EACAxF,MACDA,OAGX,MAAM8wB,GAAW99B,EAAewS,EAAQ4yC,GAMxC,OALItnB,GAAWwnB,KACXt4C,KAAKwf,QAAUha,EACfxF,KAAKk2C,mBAAmB1wC,EAAQ4yC,EAAYE,IAEhDt4C,KAAKkzC,WAAa8F,EACXloB,CACX,CACH,kBAAA+nB,CAAmBngD,EAAG0/C,EAAYM,EAAapmB,GACxC,GAAe,aAAX55B,EAAEnH,KACF,MAAO,GAEX,IAAKmnD,EACD,OAAON,EAEX,MAAMG,EAAev4C,KAAK7L,QAAQuO,MAClC,OAAO1C,KAAKi3C,0BAA0Bv+C,EAAG6/C,EAAat1C,KAAMs1C,EAAcjmB,EAC9E,EAEJ,SAASmgB,KACL,OAAOhgD,EAAK+/C,GAAMJ,UAAYnyC,GAAQA,EAAMqzC,SAASvF,aACzD,CAkVA,SAASmL,GAASt2C,EAAKzO,EAASoO,EAAQpO,GACpCyO,EAAIu2C,QAAUhnD,EAAeoQ,EAAM4a,eAAgBhpB,EAAQgpB,gBAC3Dva,EAAIknC,YAAY33C,EAAeoQ,EAAM6a,WAAYjpB,EAAQipB,aACzDxa,EAAImnC,eAAiB53C,EAAeoQ,EAAM8a,iBAAkBlpB,EAAQkpB,kBACpEza,EAAIw2C,SAAWjnD,EAAeoQ,EAAM+a,gBAAiBnpB,EAAQmpB,iBAC7D1a,EAAI+D,UAAYxU,EAAeoQ,EAAM0I,YAAa9W,EAAQ8W,aAC1DrI,EAAIkK,YAAc3a,EAAeoQ,EAAMV,YAAa1N,EAAQ0N,YAChE,CACA,SAASgJ,GAAOjI,EAAK8I,EAAU/X,GAC3BiP,EAAIiI,OAAOlX,EAAOoB,EAAGpB,EAAOsB,EAChC,CAUA,SAASokD,GAAS/kC,EAAQgI,EAAS0Y,EAAS,CAAC,GACzC,MAAM5Y,EAAQ9H,EAAOvhB,QACbqG,MAAOkgD,EAAc,EAAIjgD,IAAKkgD,EAAYn9B,EAAQ,GAAO4Y,GACzD57B,MAAOogD,EAAengD,IAAKogD,GAAgBn9B,EAC7CljB,EAAQ1C,KAAKoD,IAAIw/C,EAAaE,GAC9BngD,EAAM3C,KAAKmD,IAAI0/C,EAAWE,GAC1BC,EAAUJ,EAAcE,GAAgBD,EAAYC,GAAgBF,EAAcG,GAAcF,EAAYE,EAClH,MAAO,CACHr9B,QACAhjB,QACAiM,KAAMiX,EAAQjX,KACdlS,KAAMkG,EAAMD,IAAUsgD,EAAUt9B,EAAQ/iB,EAAMD,EAAQC,EAAMD,EAEpE,CACC,SAASugD,GAAY/2C,EAAKwJ,EAAMkQ,EAAS0Y,GACtC,MAAM,OAAE1gB,EAAO,QAAEngB,GAAaiY,GACxB,MAAEgQ,EAAM,MAAEhjB,EAAM,KAAEiM,EAAK,KAAElS,GAAUkmD,GAAS/kC,EAAQgI,EAAS0Y,GAC7D4kB,EA1BT,SAAuBzlD,GACpB,OAAIA,EAAQ0lD,QACDpuC,GAEPtX,EAAQyiB,SAA8C,aAAnCziB,EAAQshB,uBACpB5J,GAEJhB,EACX,CAkBuBivC,CAAc3lD,GACjC,IACIvB,EAAGwY,EAAOuL,GADV,KAAEqY,GAAM,EAAK,QAAEr8B,GAAaqiC,GAAU,CAAC,EAE3C,IAAIpiC,EAAI,EAAGA,GAAKO,IAAQP,EACpBwY,EAAQkJ,GAAQlb,GAASzG,EAAUQ,EAAOP,EAAIA,IAAMwpB,GAChDhR,EAAMmJ,OAECya,GACPpsB,EAAIgI,OAAOQ,EAAMrW,EAAGqW,EAAMnW,GAC1B+5B,GAAO,GAEP4qB,EAAWh3C,EAAK+T,EAAMvL,EAAOzY,EAASwB,EAAQ0lD,SAElDljC,EAAOvL,GAMX,OAJI/F,IACA+F,EAAQkJ,GAAQlb,GAASzG,EAAUQ,EAAO,IAAMipB,GAChDw9B,EAAWh3C,EAAK+T,EAAMvL,EAAOzY,EAASwB,EAAQ0lD,YAEzCx0C,CACb,CACC,SAAS00C,GAAgBn3C,EAAKwJ,EAAMkQ,EAAS0Y,GAC1C,MAAM1gB,EAASlI,EAAKkI,QACd,MAAE8H,EAAM,MAAEhjB,EAAM,KAAEjG,GAAUkmD,GAAS/kC,EAAQgI,EAAS0Y,IACtD,KAAEhG,GAAM,EAAK,QAAEr8B,GAAaqiC,GAAU,CAAC,EAC7C,IAEIpiC,EAAGwY,EAAO4uC,EAAOC,EAAMC,EAAMC,EAF7BC,EAAO,EACPC,EAAS,EAEb,MAAMC,EAAc/mD,IAAS6F,GAASzG,EAAUQ,EAAOI,EAAQA,IAAU6oB,EACnEm+B,EAAQ,KACNN,IAASC,IACTt3C,EAAIiI,OAAOuvC,EAAMF,GACjBt3C,EAAIiI,OAAOuvC,EAAMH,GACjBr3C,EAAIiI,OAAOuvC,EAAMD,KAOzB,IAJInrB,IACA5jB,EAAQkJ,EAAOgmC,EAAW,IAC1B13C,EAAIgI,OAAOQ,EAAMrW,EAAGqW,EAAMnW,IAE1BrC,EAAI,EAAGA,GAAKO,IAAQP,EAAE,CAEtB,GADAwY,EAAQkJ,EAAOgmC,EAAW1nD,IACtBwY,EAAMmJ,KACN,SAEJ,MAAMxf,EAAIqW,EAAMrW,EACVE,EAAImW,EAAMnW,EACVulD,EAAa,EAAJzlD,EACXylD,IAAWR,GACP/kD,EAAIglD,EACJA,EAAOhlD,EACAA,EAAIilD,IACXA,EAAOjlD,GAEXmlD,GAAQC,EAASD,EAAOrlD,KAAOslD,IAE/BE,IACA33C,EAAIiI,OAAO9V,EAAGE,GACd+kD,EAAQQ,EACRH,EAAS,EACTJ,EAAOC,EAAOjlD,GAElBklD,EAAQllD,CACZ,CACAslD,GACJ,CACC,SAASE,GAAkBruC,GACxB,MAAMC,EAAOD,EAAKjY,QACZipB,EAAa/Q,EAAK+Q,YAAc/Q,EAAK+Q,WAAWrqB,OAEtD,OADqBqZ,EAAK6kB,YAAe7kB,EAAKqV,OAAUpV,EAAKuK,SAA2C,aAAhCvK,EAAKoJ,wBAA0CpJ,EAAKwtC,SAAYz8B,EACjGu8B,GAAlBI,EACzB,CAoCA,MAAMW,GAA8B,mBAAXC,OAQzB,MAAMC,WAAoBtd,GACtB5W,UAAY,OACfA,gBAAkB,CACXvJ,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBrS,YAAa,EACb4L,iBAAiB,EACjBpB,uBAAwB,UACxBzK,MAAM,EACNwK,UAAU,EACVqkC,SAAS,EACTjjC,QAAS,GAEhB8P,qBAAuB,CAChB9kB,gBAAiB,kBACjBC,YAAa,eAEjB6kB,mBAAqB,CACjB7hB,aAAa,EACbE,WAAad,GAAgB,eAATA,GAAkC,SAATA,GAEjD,WAAA1C,CAAY6f,GACR2O,QACA/vB,KAAKkxB,UAAW,EAChBlxB,KAAK7L,aAAUwN,EACf3B,KAAK0iB,YAAS/gB,EACd3B,KAAKyhB,WAAQ9f,EACb3B,KAAK66C,eAAYl5C,EACjB3B,KAAK86C,WAAQn5C,EACb3B,KAAK+6C,aAAUp5C,EACf3B,KAAKg7C,eAAYr5C,EACjB3B,KAAKixB,YAAa,EAClBjxB,KAAKi7C,gBAAiB,EACtBj7C,KAAKgxB,mBAAgBrvB,EACjByf,GACA5vB,OAAOkP,OAAOV,KAAMohB,EAE5B,CACA,mBAAAsQ,CAAoB/T,EAAW5a,GAC3B,MAAM5O,EAAU6L,KAAK7L,QACrB,IAAKA,EAAQyiB,SAA8C,aAAnCziB,EAAQshB,0BAA2CthB,EAAQ0lD,UAAY75C,KAAKi7C,eAAgB,CAChH,MAAM51C,EAAOlR,EAAQqhB,SAAWxV,KAAKyhB,MAAQzhB,KAAK66C,UAClDvlC,GAA2BtV,KAAK+6C,QAAS5mD,EAASwpB,EAAWtY,EAAMtC,GACnE/C,KAAKi7C,gBAAiB,CAC1B,CACJ,CACA,UAAI3mC,CAAOA,GACPtU,KAAK+6C,QAAUzmC,SACRtU,KAAKg7C,iBACLh7C,KAAK86C,MACZ96C,KAAKi7C,gBAAiB,CAC1B,CACA,UAAI3mC,GACA,OAAOtU,KAAK+6C,OAChB,CACA,YAAI/9B,GACA,OAAOhd,KAAKg7C,YAAch7C,KAAKg7C,UD9vItC,SAA0B5uC,EAAM8uC,GAC7B,MAAM5mC,EAASlI,EAAKkI,OACdkB,EAAWpJ,EAAKjY,QAAQqhB,SACxB4G,EAAQ9H,EAAOvhB,OACrB,IAAKqpB,EACD,MAAO,GAEX,MAAM/W,IAAS+G,EAAKqV,OACd,MAAEroB,EAAM,IAAEC,GAnEnB,SAAyBib,EAAQ8H,EAAO/W,EAAMmQ,GAC3C,IAAIpc,EAAQ,EACRC,EAAM+iB,EAAQ,EAClB,GAAI/W,IAASmQ,EACT,KAAMpc,EAAQgjB,IAAU9H,EAAOlb,GAAOmb,MAClCnb,IAGR,KAAMA,EAAQgjB,GAAS9H,EAAOlb,GAAOmb,MACjCnb,IAMJ,IAJAA,GAASgjB,EACL/W,IACAhM,GAAOD,GAELC,EAAMD,GAASkb,EAAOjb,EAAM+iB,GAAO7H,MACrClb,IAGJ,OADAA,GAAO+iB,EACA,CACHhjB,QACAC,MAER,CA4C6B8hD,CAAgB7mC,EAAQ8H,EAAO/W,EAAMmQ,GAC9D,OAaH,SAAuBpJ,EAAM4Q,EAAU1I,EAAQ4mC,GAC5C,OAAKA,GAAmBA,EAAe3oC,YAAe+B,EAKzD,SAAyBlI,EAAM4Q,EAAU1I,EAAQ4mC,GAC9C,MAAME,EAAehvC,EAAKsW,OAAOvZ,aAC3BkyC,EAAYn+B,GAAU9Q,EAAKjY,UACzB68B,cAAe19B,EAAea,SAAS,SAAEqhB,IAAiBpJ,EAC5DgQ,EAAQ9H,EAAOvhB,OACfolB,EAAS,GACf,IAAIqF,EAAY69B,EACZjiD,EAAQ4jB,EAAS,GAAG5jB,MACpBxG,EAAIwG,EACR,SAASkiD,EAAS/hD,EAAGb,EAAG+zB,EAAG8uB,GACvB,MAAMC,EAAMhmC,GAAY,EAAI,EAC5B,GAAIjc,IAAMb,EAAV,CAIA,IADAa,GAAK6iB,EACC9H,EAAO/a,EAAI6iB,GAAO7H,MACpBhb,GAAKiiD,EAET,KAAMlnC,EAAO5b,EAAI0jB,GAAO7H,MACpB7b,GAAK8iD,EAELjiD,EAAI6iB,IAAU1jB,EAAI0jB,IAClBjE,EAAOziB,KAAK,CACR0D,MAAOG,EAAI6iB,EACX/iB,IAAKX,EAAI0jB,EACT/W,KAAMonB,EACNlqB,MAAOg5C,IAEX/9B,EAAY+9B,EACZniD,EAAQV,EAAI0jB,EAhBhB,CAkBJ,CACA,IAAK,MAAME,KAAWU,EAAS,CAC3B5jB,EAAQoc,EAAWpc,EAAQkjB,EAAQljB,MACnC,IACImJ,EADAoU,EAAOrC,EAAOlb,EAAQgjB,GAE1B,IAAIxpB,EAAIwG,EAAQ,EAAGxG,GAAK0pB,EAAQjjB,IAAKzG,IAAI,CACrC,MAAMyiB,EAAKf,EAAO1hB,EAAIwpB,GACtB7Z,EAAQ2a,GAAUg+B,EAAe3oC,WAAWxC,GAAcqrC,EAAc,CACpE7pD,KAAM,UACNkqD,GAAI9kC,EACJ6D,GAAInF,EACJqmC,aAAc9oD,EAAI,GAAKwpB,EACvBu/B,YAAa/oD,EAAIwpB,EACjB9oB,mBAEAiqB,GAAahb,EAAOib,IACpB89B,EAASliD,EAAOxG,EAAI,EAAG0pB,EAAQjX,KAAMmY,GAEzC7G,EAAOtB,EACPmI,EAAYjb,CAChB,CACInJ,EAAQxG,EAAI,GACZ0oD,EAASliD,EAAOxG,EAAI,EAAG0pB,EAAQjX,KAAMmY,EAE7C,CACA,OAAOrF,CACX,CA3DWyjC,CAAgBxvC,EAAM4Q,EAAU1I,EAAQ4mC,GAFpCl+B,CAGf,CAjBe6+B,CAAczvC,GADR,IAAboJ,EAC2B,CACvB,CACIpc,QACAC,MACAgM,SAjDf,SAAuBiP,EAAQlb,EAAOU,EAAKuL,GACxC,MAAM+W,EAAQ9H,EAAOvhB,OACfolB,EAAS,GACf,IAEI9e,EAFAkB,EAAOnB,EACPud,EAAOrC,EAAOlb,GAElB,IAAIC,EAAMD,EAAQ,EAAGC,GAAOS,IAAOT,EAAI,CACnC,MAAM+mB,EAAM9L,EAAOjb,EAAM+iB,GACrBgE,EAAI7L,MAAQ6L,EAAIE,KACX3J,EAAKpC,OACNlP,GAAO,EACP8S,EAAOziB,KAAK,CACR0D,MAAOA,EAAQgjB,EACf/iB,KAAMA,EAAM,GAAK+iB,EACjB/W,SAEJjM,EAAQmB,EAAO6lB,EAAIE,KAAOjnB,EAAM,OAGpCkB,EAAOlB,EACHsd,EAAKpC,OACLnb,EAAQC,IAGhBsd,EAAOyJ,CACX,CAQA,OAPa,OAAT7lB,GACA4d,EAAOziB,KAAK,CACR0D,MAAOA,EAAQgjB,EACf/iB,IAAKkB,EAAO6hB,EACZ/W,SAGD8S,CACX,CAqB+B2jC,CAAcxnC,EAAQlb,EAFrCC,EAAMD,EAAQC,EAAM+iB,EAAQ/iB,IACjB+S,EAAKyuC,WAAuB,IAAVzhD,GAAeC,IAAQ+iB,EAAQ,GAHjE9H,EAAQ4mC,EAKnB,CCyuImDa,CAAiB/7C,KAAMA,KAAK7L,QAAQmoB,SACnF,CACH,KAAA0mB,GACO,MAAMhmB,EAAWhd,KAAKgd,SAChB1I,EAAStU,KAAKsU,OACpB,OAAO0I,EAASjqB,QAAUuhB,EAAO0I,EAAS,GAAG5jB,MACjD,CACH,IAAAmB,GACO,MAAMyiB,EAAWhd,KAAKgd,SAChB1I,EAAStU,KAAKsU,OACd8H,EAAQY,EAASjqB,OACvB,OAAOqpB,GAAS9H,EAAO0I,EAASZ,EAAQ,GAAG/iB,IAC/C,CACH,WAAA2iD,CAAY5wC,EAAO+O,GACZ,MAAMhmB,EAAU6L,KAAK7L,QACf/C,EAAQga,EAAM+O,GACd7F,EAAStU,KAAKsU,OACd0I,EAAWD,GAAe/c,KAAM,CAClCma,WACA/gB,MAAOhI,EACPiI,IAAKjI,IAET,IAAK4rB,EAASjqB,OACV,OAEJ,MAAMolB,EAAS,GACT8jC,EA/Hb,SAAiC9nD,GAC9B,OAAIA,EAAQ0lD,QACDn/B,GAEPvmB,EAAQyiB,SAA8C,aAAnCziB,EAAQshB,uBACpBkF,GAEJJ,EACX,CAuH6B2hC,CAAwB/nD,GAC7C,IAAIvB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO6pB,EAASjqB,OAAQH,EAAIO,IAAQP,EAAE,CAC7C,MAAM,MAAEwG,EAAM,IAAEC,GAAS2jB,EAASpqB,GAC5B4nB,EAAKlG,EAAOlb,GACZqhB,EAAKnG,EAAOjb,GAClB,GAAImhB,IAAOC,EAAI,CACXtC,EAAOziB,KAAK8kB,GACZ,QACJ,CACA,MACM2hC,EAAeF,EAAazhC,EAAIC,EAD5B/jB,KAAKa,KAAKnG,EAAQopB,EAAGL,KAAcM,EAAGN,GAAYK,EAAGL,KAClBhmB,EAAQ0lD,SACrDsC,EAAahiC,GAAY/O,EAAM+O,GAC/BhC,EAAOziB,KAAKymD,EAChB,CACA,OAAyB,IAAlBhkC,EAAOplB,OAAeolB,EAAO,GAAKA,CAC7C,CACH,WAAAwhC,CAAY/2C,EAAK0Z,EAAS0Y,GAEnB,OADsBylB,GAAkBz6C,KACjCo8C,CAAcx5C,EAAK5C,KAAMsc,EAAS0Y,EAC7C,CACH,IAAAqnB,CAAKz5C,EAAKxJ,EAAOgjB,GACV,MAAMY,EAAWhd,KAAKgd,SAChBo/B,EAAgB3B,GAAkBz6C,MACxC,IAAIqF,EAAOrF,KAAKyhB,MAChBroB,EAAQA,GAAS,EACjBgjB,EAAQA,GAASpc,KAAKsU,OAAOvhB,OAASqG,EACtC,IAAK,MAAMkjB,KAAWU,EAClB3X,GAAQ+2C,EAAcx5C,EAAK5C,KAAMsc,EAAS,CACtCljB,QACAC,IAAKD,EAAQgjB,EAAQ,IAG7B,QAAS/W,CACb,CACH,IAAAka,CAAK3c,EAAK+a,EAAWvkB,EAAOgjB,GACrB,MAAMjoB,EAAU6L,KAAK7L,SAAW,CAAC,GAClB6L,KAAKsU,QAAU,IACnBvhB,QAAUoB,EAAQ8W,cACzBrI,EAAIwG,OAlIhB,SAAcxG,EAAKwJ,EAAMhT,EAAOgjB,GACxBs+B,KAActuC,EAAKjY,QAAQmoB,QA5BnC,SAA6B1Z,EAAKwJ,EAAMhT,EAAOgjB,GAC3C,IAAIigC,EAAOjwC,EAAK0uC,MACXuB,IACDA,EAAOjwC,EAAK0uC,MAAQ,IAAIH,OACpBvuC,EAAKiwC,KAAKA,EAAMjjD,EAAOgjB,IACvBigC,EAAK1xC,aAGbuuC,GAASt2C,EAAKwJ,EAAKjY,SACnByO,EAAIsI,OAAOmxC,EACf,CAmBQC,CAAoB15C,EAAKwJ,EAAMhT,EAAOgjB,GAlB9C,SAA0BxZ,EAAKwJ,EAAMhT,EAAOgjB,GACxC,MAAM,SAAEY,EAAS,QAAE7oB,GAAaiY,EAC1BgwC,EAAgB3B,GAAkBruC,GACxC,IAAK,MAAMkQ,KAAWU,EAClBk8B,GAASt2C,EAAKzO,EAASmoB,EAAQ/Z,OAC/BK,EAAI4H,YACA4xC,EAAcx5C,EAAKwJ,EAAMkQ,EAAS,CAClCljB,QACAC,IAAKD,EAAQgjB,EAAQ,KAErBxZ,EAAI+H,YAER/H,EAAIsI,QAEZ,CAMQqxC,CAAiB35C,EAAKwJ,EAAMhT,EAAOgjB,EAE3C,CA6HYmD,CAAK3c,EAAK5C,KAAM5G,EAAOgjB,GACvBxZ,EAAI4G,WAEJxJ,KAAKkxB,WACLlxB,KAAKi7C,gBAAiB,EACtBj7C,KAAK86C,WAAQn5C,EAErB,EAGJ,SAAS66C,GAAUpiC,EAAIhC,EAAKqN,EAAM6M,GAC9B,MAAMn+B,EAAUimB,EAAGjmB,SACX,CAACsxB,GAAOr0B,GAAWgpB,EAAGmZ,SAAS,CACnC9N,GACD6M,GACH,OAAO57B,KAAKa,IAAI6gB,EAAMhnB,GAAS+C,EAAQgW,OAAShW,EAAQsoD,SAC5D,CACA,MAAMC,WAAqBpf,GACvB5W,UAAY,QACZtB,OACA7Q,KACA+L,KAGEoG,gBAAkB,CAChBzb,YAAa,EACbwxC,UAAW,EACXE,iBAAkB,EAClBC,YAAa,EACb3yC,WAAY,SACZE,OAAQ,EACRD,SAAU,GAIZwc,qBAAuB,CACrB9kB,gBAAiB,kBACjBC,YAAa,eAEjB,WAAAN,CAAY6f,GACR2O,QACA/vB,KAAK7L,aAAUwN,EACf3B,KAAKolB,YAASzjB,EACd3B,KAAKuU,UAAO5S,EACZ3B,KAAKsgB,UAAO3e,EACRyf,GACA5vB,OAAOkP,OAAOV,KAAMohB,EAE5B,CACA,OAAAoR,CAAQqqB,EAAQC,EAAQxqB,GACpB,MAAMn+B,EAAU6L,KAAK7L,SACf,EAAEY,EAAE,EAAEE,GAAO+K,KAAKuzB,SAAS,CAC7B,IACA,KACDjB,GACH,OAAO57B,KAAKmB,IAAIglD,EAAS9nD,EAAG,GAAK2B,KAAKmB,IAAIilD,EAAS7nD,EAAG,GAAKyB,KAAKmB,IAAI1D,EAAQsoD,UAAYtoD,EAAQgW,OAAQ,EAC5G,CACA,QAAA4yC,CAASF,EAAQvqB,GACb,OAAOkqB,GAAUx8C,KAAM68C,EAAQ,IAAKvqB,EACxC,CACA,QAAA0qB,CAASF,EAAQxqB,GACb,OAAOkqB,GAAUx8C,KAAM88C,EAAQ,IAAKxqB,EACxC,CACA,cAAAY,CAAeZ,GACX,MAAM,EAAEv9B,EAAE,EAAEE,GAAO+K,KAAKuzB,SAAS,CAC7B,IACA,KACDjB,GACH,MAAO,CACHv9B,IACAE,IAER,CACA,IAAAqB,CAAKnC,GAED,IAAIgW,GADJhW,EAAUA,GAAW6L,KAAK7L,SAAW,CAAC,GACjBgW,QAAU,EAG/B,OAFAA,EAASzT,KAAKoD,IAAIqQ,EAAQA,GAAUhW,EAAQyoD,aAAe,GAE3B,GAAxBzyC,GADYA,GAAUhW,EAAQ8W,aAAe,GAEzD,CACA,IAAAsU,CAAK3c,EAAKyI,GACN,MAAMlX,EAAU6L,KAAK7L,QACjB6L,KAAKuU,MAAQpgB,EAAQgW,OAAS,KAAQgB,GAAenL,KAAMqL,EAAMrL,KAAK1J,KAAKnC,GAAW,KAG1FyO,EAAIkK,YAAc3Y,EAAQ0N,YAC1Be,EAAI+D,UAAYxS,EAAQ8W,YACxBrI,EAAImK,UAAY5Y,EAAQyN,gBACxB6H,GAAU7G,EAAKzO,EAAS6L,KAAKjL,EAAGiL,KAAK/K,GACzC,CACA,QAAA88B,GACI,MAAM59B,EAAU6L,KAAK7L,SAAW,CAAC,EAEjC,OAAOA,EAAQgW,OAAShW,EAAQsoD,SACpC,EAmgBJ,SAASQ,GAAW9iC,EAAU6oB,EAAOzoC,EAAM8K,GACvC,GAAIA,EACA,OAEJ,IAAIjM,EAAQ4pC,EAAM7oB,GACd9gB,EAAMkB,EAAK4f,GAKf,MAJiB,UAAbA,IACA/gB,EAAQH,EAAgBG,GACxBC,EAAMJ,EAAgBI,IAEnB,CACH8gB,WACA/gB,QACAC,MAER,CA+BA,SAAS6jD,GAAgB9jD,EAAOC,EAAKib,GACjC,KAAMjb,EAAMD,EAAOC,IAAM,CACrB,MAAM+R,EAAQkJ,EAAOjb,GACrB,IAAKhB,MAAM+S,EAAMrW,KAAOsD,MAAM+S,EAAMnW,GAChC,KAER,CACA,OAAOoE,CACX,CACA,SAAS8jD,GAAS/mD,EAAGC,EAAG4Y,EAAM5c,GAC1B,OAAI+D,GAAKC,EACEhE,EAAG+D,EAAE6Y,GAAO5Y,EAAE4Y,IAElB7Y,EAAIA,EAAE6Y,GAAQ5Y,EAAIA,EAAE4Y,GAAQ,CACvC,CAEA,SAASmuC,GAAoBC,EAAUjxC,GACnC,IAAIkI,EAAS,GACTmN,GAAQ,EAOZ,OANIpwB,EAAQgsD,IACR57B,GAAQ,EACRnN,EAAS+oC,GAET/oC,EArDR,SAA6B+oC,EAAUjxC,GACnC,MAAM,EAAErX,EAAG,KAAK,EAAEE,EAAG,MAAUooD,GAAY,CAAC,EACtCC,EAAalxC,EAAKkI,OAClBA,EAAS,GAyBf,OAxBAlI,EAAK4Q,SAAS9hB,QAAQ,EAAG9B,QAAQC,UAC7BA,EAAM6jD,GAAgB9jD,EAAOC,EAAKikD,GAClC,MAAMta,EAAQsa,EAAWlkD,GACnBmB,EAAO+iD,EAAWjkD,GACd,OAANpE,GACAqf,EAAO5e,KAAK,CACRX,EAAGiuC,EAAMjuC,EACTE,MAEJqf,EAAO5e,KAAK,CACRX,EAAGwF,EAAKxF,EACRE,OAES,OAANF,IACPuf,EAAO5e,KAAK,CACRX,IACAE,EAAG+tC,EAAM/tC,IAEbqf,EAAO5e,KAAK,CACRX,IACAE,EAAGsF,EAAKtF,OAIbqf,CACX,CAwBiBipC,CAAoBF,EAAUjxC,GAEpCkI,EAAOvhB,OAAS,IAAI6nD,GAAY,CACnCtmC,SACAngB,QAAS,CACLyiB,QAAS,GAEb6K,QACAo5B,UAAWp5B,IACV,IACT,CACA,SAAS+7B,GAAiB/pD,GACtB,OAAOA,IAA0B,IAAhBA,EAAOuX,IAC5B,CAEA,SAASyyC,GAAelpD,EAAShB,EAAOmqD,GAEpC,IAAI1yC,EADWzW,EAAQhB,GACLyX,KAClB,MAAM2yC,EAAU,CACZpqD,GAEJ,IAAII,EACJ,IAAK+pD,EACD,OAAO1yC,EAEX,MAAe,IAATA,IAA6C,IAA3B2yC,EAAQ1pD,QAAQ+W,IAAa,CACjD,IAAKlZ,EAAekZ,GAChB,OAAOA,EAGX,GADArX,EAASY,EAAQyW,IACZrX,EACD,OAAO,EAEX,GAAIA,EAAOiS,QACP,OAAOoF,EAEX2yC,EAAQjoD,KAAKsV,GACbA,EAAOrX,EAAOqX,IAClB,CACA,OAAO,CACX,CACC,SAAS4yC,GAAYxxC,EAAM7Y,EAAO6oB,GAC9B,MAAMpR,EAmDV,SAAyBoB,GACtB,MAAMjY,EAAUiY,EAAKjY,QACf0pD,EAAa1pD,EAAQ6W,KAC3B,IAAIA,EAAO7Y,EAAe0rD,GAAcA,EAAWlqD,OAAQkqD,GAI3D,YAHal8C,IAATqJ,IACAA,IAAS7W,EAAQyN,kBAER,IAAToJ,GAA2B,OAATA,KAGT,IAATA,EACO,SAEJA,EACX,CAjEkB8yC,CAAgB1xC,GAC9B,GAAIva,EAASmZ,GACT,OAAO3S,MAAM2S,EAAK5Z,QAAiB4Z,EAEvC,IAAIrX,EAAS2E,WAAW0S,GACxB,OAAIlZ,EAAe6B,IAAW+C,KAAKoB,MAAMnE,KAAYA,EAWzD,SAA2BoqD,EAASxqD,EAAOI,EAAQyoB,GAI/C,MAHgB,MAAZ2hC,GAA+B,MAAZA,IACnBpqD,EAASJ,EAAQI,KAEjBA,IAAWJ,GAASI,EAAS,GAAKA,GAAUyoB,IAGzCzoB,CACX,CAlBeqqD,CAAkBhzC,EAAK,GAAIzX,EAAOI,EAAQyoB,GAE9C,CACH,SACA,QACA,MACA,QACA,SACFnoB,QAAQ+W,IAAS,GAAKA,CAC5B,CAuFC,SAASizC,GAAe3pC,EAAQ4pC,EAAaC,GAC1C,MAAMC,EAAY,GAClB,IAAI,IAAIhsB,EAAI,EAAGA,EAAI+rB,EAAWprD,OAAQq/B,IAAI,CACtC,MAAMhmB,EAAO+xC,EAAW/rB,IAClB,MAAE4Q,EAAM,KAAEzoC,EAAK,MAAE6Q,GAAWizC,GAAUjyC,EAAM8xC,EAAa,KAC/D,MAAK9yC,GAAS43B,GAASzoC,GAGvB,GAAIyoC,EACAob,EAAUE,QAAQlzC,QAGlB,GADAkJ,EAAO5e,KAAK0V,IACP7Q,EACD,KAGZ,CACA+Z,EAAO5e,QAAQ0oD,EACnB,CACC,SAASC,GAAUjyC,EAAM8xC,EAAa/jC,GACnC,MAAM/O,EAAQgB,EAAK4vC,YAAYkC,EAAa/jC,GAC5C,IAAK/O,EACD,MAAO,CAAC,EAEZ,MAAMmzC,EAAanzC,EAAM+O,GACnB6C,EAAW5Q,EAAK4Q,SAChBsgC,EAAalxC,EAAKkI,OACxB,IAAI0uB,GAAQ,EACRzoC,GAAO,EACX,IAAI,IAAI3H,EAAI,EAAGA,EAAIoqB,EAASjqB,OAAQH,IAAI,CACpC,MAAM0pB,EAAUU,EAASpqB,GACnB4rD,EAAalB,EAAWhhC,EAAQljB,OAAO+gB,GACvCskC,EAAYnB,EAAWhhC,EAAQjjB,KAAK8gB,GAC1C,GAAIpgB,EAAWwkD,EAAYC,EAAYC,GAAY,CAC/Czb,EAAQub,IAAeC,EACvBjkD,EAAOgkD,IAAeE,EACtB,KACJ,CACJ,CACA,MAAO,CACHzb,QACAzoC,OACA6Q,QAER,CAEA,MAAMszC,GACF,WAAAn9C,CAAY8K,GACRrM,KAAKjL,EAAIsX,EAAKtX,EACdiL,KAAK/K,EAAIoX,EAAKpX,EACd+K,KAAKmK,OAASkC,EAAKlC,MACvB,CACA,WAAAwvC,CAAY/2C,EAAK2D,EAAQ8F,GACrB,MAAM,EAAEtX,EAAE,EAAEE,EAAE,OAAEkV,GAAYnK,KAM5B,OALAuG,EAASA,GAAU,CACfnN,MAAO,EACPC,IAAK1C,GAETiM,EAAI8H,IAAI3V,EAAGE,EAAGkV,EAAQ5D,EAAOlN,IAAKkN,EAAOnN,OAAO,IACxCiT,EAAK9F,MACjB,CACA,WAAAy1C,CAAY5wC,GACR,MAAM,EAAErW,EAAE,EAAEE,EAAE,OAAEkV,GAAYnK,KACtB7G,EAAQiS,EAAMjS,MACpB,MAAO,CACHpE,EAAGA,EAAI2B,KAAKsG,IAAI7D,GAASgR,EACzBlV,EAAGA,EAAIyB,KAAKqF,IAAI5C,GAASgR,EACzBhR,QAER,EAiEJ,SAASwlD,GAAU/7C,EAAKnP,EAAQ4X,GAC5B,MAAM1X,EA/DV,SAAoBF,GAChB,MAAM,MAAEwM,EAAM,KAAE+K,EAAK,KAAEoB,GAAU3Y,EACjC,GAAI3B,EAAekZ,GACf,OAcP,SAAwB/K,EAAO1M,GAC5B,MAAMuqB,EAAO7d,EAAM+oB,eAAez1B,GAElC,OADgBuqB,GAAQ7d,EAAMs1C,iBAAiBhiD,GAC9BuqB,EAAKkK,QAAU,IACpC,CAlBe42B,CAAe3+C,EAAO+K,GAEjC,GAAa,UAATA,EACA,OAjHR,SAAyBvX,GACrB,MAAM,MAAEiQ,EAAM,MAAEnQ,EAAM,KAAE6Y,GAAU3Y,EAC5B6gB,EAAS,GACT0I,EAAW5Q,EAAK4Q,SAChB6hC,EAAezyC,EAAKkI,OACpB6pC,EAgBT,SAAuBz6C,EAAOnQ,GAC3B,MAAMurD,EAAQ,GACRne,EAAQj9B,EAAMuhB,wBAAwB,QAC5C,IAAI,IAAIryB,EAAI,EAAGA,EAAI+tC,EAAM5tC,OAAQH,IAAI,CACjC,MAAMkrB,EAAO6iB,EAAM/tC,GACnB,GAAIkrB,EAAKvqB,QAAUA,EACf,MAECuqB,EAAK6N,QACNmzB,EAAMR,QAAQxgC,EAAKkK,QAE3B,CACA,OAAO82B,CACX,CA7BuBC,CAAcr7C,EAAOnQ,GACxC4qD,EAAWzoD,KAAK0nD,GAAoB,CAChCroD,EAAG,KACHE,EAAGyO,EAAMwC,QACVkG,IACH,IAAI,IAAIxZ,EAAI,EAAGA,EAAIoqB,EAASjqB,OAAQH,IAAI,CACpC,MAAM0pB,EAAUU,EAASpqB,GACzB,IAAI,IAAIw/B,EAAI9V,EAAQljB,MAAOg5B,GAAK9V,EAAQjjB,IAAK+4B,IACzC6rB,GAAe3pC,EAAQuqC,EAAazsB,GAAI+rB,EAEhD,CACA,OAAO,IAAIvD,GAAY,CACnBtmC,SACAngB,QAAS,CAAC,GAElB,CA6Fe6qD,CAAgBvrD,GAE3B,GAAa,UAATuX,EACA,OAAO,EAEX,MAAMqyC,EAWV,SAAyB5pD,GAErB,OADcA,EAAOiQ,OAAS,CAAC,GACrBu7C,yBAiBd,SAAiCxrD,GAC7B,MAAM,MAAEiQ,EAAM,KAAEsH,GAAUvX,EACpBU,EAAUuP,EAAMvP,QAChBpB,EAAS2Q,EAAMqnB,YAAYh4B,OAC3BqG,EAAQjF,EAAQxB,QAAU+Q,EAAM5J,IAAM4J,EAAM7J,IAC5CzI,EAtLT,SAAyB4Z,EAAMtH,EAAOw7C,GACnC,IAAI9tD,EAUJ,OARIA,EADS,UAAT4Z,EACQk0C,EACQ,QAATl0C,EACCtH,EAAMvP,QAAQxB,QAAU+Q,EAAM7J,IAAM6J,EAAM5J,IAC3CjI,EAASmZ,GACRA,EAAK5Z,MAELsS,EAAM0jC,eAEXh2C,CACX,CA0KkB+tD,CAAgBn0C,EAAMtH,EAAOtK,GACrCzF,EAAS,GACf,GAAIQ,EAAQuS,KAAK04C,SAAU,CACvB,MAAMnsB,EAASvvB,EAAMu7C,yBAAyB,EAAG7lD,GACjD,OAAO,IAAIslD,GAAU,CACjB3pD,EAAGk+B,EAAOl+B,EACVE,EAAGg+B,EAAOh+B,EACVkV,OAAQzG,EAAM27C,8BAA8BjuD,IAEpD,CACA,IAAI,IAAIwB,EAAI,EAAGA,EAAIG,IAAUH,EACzBe,EAAO+B,KAAKgO,EAAMu7C,yBAAyBrsD,EAAGxB,IAElD,OAAOuC,CACX,CAnCe2rD,CAAwB7rD,GAIvC,SAA+BA,GAC3B,MAAM,MAAEiQ,EAAO,CAAC,EAAE,KAAEsH,GAAUvX,EACxBqV,EApLT,SAAyBkC,EAAMtH,GAC5B,IAAIoF,EAAQ,KAUZ,MATa,UAATkC,EACAlC,EAAQpF,EAAMwC,OACE,QAAT8E,EACPlC,EAAQpF,EAAMsC,IACPnU,EAASmZ,GAChBlC,EAAQpF,EAAMysB,iBAAiBnlB,EAAK5Z,OAC7BsS,EAAM8tB,eACb1oB,EAAQpF,EAAM8tB,gBAEX1oB,CACX,CAwKkBy2C,CAAgBv0C,EAAMtH,GACpC,GAAI5R,EAAegX,GAAQ,CACvB,MAAMosB,EAAaxxB,EAAMwzB,eACzB,MAAO,CACHniC,EAAGmgC,EAAapsB,EAAQ,KACxB7T,EAAGigC,EAAa,KAAOpsB,EAE/B,CACA,OAAO,IACX,CAbW02C,CAAsB/rD,EACjC,CAjBqBgsD,CAAgBhsD,GACjC,OAAI4pD,aAAoBqB,GACbrB,EAEJD,GAAoBC,EAAUjxC,EACzC,CA+CmByE,CAAWpd,IACpB,MAAEwM,EAAM,MAAE1M,EAAM,KAAE6Y,EAAK,MAAE1I,EAAM,KAAE+hB,GAAUhyB,EAC3CisD,EAAWtzC,EAAKjY,QAChB0pD,EAAa6B,EAAS10C,KACtB3M,EAAQqhD,EAAS99C,iBACjB,MAAE+9C,EAAOthD,EAAM,MAAEygD,EAAOzgD,GAAWw/C,GAAc,CAAC,EAClD//B,EAAO7d,EAAM+oB,eAAez1B,GAC5BiT,EAAOqX,GAAmB5d,EAAO6d,GACnCnqB,GAAUyY,EAAKkI,OAAOvhB,SACtBwY,GAAS3I,EAAKyI,GActB,SAAgBzI,EAAKwe,GACjB,MAAM,KAAEhV,EAAK,OAAEzY,EAAO,MAAEgsD,EAAM,MAAEb,EAAM,KAAEzzC,EAAK,MAAE3H,EAAM,KAAE8C,GAAU4a,EAC3DjH,EAAW/N,EAAKqV,MAAQ,QAAUL,EAAIqE,KAC5C7iB,EAAIwG,OACJ,IAAIw2C,EAAYd,EACZA,IAAUa,IACO,MAAbxlC,GACA0lC,GAAaj9C,EAAKjP,EAAQ0X,EAAKrF,KAC/BgF,GAAKpI,EAAK,CACNwJ,OACAzY,SACA0K,MAAOshD,EACPj8C,QACAyW,WACA3T,SAEJ5D,EAAI4G,UACJ5G,EAAIwG,OACJy2C,GAAaj9C,EAAKjP,EAAQ0X,EAAKnF,SACX,MAAbiU,IACP2lC,GAAel9C,EAAKjP,EAAQ0X,EAAKlF,MACjC6E,GAAKpI,EAAK,CACNwJ,OACAzY,SACA0K,MAAOygD,EACPp7C,QACAyW,WACA3T,SAEJ5D,EAAI4G,UACJ5G,EAAIwG,OACJ02C,GAAel9C,EAAKjP,EAAQ0X,EAAKpF,OACjC25C,EAAYD,IAGpB30C,GAAKpI,EAAK,CACNwJ,OACAzY,SACA0K,MAAOuhD,EACPl8C,QACAyW,WACA3T,SAEJ5D,EAAI4G,SACR,CAzDQu2C,CAAOn9C,EAAK,CACRwJ,OACAzY,SACAgsD,QACAb,QACAzzC,OACA3H,QACA+hB,OACAjf,SAEJgF,GAAW5I,GAEnB,CA8CA,SAASi9C,GAAaj9C,EAAKjP,EAAQqsD,GAC/B,MAAM,SAAEhjC,EAAS,OAAE1I,GAAY3gB,EAC/B,IAAIqvC,GAAQ,EACRid,GAAW,EACfr9C,EAAI4H,YACJ,IAAK,MAAM8R,KAAWU,EAAS,CAC3B,MAAM,MAAE5jB,EAAM,IAAEC,GAASijB,EACnB5H,EAAaJ,EAAOlb,GACpBq4B,EAAYnd,EAAO4oC,GAAgB9jD,EAAOC,EAAKib,IACjD0uB,GACApgC,EAAIgI,OAAO8J,EAAW3f,EAAG2f,EAAWzf,GACpC+tC,GAAQ,IAERpgC,EAAIiI,OAAO6J,EAAW3f,EAAGirD,GACzBp9C,EAAIiI,OAAO6J,EAAW3f,EAAG2f,EAAWzf,IAExCgrD,IAAatsD,EAAOgmD,YAAY/2C,EAAK0Z,EAAS,CAC1C0S,KAAMixB,IAENA,EACAr9C,EAAI+H,YAEJ/H,EAAIiI,OAAO4mB,EAAU18B,EAAGirD,EAEhC,CACAp9C,EAAIiI,OAAOlX,EAAOqvC,QAAQjuC,EAAGirD,GAC7Bp9C,EAAI+H,YACJ/H,EAAI4D,MACR,CACA,SAASs5C,GAAel9C,EAAKjP,EAAQusD,GACjC,MAAM,SAAEljC,EAAS,OAAE1I,GAAY3gB,EAC/B,IAAIqvC,GAAQ,EACRid,GAAW,EACfr9C,EAAI4H,YACJ,IAAK,MAAM8R,KAAWU,EAAS,CAC3B,MAAM,MAAE5jB,EAAM,IAAEC,GAASijB,EACnB5H,EAAaJ,EAAOlb,GACpBq4B,EAAYnd,EAAO4oC,GAAgB9jD,EAAOC,EAAKib,IACjD0uB,GACApgC,EAAIgI,OAAO8J,EAAW3f,EAAG2f,EAAWzf,GACpC+tC,GAAQ,IAERpgC,EAAIiI,OAAOq1C,EAAOxrC,EAAWzf,GAC7B2N,EAAIiI,OAAO6J,EAAW3f,EAAG2f,EAAWzf,IAExCgrD,IAAatsD,EAAOgmD,YAAY/2C,EAAK0Z,EAAS,CAC1C0S,KAAMixB,IAENA,EACAr9C,EAAI+H,YAEJ/H,EAAIiI,OAAOq1C,EAAOzuB,EAAUx8B,EAEpC,CACA2N,EAAIiI,OAAOq1C,EAAOvsD,EAAOqvC,QAAQ/tC,GACjC2N,EAAI+H,YACJ/H,EAAI4D,MACR,CACA,SAASwE,GAAKpI,EAAKwe,GACf,MAAM,KAAEhV,EAAK,OAAEzY,EAAO,SAAEwmB,EAAS,MAAE9b,EAAM,MAAEqF,EAAM,KAAE8C,GAAU4a,EACvDpE,EAlgBV,SAAmB5Q,EAAMzY,EAAQwmB,GAC7B,MAAM6C,EAAW5Q,EAAK4Q,SAChB1I,EAASlI,EAAKkI,OACd6rC,EAAUxsD,EAAO2gB,OACjBjf,EAAQ,GACd,IAAK,MAAMinB,KAAWU,EAAS,CAC3B,IAAI,MAAE5jB,EAAM,IAAEC,GAASijB,EACvBjjB,EAAM6jD,GAAgB9jD,EAAOC,EAAKib,GAClC,MAAM/N,EAAS02C,GAAW9iC,EAAU7F,EAAOlb,GAAQkb,EAAOjb,GAAMijB,EAAQjX,MACxE,IAAK1R,EAAOqpB,SAAU,CAClB3nB,EAAMK,KAAK,CACPjC,OAAQ6oB,EACR3oB,OAAQ4S,EACRnN,MAAOkb,EAAOlb,GACdC,IAAKib,EAAOjb,KAEhB,QACJ,CACA,MAAM+mD,EAAiBrjC,GAAeppB,EAAQ4S,GAC9C,IAAK,MAAM85C,KAAOD,EAAe,CAC7B,MAAME,EAAYrD,GAAW9iC,EAAUgmC,EAAQE,EAAIjnD,OAAQ+mD,EAAQE,EAAIhnD,KAAMgnD,EAAIh7C,MAC3Ek7C,EAAclkC,GAAcC,EAAShI,EAAQgsC,GACnD,IAAK,MAAME,KAAcD,EACrBlrD,EAAMK,KAAK,CACPjC,OAAQ+sD,EACR7sD,OAAQ0sD,EACRjnD,MAAO,CACH,CAAC+gB,GAAWgjC,GAAS52C,EAAQ+5C,EAAW,QAAS5pD,KAAKoD,MAE1DT,IAAK,CACD,CAAC8gB,GAAWgjC,GAAS52C,EAAQ+5C,EAAW,MAAO5pD,KAAKmD,OAIpE,CACJ,CACA,OAAOxE,CACX,CA6dqB2lD,CAAU5uC,EAAMzY,EAAQwmB,GACzC,IAAK,MAAQ1mB,OAAQgtD,EAAM9sD,OAAQ0sD,EAAI,MAAEjnD,EAAM,IAAEC,KAAU2jB,EAAS,CAChE,MAAQza,OAAO,gBAAEX,EAAiBvD,GAAW,CAAC,GAAOoiD,EAC/CC,GAAsB,IAAX/sD,EACjBiP,EAAIwG,OACJxG,EAAImK,UAAYnL,EAChB++C,GAAW/9C,EAAKc,EAAO8C,EAAMk6C,GAAYzD,GAAW9iC,EAAU/gB,EAAOC,IACrEuJ,EAAI4H,YACJ,MAAMy1C,IAAa7zC,EAAKutC,YAAY/2C,EAAK69C,GACzC,IAAIp7C,EACJ,GAAIq7C,EAAU,CACNT,EACAr9C,EAAI+H,YAEJi2C,GAAmBh+C,EAAKjP,EAAQ0F,EAAK8gB,GAEzC,MAAM0mC,IAAeltD,EAAOgmD,YAAY/2C,EAAKy9C,EAAK,CAC9CrxB,KAAMixB,EACNttD,SAAS,IAEb0S,EAAO46C,GAAYY,EACdx7C,GACDu7C,GAAmBh+C,EAAKjP,EAAQyF,EAAO+gB,EAE/C,CACAvX,EAAI+H,YACJ/H,EAAIoI,KAAK3F,EAAO,UAAY,WAC5BzC,EAAI4G,SACR,CACJ,CACA,SAASm3C,GAAW/9C,EAAKc,EAAO8C,EAAMD,GAClC,MAAMoX,EAAYja,EAAMzD,MAAM0d,WACxB,SAAExD,EAAS,MAAE/gB,EAAM,IAAEC,GAASkN,GAAU,CAAC,EAC/C,GAAiB,MAAb4T,GAAiC,MAAbA,EAAkB,CACtC,IAAIhU,EAAMH,EAAKC,EAAOC,EACL,MAAbiU,GACAhU,EAAO/M,EACP4M,EAAM2X,EAAU3X,IAChBC,EAAQ5M,EACR6M,EAASyX,EAAUzX,SAEnBC,EAAOwX,EAAUxX,KACjBH,EAAM5M,EACN6M,EAAQ0X,EAAU1X,MAClBC,EAAS7M,GAEbuJ,EAAI4H,YACAhE,IACAL,EAAOzP,KAAKoD,IAAIqM,EAAMK,EAAKL,MAC3BF,EAAQvP,KAAKmD,IAAIoM,EAAOO,EAAKP,OAC7BD,EAAMtP,KAAKoD,IAAIkM,EAAKQ,EAAKR,KACzBE,EAASxP,KAAKmD,IAAIqM,EAAQM,EAAKN,SAEnCtD,EAAImI,KAAK5E,EAAMH,EAAKC,EAAQE,EAAMD,EAASF,GAC3CpD,EAAI4D,MACR,CACJ,CACA,SAASo6C,GAAmBh+C,EAAKjP,EAAQyX,EAAO+O,GAC5C,MAAM2mC,EAAoBntD,EAAOqoD,YAAY5wC,EAAO+O,GAChD2mC,GACAl+C,EAAIiI,OAAOi2C,EAAkB/rD,EAAG+rD,EAAkB7rD,EAE1D,CAEA,IAAI1B,GAAQ,CACRrC,GAAI,SACJ,mBAAA6vD,CAAqB9gD,EAAO+gD,EAAO7sD,GAC/B,MAAMioB,GAASnc,EAAMsI,KAAKzG,UAAY,IAAI/O,OACpCwB,EAAU,GAChB,IAAIupB,EAAMlrB,EAAGwZ,EAAM3Y,EACnB,IAAIb,EAAI,EAAGA,EAAIwpB,IAASxpB,EACpBkrB,EAAO7d,EAAM+oB,eAAep2B,GAC5BwZ,EAAO0R,EAAKkK,QACZv0B,EAAS,KACL2Y,GAAQA,EAAKjY,SAAWiY,aAAgBwuC,KACxCnnD,EAAS,CACLmS,QAAS3F,EAAMs1C,iBAAiB3iD,GAChCW,MAAOX,EACPoY,KAAM4yC,GAAYxxC,EAAMxZ,EAAGwpB,GAC3Bnc,QACAwlB,KAAM3H,EAAKqH,WAAWhxB,QAAQ4O,UAC9BW,MAAOoa,EAAKiH,OACZ3Y,SAGR0R,EAAKmjC,QAAUxtD,EACfc,EAAQmB,KAAKjC,GAEjB,IAAIb,EAAI,EAAGA,EAAIwpB,IAASxpB,EACpBa,EAASc,EAAQ3B,GACZa,IAA0B,IAAhBA,EAAOuX,OAGtBvX,EAAOuX,KAAOyyC,GAAelpD,EAAS3B,EAAGuB,EAAQupD,WAEzD,EACA,UAAAwD,CAAYjhD,EAAO+gD,EAAO7sD,GACtB,MAAMorB,EAA4B,eAArBprB,EAAQgtD,SACfp9B,EAAW9jB,EAAMkyB,+BACjB9mB,EAAOpL,EAAM0d,UACnB,IAAI,IAAI/qB,EAAImxB,EAAShxB,OAAS,EAAGH,GAAK,IAAKA,EAAE,CACzC,MAAMa,EAASswB,EAASnxB,GAAGquD,QACtBxtD,IAGLA,EAAO2Y,KAAKslB,oBAAoBrmB,EAAM5X,EAAOgyB,MACzClG,GAAQ9rB,EAAOuX,MACf2zC,GAAU1+C,EAAM2C,IAAKnP,EAAQ4X,GAErC,CACJ,EACA,kBAAA+1C,CAAoBnhD,EAAO+gD,EAAO7sD,GAC9B,GAAyB,uBAArBA,EAAQgtD,SACR,OAEJ,MAAMp9B,EAAW9jB,EAAMkyB,+BACvB,IAAI,IAAIv/B,EAAImxB,EAAShxB,OAAS,EAAGH,GAAK,IAAKA,EAAE,CACzC,MAAMa,EAASswB,EAASnxB,GAAGquD,QACvBzD,GAAiB/pD,IACjBkrD,GAAU1+C,EAAM2C,IAAKnP,EAAQwM,EAAM0d,UAE3C,CACJ,EACA,iBAAA0jC,CAAmBphD,EAAO3N,EAAM6B,GAC5B,MAAMV,EAASnB,EAAKwrB,KAAKmjC,QACpBzD,GAAiB/pD,IAAgC,sBAArBU,EAAQgtD,UAGzCxC,GAAU1+C,EAAM2C,IAAKnP,EAAQwM,EAAM0d,UACvC,EACA/Y,SAAU,CACN84C,WAAW,EACXyD,SAAU,sBAIlB,MAAMG,GAAa,CAACC,EAAW1W,KAC3B,IAAI,UAAE2W,EAAW3W,EAAS,SAAE4W,EAAU5W,GAAc0W,EAKpD,OAJIA,EAAUG,gBACVF,EAAY9qD,KAAKmD,IAAI2nD,EAAW3W,GAChC4W,EAAWF,EAAUI,iBAAmBjrD,KAAKmD,IAAI4nD,EAAU5W,IAExD,CACH4W,WACAD,YACAI,WAAYlrD,KAAKoD,IAAI+wC,EAAU2W,KAIvC,MAAMK,WAAevkB,GACpB,WAAA/7B,CAAYkhB,GACLsN,QACA/vB,KAAK8hD,QAAS,EACd9hD,KAAK+hD,eAAiB,GAC7B/hD,KAAKgiD,aAAe,KACbhiD,KAAKiiD,cAAe,EACpBjiD,KAAKC,MAAQwiB,EAAOxiB,MACpBD,KAAK7L,QAAUsuB,EAAOtuB,QACtB6L,KAAK4C,IAAM6f,EAAO7f,IAClB5C,KAAKkiD,iBAAcvgD,EACnB3B,KAAKmiD,iBAAcxgD,EACnB3B,KAAKoiD,gBAAazgD,EAClB3B,KAAK88B,eAAYn7B,EACjB3B,KAAK8N,cAAWnM,EAChB3B,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKuJ,YAAS5H,EACd3B,KAAKqH,WAAQ1F,EACb3B,KAAKm/B,cAAWx9B,EAChB3B,KAAKiyB,cAAWtwB,EAChB3B,KAAKyC,YAASd,EACd3B,KAAKk2B,cAAWv0B,CACpB,CACA,MAAAogB,CAAOjU,EAAUgvB,EAAWD,GACxB78B,KAAK8N,SAAWA,EAChB9N,KAAK88B,UAAYA,EACjB98B,KAAKm/B,SAAWtC,EAChB78B,KAAKqhC,gBACLrhC,KAAKqiD,cACLriD,KAAK2jC,KACT,CACA,aAAAtC,GACQrhC,KAAKk3B,gBACLl3B,KAAKqH,MAAQrH,KAAK8N,SAClB9N,KAAKmG,KAAOnG,KAAKm/B,SAASh5B,KAC1BnG,KAAKiG,MAAQjG,KAAKqH,QAElBrH,KAAKuJ,OAASvJ,KAAK88B,UACnB98B,KAAKgG,IAAMhG,KAAKm/B,SAASn5B,IACzBhG,KAAKkG,OAASlG,KAAKuJ,OAE3B,CACA,WAAA84C,GACI,MAAMd,EAAYvhD,KAAK7L,QAAQ22B,QAAU,CAAC,EAC1C,IAAIo3B,EAAc9vD,EAASmvD,EAAUe,eAAgB,CACjDtiD,KAAKC,OACND,OAAS,GACRuhD,EAAUruC,SACVgvC,EAAcA,EAAYhvC,OAAQ3c,GAAOgrD,EAAUruC,OAAO3c,EAAMyJ,KAAKC,MAAMsI,QAE3Eg5C,EAAU7sB,OACVwtB,EAAcA,EAAYxtB,KAAK,CAACt+B,EAAGC,IAAIkrD,EAAU7sB,KAAKt+B,EAAGC,EAAG2J,KAAKC,MAAMsI,QAEvEvI,KAAK7L,QAAQxB,SACbuvD,EAAYvvD,UAEhBqN,KAAKkiD,YAAcA,CACvB,CACA,GAAAve,GACI,MAAM,QAAExvC,EAAQ,IAAEyO,GAAS5C,KAC3B,IAAK7L,EAAQiS,QAET,YADApG,KAAKqH,MAAQrH,KAAKuJ,OAAS,GAG/B,MAAMg4C,EAAYptD,EAAQ22B,OACpBy3B,EAAYlzC,GAAOkyC,EAAUl/C,MAC7BwoC,EAAW0X,EAAUjsD,KACrB+uC,EAAcrlC,KAAKwiD,uBACnB,SAAEf,EAAS,WAAEG,GAAgBN,GAAWC,EAAW1W,GACzD,IAAIxjC,EAAOkC,EACX3G,EAAIP,KAAOkgD,EAAU75C,OACjB1I,KAAKk3B,gBACL7vB,EAAQrH,KAAK8N,SACbvE,EAASvJ,KAAKyiD,SAASpd,EAAawF,EAAU4W,EAAUG,GAAc,KAEtEr4C,EAASvJ,KAAK88B,UACdz1B,EAAQrH,KAAK0iD,SAASrd,EAAakd,EAAWd,EAAUG,GAAc,IAE1E5hD,KAAKqH,MAAQ3Q,KAAKmD,IAAIwN,EAAOlT,EAAQ2Z,UAAY9N,KAAK8N,UACtD9N,KAAKuJ,OAAS7S,KAAKmD,IAAI0P,EAAQpV,EAAQ2oC,WAAa98B,KAAK88B,UAC7D,CACH,QAAA2lB,CAASpd,EAAawF,EAAU4W,EAAUG,GACnC,MAAM,IAAEh/C,EAAI,SAAEkL,EAAW3Z,SAAW22B,QAAQ,QAAE/kB,KAAmB/F,KAC3D2iD,EAAW3iD,KAAK+hD,eAAiB,GACjCK,EAAapiD,KAAKoiD,WAAa,CACjC,GAEE5/C,EAAao/C,EAAa77C,EAChC,IAAI68C,EAAcvd,EAClBziC,EAAI6K,UAAY,OAChB7K,EAAI8K,aAAe,SACnB,IAAIm1C,GAAO,EACP78C,GAAOxD,EAkBX,OAjBAxC,KAAKkiD,YAAYhnD,QAAQ,CAAC4nD,EAAYlwD,KAClC,MAAMyoB,EAAYomC,EAAW5W,EAAW,EAAIjoC,EAAIgG,YAAYk6C,EAAWv7C,MAAMF,OACnE,IAANzU,GAAWwvD,EAAWA,EAAWrvD,OAAS,GAAKsoB,EAAY,EAAItV,EAAU+H,KACzE80C,GAAepgD,EACf4/C,EAAWA,EAAWrvD,QAAUH,EAAI,EAAI,EAAI,IAAM,EAClDoT,GAAOxD,EACPqgD,KAEJF,EAAS/vD,GAAK,CACVuT,KAAM,EACNH,MACA68C,MACAx7C,MAAOgU,EACP9R,OAAQq4C,GAEZQ,EAAWA,EAAWrvD,OAAS,IAAMsoB,EAAYtV,IAE9C68C,CACX,CACA,QAAAF,CAASrd,EAAakd,EAAWd,EAAUsB,GACvC,MAAM,IAAEngD,EAAI,UAAEk6B,EAAY3oC,SAAW22B,QAAQ,QAAE/kB,KAAmB/F,KAC5D2iD,EAAW3iD,KAAK+hD,eAAiB,GACjCI,EAAcniD,KAAKmiD,YAAc,GACjCa,EAAclmB,EAAYuI,EAChC,IAAI4d,EAAal9C,EACbm9C,EAAkB,EAClBC,EAAmB,EACnBh9C,EAAO,EACPi9C,EAAM,EA4BV,OA3BApjD,KAAKkiD,YAAYhnD,QAAQ,CAAC4nD,EAAYlwD,KAClC,MAAM,UAAEyoB,EAAU,WAAEumC,GAqRhC,SAA2BH,EAAUc,EAAW3/C,EAAKkgD,EAAYC,GAC7D,MAAM1nC,EAOV,SAA4BynC,EAAYrB,EAAUc,EAAW3/C,GACzD,IAAIygD,EAAiBP,EAAWv7C,KAIhC,OAHI87C,GAA4C,iBAAnBA,IACzBA,EAAiBA,EAAenjC,OAAO,CAAC9pB,EAAGC,IAAID,EAAErD,OAASsD,EAAEtD,OAASqD,EAAIC,IAEtEorD,EAAWc,EAAUjsD,KAAO,EAAIsM,EAAIgG,YAAYy6C,GAAgBh8C,KAC3E,CAbsBi8C,CAAmBR,EAAYrB,EAAUc,EAAW3/C,GAChEg/C,EAaV,SAA6BmB,EAAaD,EAAYS,GAClD,IAAI3B,EAAamB,EAIjB,MAH+B,iBAApBD,EAAWv7C,OAClBq6C,EAAa4B,GAA0BV,EAAYS,IAEhD3B,CACX,CAnBuB6B,CAAoBV,EAAaD,EAAYP,EAAU//C,YAC1E,MAAO,CACH6Y,YACAumC,aAER,CA5RgD8B,CAAkBjC,EAAUc,EAAW3/C,EAAKkgD,EAAYC,GACxFnwD,EAAI,GAAKuwD,EAAmBvB,EAAa,EAAI77C,EAAUi9C,IACvDC,GAAcC,EAAkBn9C,EAChCo8C,EAAYzsD,KAAK,CACb2R,MAAO67C,EACP35C,OAAQ45C,IAEZh9C,GAAQ+8C,EAAkBn9C,EAC1Bq9C,IACAF,EAAkBC,EAAmB,GAEzCR,EAAS/vD,GAAK,CACVuT,OACAH,IAAKm9C,EACLC,MACA/7C,MAAOgU,EACP9R,OAAQq4C,GAEZsB,EAAkBxsD,KAAKoD,IAAIopD,EAAiB7nC,GAC5C8nC,GAAoBvB,EAAa77C,IAErCk9C,GAAcC,EACdf,EAAYzsD,KAAK,CACb2R,MAAO67C,EACP35C,OAAQ45C,IAELF,CACX,CACA,cAAAU,GACI,IAAK3jD,KAAK7L,QAAQiS,QACd,OAEJ,MAAMi/B,EAAcrlC,KAAKwiD,uBACjBT,eAAgBY,EAAWxuD,SAAS,MAAEuH,EAAQovB,QAAQ,QAAE/kB,GAAW,IAAEiV,IAAYhb,KACnF4jD,EAAY7oC,GAAcC,EAAKhb,KAAKmG,KAAMnG,KAAKqH,OACrD,GAAIrH,KAAKk3B,eAAgB,CACrB,IAAI2rB,EAAM,EACN18C,EAAOxK,GAAeD,EAAOsE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQjG,KAAKoiD,WAAWS,IACnF,IAAK,MAAMgB,KAAUlB,EACbE,IAAQgB,EAAOhB,MACfA,EAAMgB,EAAOhB,IACb18C,EAAOxK,GAAeD,EAAOsE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQjG,KAAKoiD,WAAWS,KAEnFgB,EAAO79C,KAAOhG,KAAKgG,IAAMq/B,EAAct/B,EACvC89C,EAAO19C,KAAOy9C,EAAUxoC,WAAWwoC,EAAU7uD,EAAEoR,GAAO09C,EAAOx8C,OAC7DlB,GAAQ09C,EAAOx8C,MAAQtB,CAE/B,KAAO,CACH,IAAIq9C,EAAM,EACNp9C,EAAMrK,GAAeD,EAAOsE,KAAKgG,IAAMq/B,EAAct/B,EAAS/F,KAAKkG,OAASlG,KAAKmiD,YAAYiB,GAAK75C,QACtG,IAAK,MAAMs6C,KAAUlB,EACbkB,EAAOT,MAAQA,IACfA,EAAMS,EAAOT,IACbp9C,EAAMrK,GAAeD,EAAOsE,KAAKgG,IAAMq/B,EAAct/B,EAAS/F,KAAKkG,OAASlG,KAAKmiD,YAAYiB,GAAK75C,SAEtGs6C,EAAO79C,IAAMA,EACb69C,EAAO19C,MAAQnG,KAAKmG,KAAOJ,EAC3B89C,EAAO19C,KAAOy9C,EAAUxoC,WAAWwoC,EAAU7uD,EAAE8uD,EAAO19C,MAAO09C,EAAOx8C,OACpErB,GAAO69C,EAAOt6C,OAASxD,CAE/B,CACJ,CACA,YAAAmxB,GACI,MAAiC,QAA1Bl3B,KAAK7L,QAAQ89B,UAAgD,WAA1BjyB,KAAK7L,QAAQ89B,QAC3D,CACA,IAAA1S,GACI,GAAIvf,KAAK7L,QAAQiS,QAAS,CACtB,MAAMxD,EAAM5C,KAAK4C,IACjB2I,GAAS3I,EAAK5C,MACdA,KAAK8jD,QACLt4C,GAAW5I,EACf,CACJ,CACH,KAAAkhD,GACO,MAAQ3vD,QAASkY,EAAK,YAAE81C,EAAY,WAAEC,EAAW,IAAEx/C,GAAS5C,MACtD,MAAEtE,EAAQovB,OAAQy2B,GAAel1C,EACjC03C,EAAen/C,GAASvG,MACxBulD,EAAY7oC,GAAc1O,EAAK2O,IAAKhb,KAAKmG,KAAMnG,KAAKqH,OACpDk7C,EAAYlzC,GAAOkyC,EAAUl/C,OAC7B,QAAE0D,GAAaw7C,EACf1W,EAAW0X,EAAUjsD,KACrB0tD,EAAenZ,EAAW,EAChC,IAAIoZ,EACJjkD,KAAKoqC,YACLxnC,EAAI6K,UAAYm2C,EAAUn2C,UAAU,QACpC7K,EAAI8K,aAAe,SACnB9K,EAAI+D,UAAY,GAChB/D,EAAIP,KAAOkgD,EAAU75C,OACrB,MAAM,SAAE+4C,EAAS,UAAED,EAAU,WAAEI,GAAgBN,GAAWC,EAAW1W,GAqD/D3T,EAAel3B,KAAKk3B,eACpBmO,EAAcrlC,KAAKwiD,sBAErByB,EADA/sB,EACS,CACLniC,EAAG4G,GAAeD,EAAOsE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQm8C,EAAW,IACtEntD,EAAG+K,KAAKgG,IAAMD,EAAUs/B,EACxBj5B,KAAM,GAGD,CACLrX,EAAGiL,KAAKmG,KAAOJ,EACf9Q,EAAG0G,GAAeD,EAAOsE,KAAKgG,IAAMq/B,EAAct/B,EAAS/F,KAAKkG,OAASi8C,EAAY,GAAG54C,QACxF6C,KAAM,GAGdoP,GAAsBxb,KAAK4C,IAAKyJ,EAAK63C,eACrC,MAAM1hD,EAAao/C,EAAa77C,EAChC/F,KAAKkiD,YAAYhnD,QAAQ,CAAC4nD,EAAYlwD,KAClCgQ,EAAIkK,YAAcg2C,EAAWqB,UAC7BvhD,EAAImK,UAAY+1C,EAAWqB,UAC3B,MAAMx7C,EAAY/F,EAAIgG,YAAYk6C,EAAWv7C,MAAMF,MAC7CoG,EAAYm2C,EAAUn2C,UAAUq1C,EAAWr1C,YAAcq1C,EAAWr1C,UAAY8zC,EAAU9zC,YAC1FpG,EAAQo6C,EAAWuC,EAAer7C,EACxC,IAAI5T,EAAIkvD,EAAOlvD,EACXE,EAAIgvD,EAAOhvD,EAiBf,GAhBA2uD,EAAU1oC,SAASlb,KAAKqH,OACpB6vB,EACItkC,EAAI,GAAKmC,EAAIsS,EAAQtB,EAAU/F,KAAKiG,QACpChR,EAAIgvD,EAAOhvD,GAAKuN,EAChByhD,EAAO73C,OACPrX,EAAIkvD,EAAOlvD,EAAI4G,GAAeD,EAAOsE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQm8C,EAAW6B,EAAO73C,QAEtFxZ,EAAI,GAAKqC,EAAIuN,EAAaxC,KAAKkG,SACtCnR,EAAIkvD,EAAOlvD,EAAIA,EAAIotD,EAAY8B,EAAO73C,MAAM/E,MAAQtB,EACpDk+C,EAAO73C,OACPnX,EAAIgvD,EAAOhvD,EAAI0G,GAAeD,EAAOsE,KAAKgG,IAAMq/B,EAAct/B,EAAS/F,KAAKkG,OAASi8C,EAAY8B,EAAO73C,MAAM7C,SAvFhG,SAASxU,EAAGE,EAAG6tD,GACjC,GAAIzqD,MAAMopD,IAAaA,GAAY,GAAKppD,MAAMmpD,IAAcA,EAAY,EACpE,OAEJ5+C,EAAIwG,OACJ,MAAMzC,EAAYxU,EAAe2wD,EAAWn8C,UAAW,GAQvD,GAPA/D,EAAImK,UAAY5a,EAAe2wD,EAAW/1C,UAAWg3C,GACrDnhD,EAAIu2C,QAAUhnD,EAAe2wD,EAAW3J,QAAS,QACjDv2C,EAAImnC,eAAiB53C,EAAe2wD,EAAW/Y,eAAgB,GAC/DnnC,EAAIw2C,SAAWjnD,EAAe2wD,EAAW1J,SAAU,SACnDx2C,EAAI+D,UAAYA,EAChB/D,EAAIkK,YAAc3a,EAAe2wD,EAAWh2C,YAAai3C,GACzDnhD,EAAIknC,YAAY33C,EAAe2wD,EAAWsB,SAAU,KAChD7C,EAAUG,cAAe,CACzB,MAAM2C,EAAc,CAChBl6C,OAAQq3C,EAAY9qD,KAAK4tD,MAAQ,EACjCr6C,WAAY64C,EAAW74C,WACvBC,SAAU44C,EAAW54C,SACrBe,YAAatE,GAEX49C,EAAUX,EAAUzoC,MAAMpmB,EAAG0sD,EAAW,GAE9C/3C,GAAgB9G,EAAKyhD,EAAaE,EADlBtvD,EAAI+uD,EACgCzC,EAAUI,iBAAmBF,EACrF,KAAO,CACH,MAAM+C,EAAUvvD,EAAIyB,KAAKoD,KAAK+wC,EAAW2W,GAAa,EAAG,GACnDiD,EAAWb,EAAUxoC,WAAWrmB,EAAG0sD,GACnCiD,EAAex1C,GAAc4zC,EAAW4B,cAC9C9hD,EAAI4H,YACAhZ,OAAOoO,OAAO8kD,GAAclW,KAAM15C,GAAU,IAANA,GACtCkZ,GAAmBpL,EAAK,CACpB7N,EAAG0vD,EACHxvD,EAAGuvD,EACH76C,EAAG83C,EACHxzC,EAAGuzC,EACHr3C,OAAQu6C,IAGZ9hD,EAAImI,KAAK05C,EAAUD,EAAS/C,EAAUD,GAE1C5+C,EAAIoI,OACc,IAAdrE,GACA/D,EAAIsI,QAEZ,CACAtI,EAAI4G,SACR,CA6CIm7C,CADcf,EAAU7uD,EAAEA,GACLE,EAAG6tD,GACxB/tD,ED9yPO,EAAC2G,EAAOyK,EAAMF,EAAO+U,IAE7Btf,KADOsf,EAAM,OAAS,SACJ/U,EAAkB,WAAVvK,GAAsByK,EAAOF,GAAS,EAAIE,EC4yP/Dy+C,CAAOn3C,EAAW1Y,EAAI0sD,EAAWuC,EAAc9sB,EAAeniC,EAAIsS,EAAQrH,KAAKiG,MAAOoG,EAAK2O,KA7ClF,SAASjmB,EAAGE,EAAG6tD,GAC5B11C,GAAWxK,EAAKkgD,EAAWv7C,KAAMxS,EAAGE,EAAI2sD,EAAa,EAAGW,EAAW,CAC/Dj2C,cAAew2C,EAAWn3B,OAC1Ble,UAAWm2C,EAAUn2C,UAAUq1C,EAAWr1C,YAElD,CAyCIM,CAAS61C,EAAU7uD,EAAEA,GAAIE,EAAG6tD,GACxB5rB,EACA+sB,EAAOlvD,GAAKsS,EAAQtB,OACjB,GAA+B,iBAApB+8C,EAAWv7C,KAAmB,CAC5C,MAAMg8C,EAAiBhB,EAAU//C,WACjCyhD,EAAOhvD,GAAKuuD,GAA0BV,EAAYS,GAAkBx9C,CACxE,MACIk+C,EAAOhvD,GAAKuN,IAGpBsZ,GAAqB9b,KAAK4C,IAAKyJ,EAAK63C,cACxC,CACH,SAAA9Z,GACO,MAAM/9B,EAAOrM,KAAK7L,QACZgxC,EAAY94B,EAAK/E,MACjBu9C,EAAYx1C,GAAO81B,EAAU9iC,MAC7ByiD,EAAe31C,GAAUg2B,EAAUp/B,SACzC,IAAKo/B,EAAU/+B,QACX,OAEJ,MAAMw9C,EAAY7oC,GAAc1O,EAAK2O,IAAKhb,KAAKmG,KAAMnG,KAAKqH,OACpDzE,EAAM5C,KAAK4C,IACXqvB,EAAWkT,EAAUlT,SACrB+xB,EAAea,EAAUvuD,KAAO,EAChCyuD,EAA6BD,EAAa9+C,IAAMg+C,EACtD,IAAI/uD,EACAkR,EAAOnG,KAAKmG,KACZ2H,EAAW9N,KAAKqH,MACpB,GAAIrH,KAAKk3B,eACLppB,EAAWpX,KAAKoD,OAAOkG,KAAKoiD,YAC5BntD,EAAI+K,KAAKgG,IAAM++C,EACf5+C,EAAOxK,GAAe0Q,EAAK3Q,MAAOyK,EAAMnG,KAAKiG,MAAQ6H,OAClD,CACH,MAAMgvB,EAAY98B,KAAKmiD,YAAYjiC,OAAO,CAACC,EAAK7pB,IAAOI,KAAKoD,IAAIqmB,EAAK7pB,EAAKiT,QAAS,GACnFtU,EAAI8vD,EAA6BppD,GAAe0Q,EAAK3Q,MAAOsE,KAAKgG,IAAKhG,KAAKkG,OAAS42B,EAAYzwB,EAAKye,OAAO/kB,QAAU/F,KAAKwiD,sBAC/H,CACA,MAAMztD,EAAI4G,GAAes2B,EAAU9rB,EAAMA,EAAO2H,GAChDlL,EAAI6K,UAAYm2C,EAAUn2C,UAAUhS,GAAmBw2B,IACvDrvB,EAAI8K,aAAe,SACnB9K,EAAIkK,YAAcq4B,EAAU9mC,MAC5BuE,EAAImK,UAAYo4B,EAAU9mC,MAC1BuE,EAAIP,KAAOwiD,EAAUn8C,OACrB0E,GAAWxK,EAAKuiC,EAAU59B,KAAMxS,EAAGE,EAAG4vD,EAC1C,CACH,mBAAArC,GACO,MAAMrd,EAAYnlC,KAAK7L,QAAQmT,MACzBu9C,EAAYx1C,GAAO81B,EAAU9iC,MAC7ByiD,EAAe31C,GAAUg2B,EAAUp/B,SACzC,OAAOo/B,EAAU/+B,QAAUy+C,EAAUriD,WAAasiD,EAAav7C,OAAS,CAC5E,CACH,gBAAAy7C,CAAiBjwD,EAAGE,GACb,IAAIrC,EAAGqyD,EAAQC,EACf,GAAInrD,EAAWhF,EAAGiL,KAAKmG,KAAMnG,KAAKiG,QAAUlM,EAAW9E,EAAG+K,KAAKgG,IAAKhG,KAAKkG,QAErE,IADAg/C,EAAKllD,KAAK+hD,eACNnvD,EAAI,EAAGA,EAAIsyD,EAAGnyD,SAAUH,EAExB,GADAqyD,EAASC,EAAGtyD,GACRmH,EAAWhF,EAAGkwD,EAAO9+C,KAAM8+C,EAAO9+C,KAAO8+C,EAAO59C,QAAUtN,EAAW9E,EAAGgwD,EAAOj/C,IAAKi/C,EAAOj/C,IAAMi/C,EAAO17C,QACxG,OAAOvJ,KAAKkiD,YAAYtvD,GAIpC,OAAO,IACX,CACH,WAAAuyD,CAAYzsD,GACL,MAAM2T,EAAOrM,KAAK7L,QAClB,IAyDR,SAAoB5C,EAAM8a,GACtB,QAAc,cAAT9a,GAAiC,aAATA,IAAyB8a,EAAKhJ,UAAWgJ,EAAK+4C,aAGvE/4C,EAAK/I,SAAqB,UAAT/R,GAA6B,YAATA,EAI7C,CAjEa8zD,CAAW3sD,EAAEnH,KAAM8a,GACpB,OAEJ,MAAMi5C,EAActlD,KAAKglD,iBAAiBtsD,EAAE3D,EAAG2D,EAAEzD,GACjD,GAAe,cAAXyD,EAAEnH,MAAmC,aAAXmH,EAAEnH,KAAqB,CACjD,MAAMma,EAAW1L,KAAKgiD,aAChBuD,GA3XKlvD,EA2X2BivD,EA3XjB,QAAblvD,EA2XoBsV,IA3XO,OAANrV,GAAcD,EAAE9C,eAAiB+C,EAAE/C,cAAgB8C,EAAE7C,QAAU8C,EAAE9C,OA4X1FmY,IAAa65C,GACbnzD,EAASia,EAAK+4C,QAAS,CACnB1sD,EACAgT,EACA1L,MACDA,MAEPA,KAAKgiD,aAAesD,EAChBA,IAAgBC,GAChBnzD,EAASia,EAAKhJ,QAAS,CACnB3K,EACA4sD,EACAtlD,MACDA,KAEX,MAAWslD,GACPlzD,EAASia,EAAK/I,QAAS,CACnB5K,EACA4sD,EACAtlD,MACDA,MAhZI,IAAC5J,EAAGC,CAkZnB,EAwBJ,SAASmtD,GAA0BV,EAAYS,GAE3C,OAAOA,GADaT,EAAWv7C,KAAOu7C,EAAWv7C,KAAKxU,OAAS,EAEnE,CAUA,IAAIyyD,GAAgB,CAChBt0D,GAAI,SACPu0D,SAAU5D,GACP,KAAAzoD,CAAO6G,EAAO+gD,EAAO7sD,GACjB,MAAMuxD,EAASzlD,EAAMylD,OAAS,IAAI7D,GAAO,CACrCj/C,IAAK3C,EAAM2C,IACXzO,UACA8L,UAEJu2B,GAAQ5T,UAAU3iB,EAAOylD,EAAQvxD,GACjCqiC,GAAQC,OAAOx2B,EAAOylD,EAC1B,EACA,IAAAplC,CAAMrgB,GACFu2B,GAAQI,UAAU32B,EAAOA,EAAMylD,eACxBzlD,EAAMylD,MACjB,EACA,YAAAzkB,CAAchhC,EAAO+gD,EAAO7sD,GACxB,MAAMuxD,EAASzlD,EAAMylD,OACrBlvB,GAAQ5T,UAAU3iB,EAAOylD,EAAQvxD,GACjCuxD,EAAOvxD,QAAUA,CACrB,EACA,WAAA0vC,CAAa5jC,GACT,MAAMylD,EAASzlD,EAAMylD,OACrBA,EAAOrD,cACPqD,EAAO/B,gBACX,EACA,UAAAgC,CAAY1lD,EAAO3N,GACVA,EAAKgmD,QACNr4C,EAAMylD,OAAOP,YAAY7yD,EAAKgmB,MAEtC,EACA1T,SAAU,CACNwB,SAAS,EACT6rB,SAAU,MACVv2B,MAAO,SACPw6B,UAAU,EACVvjC,SAAS,EACT8P,OAAQ,IACR,OAAAa,CAAS5K,EAAGoqD,EAAY4C,GACpB,MAAMnyD,EAAQuvD,EAAWxvD,aACnBsyD,EAAKF,EAAOzlD,MACd2lD,EAAGrQ,iBAAiBhiD,IACpBqyD,EAAG//C,KAAKtS,GACRuvD,EAAWn3B,QAAS,IAEpBi6B,EAAGlgD,KAAKnS,GACRuvD,EAAWn3B,QAAS,EAE5B,EACAtoB,QAAS,KACT+hD,QAAS,KACTt6B,OAAQ,CACJzsB,MAAQuE,GAAMA,EAAI3C,MAAM9L,QAAQkK,MAChCojD,SAAU,GACV17C,QAAS,GACT,cAAAu8C,CAAgBriD,GACZ,MAAM6B,EAAW7B,EAAMsI,KAAKzG,UACpBgpB,QAAQ,cAAE42B,EAAc,WAAEz3C,EAAW,UAAEwD,EAAU,MAAEpP,EAAM,gBAAEwnD,EAAgB,aAAEnB,IAAqBzkD,EAAMylD,OAAOvxD,QACvH,OAAO8L,EAAM+jB,yBAAyBtwB,IAAKoqB,IACvC,MAAMvb,EAAQub,EAAKqH,WAAW7K,SAASonC,EAAgB,OAAI//C,GACrDsJ,EAAckE,GAAU5M,EAAM0I,aACpC,MAAO,CACH1D,KAAMzF,EAASgc,EAAKvqB,OAAOg5B,MAC3Bxf,UAAWxK,EAAMX,gBACjBuiD,UAAW9lD,EACXstB,QAAS7N,EAAKlY,QACduzC,QAAS52C,EAAM4a,eACfinC,SAAU7hD,EAAM6a,WAChB2sB,eAAgBxnC,EAAM8a,iBACtB+7B,SAAU72C,EAAM+a,gBAChB3W,WAAYsE,EAAY5D,MAAQ4D,EAAY1B,QAAU,EACtDuD,YAAavK,EAAMV,YACnBoI,WAAYA,GAAc1H,EAAM0H,WAChCC,SAAU3H,EAAM2H,SAChBuD,UAAWA,GAAalL,EAAMkL,UAC9Bi3C,aAAcmB,IAAoBnB,GAAgBniD,EAAMmiD,cACxDpxD,aAAcwqB,EAAKvqB,QAExByM,KACP,GAEJsH,MAAO,CACHjJ,MAAQuE,GAAMA,EAAI3C,MAAM9L,QAAQkK,MAChC+H,SAAS,EACT6rB,SAAU,SACV1qB,KAAM,KAGdtG,YAAa,CACT4D,YAAcZ,IAAQA,EAAKa,WAAW,MACtCgmB,OAAQ,CACJjmB,YAAcZ,IAAQ,CACd,iBACA,SACA,QACFnD,SAASmD,MAK3B,MAAM6hD,WAAcxoB,GACnB,WAAA/7B,CAAYkhB,GACLsN,QACA/vB,KAAKC,MAAQwiB,EAAOxiB,MACpBD,KAAK7L,QAAUsuB,EAAOtuB,QACtB6L,KAAK4C,IAAM6f,EAAO7f,IAClB5C,KAAK+lD,cAAWpkD,EAChB3B,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKqH,WAAQ1F,EACb3B,KAAKuJ,YAAS5H,EACd3B,KAAKiyB,cAAWtwB,EAChB3B,KAAKyC,YAASd,EACd3B,KAAKk2B,cAAWv0B,CACpB,CACA,MAAAogB,CAAOjU,EAAUgvB,GACb,MAAMzwB,EAAOrM,KAAK7L,QAGlB,GAFA6L,KAAKmG,KAAO,EACZnG,KAAKgG,IAAM,GACNqG,EAAKjG,QAEN,YADApG,KAAKqH,MAAQrH,KAAKuJ,OAASvJ,KAAKiG,MAAQjG,KAAKkG,OAAS,GAG1DlG,KAAKqH,MAAQrH,KAAKiG,MAAQ6H,EAC1B9N,KAAKuJ,OAASvJ,KAAKkG,OAAS42B,EAC5B,MAAMoM,EAAY73C,EAAQgb,EAAK9E,MAAQ8E,EAAK9E,KAAKxU,OAAS,EAC1DiN,KAAK+lD,SAAW52C,GAAU9C,EAAKtG,SAC/B,MAAMigD,EAAW9c,EAAY75B,GAAOhD,EAAKhK,MAAMG,WAAaxC,KAAK+lD,SAASx8C,OACtEvJ,KAAKk3B,eACLl3B,KAAKuJ,OAASy8C,EAEdhmD,KAAKqH,MAAQ2+C,CAErB,CACA,YAAA9uB,GACI,MAAM9e,EAAMpY,KAAK7L,QAAQ89B,SACzB,MAAe,QAAR7Z,GAAyB,WAARA,CAC5B,CACA,SAAA6tC,CAAU5/C,GACN,MAAM,IAAEL,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,QAAE9R,GAAa6L,KAC7CtE,EAAQvH,EAAQuH,MACtB,IACIoS,EAAUu8B,EAAQC,EADlBpgC,EAAW,EAkBf,OAhBIlK,KAAKk3B,gBACLmT,EAAS1uC,GAAeD,EAAOyK,EAAMF,GACrCqkC,EAAStkC,EAAMK,EACfyH,EAAW7H,EAAQE,IAEM,SAArBhS,EAAQ89B,UACRoY,EAASlkC,EAAOE,EAChBikC,EAAS3uC,GAAeD,EAAOwK,EAAQF,GACvCkE,GAAiB,GAANzT,IAEX4zC,EAASpkC,EAAQI,EACjBikC,EAAS3uC,GAAeD,EAAOsK,EAAKE,GACpCgE,EAAgB,GAALzT,GAEfqX,EAAW5H,EAASF,GAEjB,CACHqkC,SACAC,SACAx8B,WACA5D,WAER,CACA,IAAAqV,GACI,MAAM3c,EAAM5C,KAAK4C,IACXyJ,EAAOrM,KAAK7L,QAClB,IAAKkY,EAAKjG,QACN,OAEJ,MAAM8/C,EAAW72C,GAAOhD,EAAKhK,MAEvBgE,EADa6/C,EAAS1jD,WACA,EAAIxC,KAAK+lD,SAAS//C,KACxC,OAAEqkC,EAAO,OAAEC,EAAO,SAAEx8B,EAAS,SAAE5D,GAAclK,KAAKimD,UAAU5/C,GAClE+G,GAAWxK,EAAKyJ,EAAK9E,KAAM,EAAG,EAAG2+C,EAAU,CACvC7nD,MAAOgO,EAAKhO,MACZyP,WACA5D,WACAuD,UAAWhS,GAAmB4Q,EAAK3Q,OACnCgS,aAAc,SACdF,YAAa,CACT68B,EACAC,IAGZ,EAYJ,IAAI6b,GAAe,CACfj1D,GAAI,QACPu0D,SAAUK,GACP,KAAA1sD,CAAO6G,EAAO+gD,EAAO7sD,IAbzB,SAAqB8L,EAAOklC,GACxB,MAAM79B,EAAQ,IAAIw+C,GAAM,CACpBljD,IAAK3C,EAAM2C,IACXzO,QAASgxC,EACTllC,UAEJu2B,GAAQ5T,UAAU3iB,EAAOqH,EAAO69B,GAChC3O,GAAQC,OAAOx2B,EAAOqH,GACtBrH,EAAMmmD,WAAa9+C,CACvB,CAKQ++C,CAAYpmD,EAAO9L,EACvB,EACA,IAAAmsB,CAAMrgB,GACF,MAAMmmD,EAAanmD,EAAMmmD,WACzB5vB,GAAQI,UAAU32B,EAAOmmD,UAClBnmD,EAAMmmD,UACjB,EACA,YAAAnlB,CAAchhC,EAAO+gD,EAAO7sD,GACxB,MAAMmT,EAAQrH,EAAMmmD,WACpB5vB,GAAQ5T,UAAU3iB,EAAOqH,EAAOnT,GAChCmT,EAAMnT,QAAUA,CACpB,EACAyQ,SAAU,CACNlJ,MAAO,SACP0K,SAAS,EACT/D,KAAM,CACFI,OAAQ,QAEZyzB,UAAU,EACVnwB,QAAS,GACTksB,SAAU,MACV1qB,KAAM,GACN9E,OAAQ,KAEZ6oC,cAAe,CACXjtC,MAAO,SAEX4C,YAAa,CACT4D,aAAa,EACbE,YAAY,IAIR,IAAIuhD,QA2ChB,MAAMC,GAAc,CACnB,OAAAC,CAASlnC,GACF,IAAKA,EAAMvsB,OACP,OAAO,EAEX,IAAIH,EAAGC,EACH4zD,EAAO,IAAIn0C,IACXrd,EAAI,EACJmnB,EAAQ,EACZ,IAAIxpB,EAAI,EAAGC,EAAMysB,EAAMvsB,OAAQH,EAAIC,IAAOD,EAAE,CACxC,MAAMwnB,EAAKkF,EAAM1sB,GAAGglB,QACpB,GAAIwC,GAAMA,EAAGojB,WAAY,CACrB,MAAMplB,EAAMgC,EAAGmjB,kBACfkpB,EAAK5zC,IAAIuF,EAAIrjB,GACbE,GAAKmjB,EAAInjB,IACPmnB,CACN,CACJ,CACA,OAAc,IAAVA,GAA6B,IAAdqqC,EAAKnwD,MAMjB,CACHvB,EAJa,IACV0xD,GACLvmC,OAAO,CAAC9pB,EAAGC,IAAID,EAAIC,GAAKowD,EAAKnwD,KAG3BrB,EAAGA,EAAImnB,EAEf,EACH,OAAAiY,CAAS/U,EAAOonC,GACT,IAAKpnC,EAAMvsB,OACP,OAAO,EAEX,IAGIH,EAAGC,EAAK8zD,EAHR5xD,EAAI2xD,EAAc3xD,EAClBE,EAAIyxD,EAAczxD,EAClB+9B,EAAcjhC,OAAO+E,kBAEzB,IAAIlE,EAAI,EAAGC,EAAMysB,EAAMvsB,OAAQH,EAAIC,IAAOD,EAAE,CACxC,MAAMwnB,EAAKkF,EAAM1sB,GAAGglB,QACpB,GAAIwC,GAAMA,EAAGojB,WAAY,CACrB,MACMt/B,EAAItF,EAAsB8tD,EADjBtsC,EAAG8Y,kBAEdh1B,EAAI80B,IACJA,EAAc90B,EACdyoD,EAAiBvsC,EAEzB,CACJ,CACA,GAAIusC,EAAgB,CAChB,MAAMC,EAAKD,EAAeppB,kBAC1BxoC,EAAI6xD,EAAG7xD,EACPE,EAAI2xD,EAAG3xD,CACX,CACA,MAAO,CACHF,IACAE,IAER,GAEJ,SAAS4xD,GAAaj9B,EAAMk9B,GAQxB,OAPIA,IACIz1D,EAAQy1D,GACRx1D,MAAMG,UAAUiE,KAAKlD,MAAMo3B,EAAMk9B,GAEjCl9B,EAAKl0B,KAAKoxD,IAGXl9B,CACX,CACC,SAASm9B,GAAcjxD,GACpB,OAAoB,iBAARA,GAAoBA,aAAekxD,SAAWlxD,EAAI7B,QAAQ,OAAS,EACpE6B,EAAIR,MAAM,MAEdQ,CACX,CACC,SAASmxD,GAAkBhnD,EAAO1J,GAC/B,MAAM,QAAEqhB,EAAQ,aAAEtkB,EAAa,MAAEC,GAAWgD,EACtC4uB,EAAallB,EAAM+oB,eAAe11B,GAAc6xB,YAChD,MAAEoH,EAAM,MAAEn7B,GAAW+zB,EAAWmH,iBAAiB/4B,GACvD,MAAO,CACH0M,QACAssB,QACAnH,OAAQD,EAAWgG,UAAU53B,GAC7Bw5B,IAAK9sB,EAAMsI,KAAKzG,SAASxO,GAAciV,KAAKhV,GAC5C2zD,eAAgB91D,EAChB42B,QAAS7C,EAAW8C,aACpB6E,UAAWv5B,EACXD,eACAskB,UAER,CACC,SAASuvC,GAAeC,EAASjzD,GAC9B,MAAMyO,EAAMwkD,EAAQnnD,MAAM2C,KACpB,KAAEykD,EAAK,OAAEC,EAAO,MAAEhgD,GAAW8/C,GAC7B,SAAE3F,EAAS,UAAED,GAAertD,EAC5BozD,EAAWl4C,GAAOlb,EAAQozD,UAC1B1C,EAAYx1C,GAAOlb,EAAQ0wD,WAC3B2C,EAAan4C,GAAOlb,EAAQqzD,YAC5BC,EAAiBngD,EAAMvU,OACvB20D,EAAkBJ,EAAOv0D,OACzB40D,EAAoBN,EAAKt0D,OACzBgT,EAAUoJ,GAAUhb,EAAQ4R,SAClC,IAAIwD,EAASxD,EAAQwD,OACjBlC,EAAQ,EACRugD,EAAqBP,EAAKnnC,OAAO,CAAC9D,EAAOyrC,IAAWzrC,EAAQyrC,EAASC,OAAO/0D,OAAS80D,EAASx6C,MAAMta,OAAS80D,EAASE,MAAMh1D,OAAQ,GACxI60D,GAAsBR,EAAQY,WAAWj1D,OAASq0D,EAAQa,UAAUl1D,OAChE00D,IACAl+C,GAAUk+C,EAAiB5C,EAAUriD,YAAcilD,EAAiB,GAAKtzD,EAAQ+zD,aAAe/zD,EAAQg0D,mBAExGP,IAEAr+C,GAAUo+C,GADaxzD,EAAQi0D,cAAgB1xD,KAAKoD,IAAI0nD,EAAW+F,EAAS/kD,YAAc+kD,EAAS/kD,aACnDolD,EAAqBD,GAAqBJ,EAAS/kD,YAAcolD,EAAqB,GAAKzzD,EAAQk0D,aAEnJX,IACAn+C,GAAUpV,EAAQm0D,gBAAkBZ,EAAkBF,EAAWhlD,YAAcklD,EAAkB,GAAKvzD,EAAQo0D,eAElH,IAAIC,EAAe,EACnB,MAAMC,EAAe,SAASr8C,GAC1B/E,EAAQ3Q,KAAKoD,IAAIuN,EAAOzE,EAAIgG,YAAYwD,GAAM/E,MAAQmhD,EAC1D,EAiBA,OAhBA5lD,EAAIwG,OACJxG,EAAIP,KAAOwiD,EAAUn8C,OACrBjW,EAAK20D,EAAQ9/C,MAAOmhD,GACpB7lD,EAAIP,KAAOklD,EAAS7+C,OACpBjW,EAAK20D,EAAQY,WAAWxwB,OAAO4vB,EAAQa,WAAYQ,GACnDD,EAAer0D,EAAQi0D,cAAgB3G,EAAW,EAAIttD,EAAQ2gC,WAAa,EAC3EriC,EAAK40D,EAAOQ,IACRp1D,EAAKo1D,EAASC,OAAQW,GACtBh2D,EAAKo1D,EAASx6C,MAAOo7C,GACrBh2D,EAAKo1D,EAASE,MAAOU,KAEzBD,EAAe,EACf5lD,EAAIP,KAAOmlD,EAAW9+C,OACtBjW,EAAK20D,EAAQE,OAAQmB,GACrB7lD,EAAI4G,UACJnC,GAAStB,EAAQsB,MACV,CACHA,QACAkC,SAER,CAoBA,SAASm/C,GAAgBzoD,EAAO9L,EAASmC,EAAMqyD,GAC3C,MAAM,EAAE5zD,EAAE,MAAEsS,GAAW/Q,GACf+Q,MAAOuhD,EAAajrC,WAAW,KAAExX,EAAK,MAAEF,IAAchG,EAC9D,IAAI4oD,EAAS,SAWb,MAVe,WAAXF,EACAE,EAAS9zD,IAAMoR,EAAOF,GAAS,EAAI,OAAS,QACrClR,GAAKsS,EAAQ,EACpBwhD,EAAS,OACF9zD,GAAK6zD,EAAavhD,EAAQ,IACjCwhD,EAAS,SAnBjB,SAA6BA,EAAQ5oD,EAAO9L,EAASmC,GACjD,MAAM,EAAEvB,EAAE,MAAEsS,GAAW/Q,EACjBwyD,EAAQ30D,EAAQ40D,UAAY50D,EAAQ60D,aAC1C,MAAe,SAAXH,GAAqB9zD,EAAIsS,EAAQyhD,EAAQ7oD,EAAMoH,OAGpC,UAAXwhD,GAAsB9zD,EAAIsS,EAAQyhD,EAAQ,QAA9C,CAGJ,CAYQG,CAAoBJ,EAAQ5oD,EAAO9L,EAASmC,KAC5CuyD,EAAS,UAENA,CACX,CACC,SAASK,GAAmBjpD,EAAO9L,EAASmC,GACzC,MAAMqyD,EAASryD,EAAKqyD,QAAUx0D,EAAQw0D,QApC1C,SAAyB1oD,EAAO3J,GAC5B,MAAM,EAAErB,EAAE,OAAEsU,GAAYjT,EACxB,OAAIrB,EAAIsU,EAAS,EACN,MACAtU,EAAIgL,EAAMsJ,OAASA,EAAS,EAC5B,SAEJ,QACX,CA4BoD4/C,CAAgBlpD,EAAO3J,GACvE,MAAO,CACHuyD,OAAQvyD,EAAKuyD,QAAU10D,EAAQ00D,QAAUH,GAAgBzoD,EAAO9L,EAASmC,EAAMqyD,GAC/EA,SAER,CAqBC,SAASS,GAAmBj1D,EAASmC,EAAM+yD,EAAWppD,GACnD,MAAM,UAAE8oD,EAAU,aAAEC,EAAa,aAAEl/C,GAAkB3V,GAC/C,OAAE00D,EAAO,OAAEF,GAAYU,EACvBC,EAAiBP,EAAYC,GAC7B,QAAE96C,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBc,GAAcpF,GACzE,IAAI/U,EAzBR,SAAgBuB,EAAMuyD,GAClB,IAAI,EAAE9zD,EAAE,MAAEsS,GAAW/Q,EAMrB,MALe,UAAXuyD,EACA9zD,GAAKsS,EACa,WAAXwhD,IACP9zD,GAAKsS,EAAQ,GAEVtS,CACX,CAiBYw0D,CAAOjzD,EAAMuyD,GACrB,MAAM5zD,EAjBV,SAAgBqB,EAAMqyD,EAAQW,GAC1B,IAAI,EAAEr0D,EAAE,OAAEsU,GAAYjT,EAQtB,MAPe,QAAXqyD,EACA1zD,GAAKq0D,EAELr0D,GADkB,WAAX0zD,EACFp/C,EAAS+/C,EAET//C,EAAS,EAEXtU,CACX,CAOcu0D,CAAOlzD,EAAMqyD,EAAQW,GAY/B,MAXe,WAAXX,EACe,SAAXE,EACA9zD,GAAKu0D,EACa,UAAXT,IACP9zD,GAAKu0D,GAES,SAAXT,EACP9zD,GAAK2B,KAAKoD,IAAIoU,EAASC,GAAc46C,EACnB,UAAXF,IACP9zD,GAAK2B,KAAKoD,IAAIuU,EAAUD,GAAe26C,GAEpC,CACHh0D,EAAG6E,EAAY7E,EAAG,EAAGkL,EAAMoH,MAAQ/Q,EAAK+Q,OACxCpS,EAAG2E,EAAY3E,EAAG,EAAGgL,EAAMsJ,OAASjT,EAAKiT,QAEjD,CACA,SAASkgD,GAAYrC,EAAS1rD,EAAOvH,GACjC,MAAM4R,EAAUoJ,GAAUhb,EAAQ4R,SAClC,MAAiB,WAAVrK,EAAqB0rD,EAAQryD,EAAIqyD,EAAQ//C,MAAQ,EAAc,UAAV3L,EAAoB0rD,EAAQryD,EAAIqyD,EAAQ//C,MAAQtB,EAAQE,MAAQmhD,EAAQryD,EAAIgR,EAAQI,IACpJ,CACC,SAASujD,GAAwBt3D,GAC9B,OAAOy0D,GAAa,GAAIE,GAAc30D,GAC1C,CAQA,SAASu3D,GAAkB/qC,EAAW5c,GAClC,MAAM+B,EAAW/B,GAAWA,EAAQgmB,SAAWhmB,EAAQgmB,QAAQo/B,SAAWplD,EAAQgmB,QAAQo/B,QAAQxoC,UAClG,OAAO7a,EAAW6a,EAAU7a,SAASA,GAAY6a,CACrD,CACA,MAAMgrC,GAAmB,CACrBC,YAAa74D,EACb,KAAAsW,CAAOwiD,GACH,GAAIA,EAAa/2D,OAAS,EAAG,CACzB,MAAMwD,EAAOuzD,EAAa,GACpBh/B,EAASv0B,EAAK0J,MAAMsI,KAAKuiB,OACzBi/B,EAAaj/B,EAASA,EAAO/3B,OAAS,EAC5C,GAAIiN,MAAQA,KAAK7L,SAAiC,YAAtB6L,KAAK7L,QAAQ8O,KACrC,OAAO1M,EAAKyxB,QAAQuE,OAAS,GAC1B,GAAIh2B,EAAKg2B,MACZ,OAAOh2B,EAAKg2B,MACT,GAAIw9B,EAAa,GAAKxzD,EAAKu2B,UAAYi9B,EAC1C,OAAOj/B,EAAOv0B,EAAKu2B,UAE3B,CACA,MAAO,EACX,EACAk9B,WAAYh5D,EACZg3D,WAAYh3D,EACZi5D,YAAaj5D,EACb,KAAAu7B,CAAO29B,GACH,GAAIlqD,MAAQA,KAAK7L,SAAiC,YAAtB6L,KAAK7L,QAAQ8O,KACrC,OAAOinD,EAAY39B,MAAQ,KAAO29B,EAAYhD,gBAAkBgD,EAAYhD,eAEhF,IAAI36B,EAAQ29B,EAAYliC,QAAQuE,OAAS,GACrCA,IACAA,GAAS,MAEb,MAAMn7B,EAAQ84D,EAAYhD,eAI1B,OAHK/1D,EAAcC,KACfm7B,GAASn7B,GAENm7B,CACX,EACA,UAAA49B,CAAYD,GACR,MACM/1D,EADO+1D,EAAYjqD,MAAM+oB,eAAekhC,EAAY52D,cACrC6xB,WAAW7K,SAAS4vC,EAAYp9B,WACrD,MAAO,CACHjrB,YAAa1N,EAAQ0N,YACrBD,gBAAiBzN,EAAQyN,gBACzBqJ,YAAa9W,EAAQ8W,YACrBmS,WAAYjpB,EAAQipB,WACpBC,iBAAkBlpB,EAAQkpB,iBAC1BqnC,aAAc,EAEtB,EACA,cAAA0F,GACI,OAAOpqD,KAAK7L,QAAQk2D,SACxB,EACA,eAAAC,CAAiBJ,GACb,MACM/1D,EADO+1D,EAAYjqD,MAAM+oB,eAAekhC,EAAY52D,cACrC6xB,WAAW7K,SAAS4vC,EAAYp9B,WACrD,MAAO,CACH7iB,WAAY9V,EAAQ8V,WACpBC,SAAU/V,EAAQ+V,SAE1B,EACAqgD,WAAYv5D,EACZi3D,UAAWj3D,EACXw5D,aAAcx5D,EACds2D,OAAQt2D,EACRy5D,YAAaz5D,GAEhB,SAAS05D,GAA2B9rC,EAAW3a,EAAMrB,EAAKmqC,GACvD,MAAM50B,EAASyG,EAAU3a,GAAMtS,KAAKiR,EAAKmqC,GACzC,YAAsB,IAAX50B,EACAyxC,GAAiB3lD,GAAMtS,KAAKiR,EAAKmqC,GAErC50B,CACX,CACA,MAAMwyC,WAAgBrtB,GACrB5W,mBAAqB6/B,GAClB,WAAAhlD,CAAYkhB,GACRsN,QACA/vB,KAAK4qD,QAAU,EACf5qD,KAAKwf,QAAU,GACfxf,KAAK6qD,oBAAiBlpD,EACtB3B,KAAK8qD,WAAQnpD,EACb3B,KAAK+qD,uBAAoBppD,EACzB3B,KAAKgrD,cAAgB,GACrBhrD,KAAKojB,iBAAczhB,EACnB3B,KAAKsnB,cAAW3lB,EAChB3B,KAAKC,MAAQwiB,EAAOxiB,MACpBD,KAAK7L,QAAUsuB,EAAOtuB,QACtB6L,KAAKirD,gBAAatpD,EAClB3B,KAAKsH,WAAQ3F,EACb3B,KAAKgoD,gBAAarmD,EAClB3B,KAAKqnD,UAAO1lD,EACZ3B,KAAKioD,eAAYtmD,EACjB3B,KAAKsnD,YAAS3lD,EACd3B,KAAK6oD,YAASlnD,EACd3B,KAAK2oD,YAAShnD,EACd3B,KAAKjL,OAAI4M,EACT3B,KAAK/K,OAAI0M,EACT3B,KAAKuJ,YAAS5H,EACd3B,KAAKqH,WAAQ1F,EACb3B,KAAKkrD,YAASvpD,EACd3B,KAAKmrD,YAASxpD,EACd3B,KAAKorD,iBAAczpD,EACnB3B,KAAKqrD,sBAAmB1pD,EACxB3B,KAAKsrD,qBAAkB3pD,CAC3B,CACA,UAAA+lB,CAAWvzB,GACP6L,KAAK7L,QAAUA,EACf6L,KAAK+qD,uBAAoBppD,EACzB3B,KAAKsnB,cAAW3lB,CACpB,CACH,kBAAA8rB,GACO,MAAMlH,EAASvmB,KAAK+qD,kBACpB,GAAIxkC,EACA,OAAOA,EAEX,MAAMtmB,EAAQD,KAAKC,MACb9L,EAAU6L,KAAK7L,QAAQoe,WAAWvS,KAAKmJ,cACvCkD,EAAOlY,EAAQ0uC,SAAW5iC,EAAM9L,QAAQuN,WAAavN,EAAQwR,WAC7DA,EAAa,IAAI6c,GAAWxiB,KAAKC,MAAOoM,GAI9C,OAHIA,EAAKqE,aACL1Q,KAAK+qD,kBAAoBv5D,OAAOg8B,OAAO7nB,IAEpCA,CACX,CACH,UAAAwD,GACO,OAAOnJ,KAAKsnB,WAAatnB,KAAKsnB,SApI3BvX,GAoI2D/P,KAAKC,MAAMkJ,aApIhD,CACzBi+C,QAmIuFpnD,KAlIvF8pD,aAkI6F9pD,KAAKgrD,cAjIlGz5D,KAAM,YAkIV,CACA,QAAAg6D,CAASvpD,EAAS7N,GACd,MAAM,UAAEyqB,GAAezqB,EACjB01D,EAAca,GAA2B9rC,EAAW,cAAe5e,KAAMgC,GACzEsF,EAAQojD,GAA2B9rC,EAAW,QAAS5e,KAAMgC,GAC7DgoD,EAAaU,GAA2B9rC,EAAW,aAAc5e,KAAMgC,GAC7E,IAAIqL,EAAQ,GAIZ,OAHAA,EAAQw5C,GAAax5C,EAAO05C,GAAc8C,IAC1Cx8C,EAAQw5C,GAAax5C,EAAO05C,GAAcz/C,IAC1C+F,EAAQw5C,GAAax5C,EAAO05C,GAAciD,IACnC38C,CACX,CACA,aAAAm+C,CAAc1B,EAAc31D,GACxB,OAAOu1D,GAAwBgB,GAA2Bv2D,EAAQyqB,UAAW,aAAc5e,KAAM8pD,GACrG,CACA,OAAA2B,CAAQ3B,EAAc31D,GAClB,MAAM,UAAEyqB,GAAezqB,EACjBu3D,EAAY,GAalB,OAZAj5D,EAAKq3D,EAAe9nD,IAChB,MAAM6lD,EAAW,CACbC,OAAQ,GACRz6C,MAAO,GACP06C,MAAO,IAEL4D,EAAShC,GAAkB/qC,EAAW5c,GAC5C6kD,GAAagB,EAASC,OAAQf,GAAc2D,GAA2BiB,EAAQ,cAAe3rD,KAAMgC,KACpG6kD,GAAagB,EAASx6C,MAAOq9C,GAA2BiB,EAAQ,QAAS3rD,KAAMgC,IAC/E6kD,GAAagB,EAASE,MAAOhB,GAAc2D,GAA2BiB,EAAQ,aAAc3rD,KAAMgC,KAClG0pD,EAAUh2D,KAAKmyD,KAEZ6D,CACX,CACA,YAAAE,CAAa9B,EAAc31D,GACvB,OAAOu1D,GAAwBgB,GAA2Bv2D,EAAQyqB,UAAW,YAAa5e,KAAM8pD,GACpG,CACA,SAAA+B,CAAU/B,EAAc31D,GACpB,MAAM,UAAEyqB,GAAezqB,EACjBq2D,EAAeE,GAA2B9rC,EAAW,eAAgB5e,KAAM8pD,GAC3ExC,EAASoD,GAA2B9rC,EAAW,SAAU5e,KAAM8pD,GAC/DW,EAAcC,GAA2B9rC,EAAW,cAAe5e,KAAM8pD,GAC/E,IAAIz8C,EAAQ,GAIZ,OAHAA,EAAQw5C,GAAax5C,EAAO05C,GAAcyD,IAC1Cn9C,EAAQw5C,GAAax5C,EAAO05C,GAAcO,IAC1Cj6C,EAAQw5C,GAAax5C,EAAO05C,GAAc0D,IACnCp9C,CACX,CACH,YAAAy+C,CAAa33D,GACN,MAAMqR,EAASxF,KAAKwf,QACdjX,EAAOvI,KAAKC,MAAMsI,KAClB6iD,EAAc,GACdC,EAAmB,GACnBC,EAAkB,GACxB,IACI14D,EAAGC,EADHi3D,EAAe,GAEnB,IAAIl3D,EAAI,EAAGC,EAAM2S,EAAOzS,OAAQH,EAAIC,IAAOD,EACvCk3D,EAAap0D,KAAKuxD,GAAkBjnD,KAAKC,MAAOuF,EAAO5S,KAkB3D,OAhBIuB,EAAQ+e,SACR42C,EAAeA,EAAa52C,OAAO,CAAC0E,EAASrkB,EAAOqH,IAAQzG,EAAQ+e,OAAO0E,EAASrkB,EAAOqH,EAAO2N,KAElGpU,EAAQ43D,WACRjC,EAAeA,EAAap1B,KAAK,CAACt+B,EAAGC,IAAIlC,EAAQ43D,SAAS31D,EAAGC,EAAGkS,KAEpE9V,EAAKq3D,EAAe9nD,IAChB,MAAM2pD,EAAShC,GAAkBx1D,EAAQyqB,UAAW5c,GACpDopD,EAAY11D,KAAKg1D,GAA2BiB,EAAQ,aAAc3rD,KAAMgC,IACxEqpD,EAAiB31D,KAAKg1D,GAA2BiB,EAAQ,kBAAmB3rD,KAAMgC,IAClFspD,EAAgB51D,KAAKg1D,GAA2BiB,EAAQ,iBAAkB3rD,KAAMgC,MAEpFhC,KAAKorD,YAAcA,EACnBprD,KAAKqrD,iBAAmBA,EACxBrrD,KAAKsrD,gBAAkBA,EACvBtrD,KAAKirD,WAAanB,EACXA,CACX,CACA,MAAA/nC,CAAO+O,EAASwnB,GACZ,MAAMnkD,EAAU6L,KAAK7L,QAAQoe,WAAWvS,KAAKmJ,cACvC3D,EAASxF,KAAKwf,QACpB,IAAIja,EACAukD,EAAe,GACnB,GAAKtkD,EAAOzS,OAML,CACH,MAAMk/B,EAAWs0B,GAAYpyD,EAAQ89B,UAAUtgC,KAAKqO,KAAMwF,EAAQxF,KAAK6qD,gBACvEf,EAAe9pD,KAAK8rD,aAAa33D,GACjC6L,KAAKsH,MAAQtH,KAAKurD,SAASzB,EAAc31D,GACzC6L,KAAKgoD,WAAahoD,KAAKwrD,cAAc1B,EAAc31D,GACnD6L,KAAKqnD,KAAOrnD,KAAKyrD,QAAQ3B,EAAc31D,GACvC6L,KAAKioD,UAAYjoD,KAAK4rD,aAAa9B,EAAc31D,GACjD6L,KAAKsnD,OAAStnD,KAAK6rD,UAAU/B,EAAc31D,GAC3C,MAAMmC,EAAO0J,KAAK8qD,MAAQ3D,GAAennD,KAAM7L,GACzC63D,EAAkBx6D,OAAOkP,OAAO,CAAC,EAAGuxB,EAAU37B,GAC9C+yD,EAAYH,GAAmBlpD,KAAKC,MAAO9L,EAAS63D,GACpDC,EAAkB7C,GAAmBj1D,EAAS63D,EAAiB3C,EAAWrpD,KAAKC,OACrFD,KAAK6oD,OAASQ,EAAUR,OACxB7oD,KAAK2oD,OAASU,EAAUV,OACxBpjD,EAAa,CACTqlD,QAAS,EACT71D,EAAGk3D,EAAgBl3D,EACnBE,EAAGg3D,EAAgBh3D,EACnBoS,MAAO/Q,EAAK+Q,MACZkC,OAAQjT,EAAKiT,OACb2hD,OAAQj5B,EAASl9B,EACjBo2D,OAAQl5B,EAASh9B,EAEzB,MA5ByB,IAAjB+K,KAAK4qD,UACLrlD,EAAa,CACTqlD,QAAS,IA2BrB5qD,KAAKgrD,cAAgBlB,EACrB9pD,KAAKsnB,cAAW3lB,EACZ4D,GACAvF,KAAKytB,qBAAqB1L,OAAO/hB,KAAMuF,GAEvCurB,GAAW38B,EAAQ+3D,UACnB/3D,EAAQ+3D,SAASv6D,KAAKqO,KAAM,CACxBC,MAAOD,KAAKC,MACZmnD,QAASpnD,KACTs4C,UAGZ,CACA,SAAA6T,CAAUC,EAAcxpD,EAAKtM,EAAMnC,GAC/B,MAAMk4D,EAAgBrsD,KAAKssD,iBAAiBF,EAAc91D,EAAMnC,GAChEyO,EAAIiI,OAAOwhD,EAAcjkB,GAAIikB,EAAchkB,IAC3CzlC,EAAIiI,OAAOwhD,EAAc/jB,GAAI+jB,EAAc9jB,IAC3C3lC,EAAIiI,OAAOwhD,EAAcE,GAAIF,EAAcG,GAC/C,CACA,gBAAAF,CAAiBF,EAAc91D,EAAMnC,GACjC,MAAM,OAAE00D,EAAO,OAAEF,GAAY3oD,MACvB,UAAE+oD,EAAU,aAAEj/C,GAAkB3V,GAChC,QAAE+Z,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBc,GAAcpF,IACjE/U,EAAG03D,EAAMx3D,EAAGy3D,GAASN,GACvB,MAAE/kD,EAAM,OAAEkC,GAAYjT,EAC5B,IAAI8xC,EAAIE,EAAIikB,EAAIlkB,EAAIE,EAAIikB,EAoCxB,MAnCe,WAAX7D,GACApgB,EAAKmkB,EAAMnjD,EAAS,EACL,SAAXs/C,GACAzgB,EAAKqkB,EACLnkB,EAAKF,EAAK2gB,EACV1gB,EAAKE,EAAKwgB,EACVyD,EAAKjkB,EAAKwgB,IAEV3gB,EAAKqkB,EAAMplD,EACXihC,EAAKF,EAAK2gB,EACV1gB,EAAKE,EAAKwgB,EACVyD,EAAKjkB,EAAKwgB,GAEdwD,EAAKnkB,IAGDE,EADW,SAAXugB,EACK4D,EAAM/1D,KAAKoD,IAAIoU,EAASC,GAAc46C,EACzB,UAAXF,EACF4D,EAAMplD,EAAQ3Q,KAAKoD,IAAIuU,EAAUD,GAAe26C,EAEhD/oD,KAAKkrD,OAEC,QAAXvC,GACAtgB,EAAKqkB,EACLnkB,EAAKF,EAAK0gB,EACV3gB,EAAKE,EAAKygB,EACVwD,EAAKjkB,EAAKygB,IAEV1gB,EAAKqkB,EAAMnjD,EACXg/B,EAAKF,EAAK0gB,EACV3gB,EAAKE,EAAKygB,EACVwD,EAAKjkB,EAAKygB,GAEdyD,EAAKnkB,GAEF,CACHD,KACAE,KACAikB,KACAlkB,KACAE,KACAikB,KAER,CACA,SAAApiB,CAAU/0B,EAAIzS,EAAKzO,GACf,MAAMmT,EAAQtH,KAAKsH,MACbvU,EAASuU,EAAMvU,OACrB,IAAI8xD,EAAWqD,EAAct1D,EAC7B,GAAIG,EAAQ,CACR,MAAM6wD,EAAY7oC,GAAc5mB,EAAQ6mB,IAAKhb,KAAKjL,EAAGiL,KAAKqH,OAQ1D,IAPAgO,EAAGtgB,EAAI00D,GAAYzpD,KAAM7L,EAAQ6qC,WAAY7qC,GAC7CyO,EAAI6K,UAAYm2C,EAAUn2C,UAAUtZ,EAAQ6qC,YAC5Cp8B,EAAI8K,aAAe,SACnBm3C,EAAYx1C,GAAOlb,EAAQ0wD,WAC3BqD,EAAe/zD,EAAQ+zD,aACvBtlD,EAAImK,UAAY5Y,EAAQw4D,WACxB/pD,EAAIP,KAAOwiD,EAAUn8C,OACjB9V,EAAI,EAAGA,EAAIG,IAAUH,EACrBgQ,EAAImL,SAASzG,EAAM1U,GAAIgxD,EAAU7uD,EAAEsgB,EAAGtgB,GAAIsgB,EAAGpgB,EAAI4vD,EAAUriD,WAAa,GACxE6S,EAAGpgB,GAAK4vD,EAAUriD,WAAa0lD,EAC3Bt1D,EAAI,IAAMG,IACVsiB,EAAGpgB,GAAKd,EAAQg0D,kBAAoBD,EAGhD,CACJ,CACH,aAAA0E,CAAchqD,EAAKyS,EAAIziB,EAAGgxD,EAAWzvD,GAC9B,MAAMg2D,EAAanqD,KAAKorD,YAAYx4D,GAC9B03D,EAAkBtqD,KAAKqrD,iBAAiBz4D,IACxC,UAAE4uD,EAAU,SAAEC,GAActtD,EAC5BozD,EAAWl4C,GAAOlb,EAAQozD,UAC1BsF,EAASpD,GAAYzpD,KAAM,OAAQ7L,GACnC24D,EAAYlJ,EAAU7uD,EAAE83D,GACxBE,EAAUvL,EAAY+F,EAAS/kD,YAAc+kD,EAAS/kD,WAAag/C,GAAa,EAAI,EACpFwL,EAAS33C,EAAGpgB,EAAI83D,EACtB,GAAI54D,EAAQutD,cAAe,CACvB,MAAM2C,EAAc,CAChBl6C,OAAQzT,KAAKmD,IAAI4nD,EAAUD,GAAa,EACxCv3C,WAAYqgD,EAAgBrgD,WAC5BC,SAAUogD,EAAgBpgD,SAC1Be,YAAa,GAEXs5C,EAAUX,EAAUxoC,WAAW0xC,EAAWrL,GAAYA,EAAW,EACjEwL,EAAUD,EAASxL,EAAY,EACrC5+C,EAAIkK,YAAc3Y,EAAQ+4D,mBAC1BtqD,EAAImK,UAAY5Y,EAAQ+4D,mBACxBzjD,GAAU7G,EAAKyhD,EAAaE,EAAS0I,GACrCrqD,EAAIkK,YAAcq9C,EAAWtoD,YAC7Be,EAAImK,UAAYo9C,EAAWvoD,gBAC3B6H,GAAU7G,EAAKyhD,EAAaE,EAAS0I,EACzC,KAAO,CACHrqD,EAAI+D,UAAY9U,EAASs4D,EAAWl/C,aAAevU,KAAKoD,OAAOtI,OAAOoO,OAAOuqD,EAAWl/C,cAAgBk/C,EAAWl/C,aAAe,EAClIrI,EAAIkK,YAAcq9C,EAAWtoD,YAC7Be,EAAIknC,YAAYqgB,EAAW/sC,YAAc,IACzCxa,EAAImnC,eAAiBogB,EAAW9sC,kBAAoB,EACpD,MAAM8vC,EAASvJ,EAAUxoC,WAAW0xC,EAAWrL,GACzC2L,EAASxJ,EAAUxoC,WAAWwoC,EAAUzoC,MAAM2xC,EAAW,GAAIrL,EAAW,GACxEiD,EAAex1C,GAAci7C,EAAWzF,cAC1ClzD,OAAOoO,OAAO8kD,GAAclW,KAAM15C,GAAU,IAANA,IACtC8N,EAAI4H,YACJ5H,EAAImK,UAAY5Y,EAAQ+4D,mBACxBl/C,GAAmBpL,EAAK,CACpB7N,EAAGo4D,EACHl4D,EAAG+3D,EACHrjD,EAAG83C,EACHxzC,EAAGuzC,EACHr3C,OAAQu6C,IAEZ9hD,EAAIoI,OACJpI,EAAIsI,SACJtI,EAAImK,UAAYo9C,EAAWvoD,gBAC3BgB,EAAI4H,YACJwD,GAAmBpL,EAAK,CACpB7N,EAAGq4D,EACHn4D,EAAG+3D,EAAS,EACZrjD,EAAG83C,EAAW,EACdxzC,EAAGuzC,EAAY,EACfr3C,OAAQu6C,IAEZ9hD,EAAIoI,SAEJpI,EAAImK,UAAY5Y,EAAQ+4D,mBACxBtqD,EAAIuK,SAASggD,EAAQH,EAAQvL,EAAUD,GACvC5+C,EAAIyqD,WAAWF,EAAQH,EAAQvL,EAAUD,GACzC5+C,EAAImK,UAAYo9C,EAAWvoD,gBAC3BgB,EAAIuK,SAASigD,EAAQJ,EAAS,EAAGvL,EAAW,EAAGD,EAAY,GAEnE,CACA5+C,EAAImK,UAAY/M,KAAKsrD,gBAAgB14D,EACzC,CACA,QAAA06D,CAASj4C,EAAIzS,EAAKzO,GACd,MAAM,KAAEkzD,GAAUrnD,MACZ,YAAEqoD,EAAY,UAAEkF,EAAU,cAAEnF,EAAc,UAAE5G,EAAU,SAAEC,EAAS,WAAE3sB,GAAgB3gC,EACnFozD,EAAWl4C,GAAOlb,EAAQozD,UAChC,IAAIiG,EAAiBjG,EAAS/kD,WAC1BirD,EAAe,EACnB,MAAM7J,EAAY7oC,GAAc5mB,EAAQ6mB,IAAKhb,KAAKjL,EAAGiL,KAAKqH,OACpDqmD,EAAiB,SAASthD,GAC5BxJ,EAAImL,SAAS3B,EAAMw3C,EAAU7uD,EAAEsgB,EAAGtgB,EAAI04D,GAAep4C,EAAGpgB,EAAIu4D,EAAiB,GAC7En4C,EAAGpgB,GAAKu4D,EAAiBnF,CAC7B,EACMsF,EAA0B/J,EAAUn2C,UAAU8/C,GACpD,IAAI1F,EAAU+F,EAAWvgD,EAAOza,EAAGw/B,EAAGj/B,EAAMkzC,EAQ5C,IAPAzjC,EAAI6K,UAAY8/C,EAChB3qD,EAAI8K,aAAe,SACnB9K,EAAIP,KAAOklD,EAAS7+C,OACpB2M,EAAGtgB,EAAI00D,GAAYzpD,KAAM2tD,EAAyBx5D,GAClDyO,EAAImK,UAAY5Y,EAAQk2D,UACxB53D,EAAKuN,KAAKgoD,WAAY0F,GACtBD,EAAerF,GAA6C,UAA5BuF,EAAoD,WAAdJ,EAAyB9L,EAAW,EAAI3sB,EAAa2sB,EAAW,EAAI3sB,EAAa,EACnJliC,EAAI,EAAGO,EAAOk0D,EAAKt0D,OAAQH,EAAIO,IAAQP,EAAE,CAUzC,IATAi1D,EAAWR,EAAKz0D,GAChBg7D,EAAY5tD,KAAKsrD,gBAAgB14D,GACjCgQ,EAAImK,UAAY6gD,EAChBn7D,EAAKo1D,EAASC,OAAQ4F,GACtBrgD,EAAQw6C,EAASx6C,MACb+6C,GAAiB/6C,EAAMta,SACvBiN,KAAK4sD,cAAchqD,EAAKyS,EAAIziB,EAAGgxD,EAAWzvD,GAC1Cq5D,EAAiB92D,KAAKoD,IAAIytD,EAAS/kD,WAAYg/C,IAE/CpvB,EAAI,EAAGiU,EAAOh5B,EAAMta,OAAQq/B,EAAIiU,IAAQjU,EACxCs7B,EAAergD,EAAM+kB,IACrBo7B,EAAiBjG,EAAS/kD,WAE9B/P,EAAKo1D,EAASE,MAAO2F,EACzB,CACAD,EAAe,EACfD,EAAiBjG,EAAS/kD,WAC1B/P,EAAKuN,KAAKioD,UAAWyF,GACrBr4C,EAAGpgB,GAAKozD,CACZ,CACA,UAAAwF,CAAWx4C,EAAIzS,EAAKzO,GAChB,MAAMmzD,EAAStnD,KAAKsnD,OACdv0D,EAASu0D,EAAOv0D,OACtB,IAAIy0D,EAAY50D,EAChB,GAAIG,EAAQ,CACR,MAAM6wD,EAAY7oC,GAAc5mB,EAAQ6mB,IAAKhb,KAAKjL,EAAGiL,KAAKqH,OAQ1D,IAPAgO,EAAGtgB,EAAI00D,GAAYzpD,KAAM7L,EAAQ25D,YAAa35D,GAC9CkhB,EAAGpgB,GAAKd,EAAQm0D,gBAChB1lD,EAAI6K,UAAYm2C,EAAUn2C,UAAUtZ,EAAQ25D,aAC5ClrD,EAAI8K,aAAe,SACnB85C,EAAan4C,GAAOlb,EAAQqzD,YAC5B5kD,EAAImK,UAAY5Y,EAAQ45D,YACxBnrD,EAAIP,KAAOmlD,EAAW9+C,OAClB9V,EAAI,EAAGA,EAAIG,IAAUH,EACrBgQ,EAAImL,SAASu5C,EAAO10D,GAAIgxD,EAAU7uD,EAAEsgB,EAAGtgB,GAAIsgB,EAAGpgB,EAAIuyD,EAAWhlD,WAAa,GAC1E6S,EAAGpgB,GAAKuyD,EAAWhlD,WAAarO,EAAQo0D,aAEhD,CACJ,CACA,cAAA7e,CAAer0B,EAAIzS,EAAKorD,EAAa75D,GACjC,MAAM,OAAE00D,EAAO,OAAEF,GAAY3oD,MACvB,EAAEjL,EAAE,EAAEE,GAAOogB,GACb,MAAEhO,EAAM,OAAEkC,GAAYykD,GACtB,QAAE9/C,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBc,GAAc/a,EAAQ2V,cACjFlH,EAAImK,UAAY5Y,EAAQyN,gBACxBgB,EAAIkK,YAAc3Y,EAAQ0N,YAC1Be,EAAI+D,UAAYxS,EAAQ8W,YACxBrI,EAAI4H,YACJ5H,EAAIgI,OAAO7V,EAAImZ,EAASjZ,GACT,QAAX0zD,GACA3oD,KAAKmsD,UAAU92C,EAAIzS,EAAKorD,EAAa75D,GAEzCyO,EAAIiI,OAAO9V,EAAIsS,EAAQgH,EAAUpZ,GACjC2N,EAAIqrD,iBAAiBl5D,EAAIsS,EAAOpS,EAAGF,EAAIsS,EAAOpS,EAAIoZ,GACnC,WAAXs6C,GAAkC,UAAXE,GACvB7oD,KAAKmsD,UAAU92C,EAAIzS,EAAKorD,EAAa75D,GAEzCyO,EAAIiI,OAAO9V,EAAIsS,EAAOpS,EAAIsU,EAAS6E,GACnCxL,EAAIqrD,iBAAiBl5D,EAAIsS,EAAOpS,EAAIsU,EAAQxU,EAAIsS,EAAQ+G,EAAanZ,EAAIsU,GAC1D,WAAXo/C,GACA3oD,KAAKmsD,UAAU92C,EAAIzS,EAAKorD,EAAa75D,GAEzCyO,EAAIiI,OAAO9V,EAAIoZ,EAAYlZ,EAAIsU,GAC/B3G,EAAIqrD,iBAAiBl5D,EAAGE,EAAIsU,EAAQxU,EAAGE,EAAIsU,EAAS4E,GACrC,WAAXw6C,GAAkC,SAAXE,GACvB7oD,KAAKmsD,UAAU92C,EAAIzS,EAAKorD,EAAa75D,GAEzCyO,EAAIiI,OAAO9V,EAAGE,EAAIiZ,GAClBtL,EAAIqrD,iBAAiBl5D,EAAGE,EAAGF,EAAImZ,EAASjZ,GACxC2N,EAAI+H,YACJ/H,EAAIoI,OACA7W,EAAQ8W,YAAc,GACtBrI,EAAIsI,QAEZ,CACH,sBAAAgjD,CAAuB/5D,GAChB,MAAM8L,EAAQD,KAAKC,MACbye,EAAQ1e,KAAKojB,YACb+qC,EAAQzvC,GAASA,EAAM3pB,EACvBq5D,EAAQ1vC,GAASA,EAAMzpB,EAC7B,GAAIk5D,GAASC,EAAO,CAChB,MAAMn8B,EAAWs0B,GAAYpyD,EAAQ89B,UAAUtgC,KAAKqO,KAAMA,KAAKwf,QAASxf,KAAK6qD,gBAC7E,IAAK54B,EACD,OAEJ,MAAM37B,EAAO0J,KAAK8qD,MAAQ3D,GAAennD,KAAM7L,GACzC63D,EAAkBx6D,OAAOkP,OAAO,CAAC,EAAGuxB,EAAUjyB,KAAK8qD,OACnDzB,EAAYH,GAAmBjpD,EAAO9L,EAAS63D,GAC/C5gD,EAAQg+C,GAAmBj1D,EAAS63D,EAAiB3C,EAAWppD,GAClEkuD,EAAMtsC,MAAQzW,EAAMrW,GAAKq5D,EAAMvsC,MAAQzW,EAAMnW,IAC7C+K,KAAK6oD,OAASQ,EAAUR,OACxB7oD,KAAK2oD,OAASU,EAAUV,OACxB3oD,KAAKqH,MAAQ/Q,EAAK+Q,MAClBrH,KAAKuJ,OAASjT,EAAKiT,OACnBvJ,KAAKkrD,OAASj5B,EAASl9B,EACvBiL,KAAKmrD,OAASl5B,EAASh9B,EACvB+K,KAAKytB,qBAAqB1L,OAAO/hB,KAAMoL,GAE/C,CACJ,CACH,WAAAijD,GACO,QAASruD,KAAK4qD,OAClB,CACA,IAAArrC,CAAK3c,GACD,MAAMzO,EAAU6L,KAAK7L,QAAQoe,WAAWvS,KAAKmJ,cAC7C,IAAIyhD,EAAU5qD,KAAK4qD,QACnB,IAAKA,EACD,OAEJ5qD,KAAKkuD,uBAAuB/5D,GAC5B,MAAM65D,EAAc,CAChB3mD,MAAOrH,KAAKqH,MACZkC,OAAQvJ,KAAKuJ,QAEX8L,EAAK,CACPtgB,EAAGiL,KAAKjL,EACRE,EAAG+K,KAAK/K,GAEZ21D,EAAUl0D,KAAKa,IAAIqzD,GAAW,KAAO,EAAIA,EACzC,MAAM7kD,EAAUoJ,GAAUhb,EAAQ4R,SAC5BuoD,EAAoBtuD,KAAKsH,MAAMvU,QAAUiN,KAAKgoD,WAAWj1D,QAAUiN,KAAKqnD,KAAKt0D,QAAUiN,KAAKioD,UAAUl1D,QAAUiN,KAAKsnD,OAAOv0D,OAC9HoB,EAAQ0uC,SAAWyrB,IACnB1rD,EAAIwG,OACJxG,EAAI2rD,YAAc3D,EAClB5qD,KAAK0pC,eAAer0B,EAAIzS,EAAKorD,EAAa75D,GAC1CqnB,GAAsB5Y,EAAKzO,EAAQ+vD,eACnC7uC,EAAGpgB,GAAK8Q,EAAQC,IAChBhG,KAAKoqC,UAAU/0B,EAAIzS,EAAKzO,GACxB6L,KAAKstD,SAASj4C,EAAIzS,EAAKzO,GACvB6L,KAAK6tD,WAAWx4C,EAAIzS,EAAKzO,GACzB2nB,GAAqBlZ,EAAKzO,EAAQ+vD,eAClCthD,EAAI4G,UAEZ,CACH,iBAAAyuC,GACO,OAAOj4C,KAAKwf,SAAW,EAC3B,CACH,iBAAA04B,CAAkBC,EAAgBuO,GAC3B,MAAMtO,EAAap4C,KAAKwf,QAClBha,EAAS2yC,EAAezkD,IAAI,EAAGJ,eAAeC,YAChD,MAAMuqB,EAAO9d,KAAKC,MAAM+oB,eAAe11B,GACvC,IAAKwqB,EACD,MAAM,IAAInL,MAAM,kCAAoCrf,GAExD,MAAO,CACHA,eACAskB,QAASkG,EAAKvV,KAAKhV,GACnBA,WAGFu9B,GAAW99B,EAAeolD,EAAY5yC,GACtCgpD,EAAkBxuD,KAAKyuD,iBAAiBjpD,EAAQkhD,IAClD51B,GAAW09B,KACXxuD,KAAKwf,QAAUha,EACfxF,KAAK6qD,eAAiBnE,EACtB1mD,KAAK0uD,qBAAsB,EAC3B1uD,KAAK+hB,QAAO,GAEpB,CACH,WAAAojC,CAAYzsD,EAAG4/C,EAAQI,GAAc,GAC9B,GAAIJ,GAAUt4C,KAAK0uD,oBACf,OAAO,EAEX1uD,KAAK0uD,qBAAsB,EAC3B,MAAMv6D,EAAU6L,KAAK7L,QACfikD,EAAap4C,KAAKwf,SAAW,GAC7Bha,EAASxF,KAAK64C,mBAAmBngD,EAAG0/C,EAAYE,EAAQI,GACxD8V,EAAkBxuD,KAAKyuD,iBAAiBjpD,EAAQ9M,GAChDo4B,EAAUwnB,IAAWtlD,EAAewS,EAAQ4yC,IAAeoW,EAWjE,OAVI19B,IACA9wB,KAAKwf,QAAUha,GACXrR,EAAQ0uC,SAAW1uC,EAAQ+3D,YAC3BlsD,KAAK6qD,eAAiB,CAClB91D,EAAG2D,EAAE3D,EACLE,EAAGyD,EAAEzD,GAET+K,KAAK+hB,QAAO,EAAMu2B,KAGnBxnB,CACX,CACH,kBAAA+nB,CAAmBngD,EAAG0/C,EAAYE,EAAQI,GACnC,MAAMvkD,EAAU6L,KAAK7L,QACrB,GAAe,aAAXuE,EAAEnH,KACF,MAAO,GAEX,IAAKmnD,EACD,OAAON,EAAWllC,OAAQtgB,GAAIoN,KAAKC,MAAMsI,KAAKzG,SAASlP,EAAEU,oBAA6FqO,IAA5E3B,KAAKC,MAAM+oB,eAAep2B,EAAEU,cAAc6xB,WAAWgG,UAAUv4B,EAAEW,QAE/I,MAAMiS,EAASxF,KAAKC,MAAMg3C,0BAA0Bv+C,EAAGvE,EAAQ8O,KAAM9O,EAASmkD,GAI9E,OAHInkD,EAAQxB,SACR6S,EAAO7S,UAEJ6S,CACX,CACH,gBAAAipD,CAAiBjpD,EAAQ9M,GAClB,MAAM,OAAEwyD,EAAO,OAAEC,EAAO,QAAEh3D,GAAa6L,KACjCiyB,EAAWs0B,GAAYpyD,EAAQ89B,UAAUtgC,KAAKqO,KAAMwF,EAAQ9M,GAClE,OAAoB,IAAbu5B,IAAuBi5B,IAAWj5B,EAASl9B,GAAKo2D,IAAWl5B,EAASh9B,EAC/E,EAEJ,IAAI05D,GAAiB,CACjBz9D,GAAI,UACJu0D,SAAUkF,GACVpE,eACA,SAAAqI,CAAW3uD,EAAO+gD,EAAO7sD,GACjBA,IACA8L,EAAMmnD,QAAU,IAAIuD,GAAQ,CACxB1qD,QACA9L,YAGZ,EACA,YAAA8sC,CAAchhC,EAAO+gD,EAAO7sD,GACpB8L,EAAMmnD,SACNnnD,EAAMmnD,QAAQ1/B,WAAWvzB,EAEjC,EACA,KAAAg1B,CAAOlpB,EAAO+gD,EAAO7sD,GACb8L,EAAMmnD,SACNnnD,EAAMmnD,QAAQ1/B,WAAWvzB,EAEjC,EACA,SAAA06D,CAAW5uD,GACP,MAAMmnD,EAAUnnD,EAAMmnD,QACtB,GAAIA,GAAWA,EAAQiH,cAAe,CAClC,MAAM/7D,EAAO,CACT80D,WAEJ,IAGO,IAHHnnD,EAAMmkC,cAAc,oBAAqB,IACtC9xC,EACHw7C,YAAY,IAEZ,OAEJsZ,EAAQ7nC,KAAKtf,EAAM2C,KACnB3C,EAAMmkC,cAAc,mBAAoB9xC,EAC5C,CACJ,EACA,UAAAqzD,CAAY1lD,EAAO3N,GACf,GAAI2N,EAAMmnD,QAAS,CACf,MAAM90B,EAAmBhgC,EAAKgmD,OAC1Br4C,EAAMmnD,QAAQjC,YAAY7yD,EAAKgmB,MAAOga,EAAkBhgC,EAAKomD,eAC7DpmD,EAAKw+B,SAAU,EAEvB,CACJ,EACAlsB,SAAU,CACNi+B,SAAS,EACTqpB,SAAU,KACVj6B,SAAU,UACVrwB,gBAAiB,kBACjB+qD,WAAY,OACZ9H,UAAW,CACPpiD,OAAQ,QAEZylD,aAAc,EACdC,kBAAmB,EACnBnpB,WAAY,OACZqrB,UAAW,OACXhC,YAAa,EACbd,SAAU,CAAC,EACXgG,UAAW,OACXQ,YAAa,OACbxF,cAAe,EACfD,gBAAiB,EACjBd,WAAY,CACR/kD,OAAQ,QAEZqrD,YAAa,OACb/nD,QAAS,EACTijD,aAAc,EACdD,UAAW,EACXj/C,aAAc,EACd03C,UAAW,CAAC5+C,EAAKyJ,IAAOA,EAAKk7C,SAASjxD,KACtCmrD,SAAU,CAAC7+C,EAAKyJ,IAAOA,EAAKk7C,SAASjxD,KACrC42D,mBAAoB,OACpB9E,eAAe,EACftzB,WAAY,EACZjzB,YAAa,gBACboJ,YAAa,EACbvJ,UAAW,CACPwD,SAAU,IACVC,OAAQ,gBAEZQ,WAAY,CACRjH,QAAS,CACLnN,KAAM,SACNgU,WAAY,CACR,IACA,IACA,QACA,SACA,SACA,WAGRqlD,QAAS,CACLzlD,OAAQ,SACRD,SAAU,MAGlB0Z,UAAWgrC,IAEfte,cAAe,CACXic,SAAU,OACVC,WAAY,OACZ3C,UAAW,QAEf5jD,YAAa,CACT4D,YAAcZ,GAAgB,WAATA,GAA8B,aAATA,GAAgC,aAATA,EACjEc,YAAY,EACZ6Z,UAAW,CACP/Z,aAAa,EACbE,YAAY,GAEhBrD,UAAW,CACPsD,WAAW,GAEfW,WAAY,CACRX,UAAW,cAGnB8rC,uBAAwB,CACpB,gBAoCR,SAASge,GAAkB19D,GACvB,MAAM05B,EAAS9qB,KAAK+qB,YACpB,OAAI35B,GAAS,GAAKA,EAAQ05B,EAAO/3B,OACtB+3B,EAAO15B,GAEXA,CACX,CACA,MAAM29D,WAAsB7vB,GACxBxY,UAAY,WACfA,gBAAkB,CACX3mB,MAAO,CACH3N,SAAU08D,KAGlB,WAAAvtD,CAAY6f,GACR2O,MAAM3O,GACLphB,KAAKgvD,iBAAcrtD,EACpB3B,KAAKivD,YAAc,EACnBjvD,KAAKkvD,aAAe,EACxB,CACA,IAAA1uB,CAAKuO,GACD,MAAMogB,EAAQnvD,KAAKkvD,aACnB,GAAIC,EAAMp8D,OAAQ,CACd,MAAM+3B,EAAS9qB,KAAK+qB,YACpB,IAAK,MAAM,MAAEx3B,EAAM,MAAEg5B,KAAY4iC,EACzBrkC,EAAOv3B,KAAWg5B,GAClBzB,EAAO7vB,OAAO1H,EAAO,GAG7ByM,KAAKkvD,aAAe,EACxB,CACAn/B,MAAMyQ,KAAKuO,EACf,CACA,KAAAxkB,CAAMwC,EAAKx5B,GACP,GAAIpC,EAAc47B,GACd,OAAO,KAEX,MAAMjC,EAAS9qB,KAAK+qB,YAEpB,MAxCW,EAACx3B,EAAOuG,IAAgB,OAAVvG,EAAiB,KAAOqG,EAAYlD,KAAKiB,MAAMpE,GAAQ,EAAGuG,GAwC5E2kC,CADPlrC,EAAQvB,SAASuB,IAAUu3B,EAAOv3B,KAAWw5B,EAAMx5B,EA/C3D,SAAwBu3B,EAAQiC,EAAKx5B,EAAO67D,GACxC,MAAMpsB,EAAQlY,EAAO72B,QAAQ84B,GAC7B,OAAe,IAAXiW,EAdY,EAAClY,EAAQiC,EAAKx5B,EAAO67D,KAClB,iBAARriC,GACPx5B,EAAQu3B,EAAOp1B,KAAKq3B,GAAO,EAC3BqiC,EAAY9Q,QAAQ,CAChB/qD,QACAg5B,MAAOQ,KAEJ10B,MAAM00B,KACbx5B,EAAQ,MAELA,GAKI87D,CAAYvkC,EAAQiC,EAAKx5B,EAAO67D,GAGpCpsB,IADMlY,EAAOwkC,YAAYviC,GACRx5B,EAAQyvC,CACpC,CAwCmEusB,CAAezkC,EAAQiC,EAAK56B,EAAeoB,EAAOw5B,GAAM/sB,KAAKkvD,cAC/FpkC,EAAO/3B,OAAS,EAC7C,CACA,mBAAAyuC,GACI,MAAM,WAAExV,EAAW,WAAEC,GAAgBjsB,KAAKksB,gBAC1C,IAAI,IAAEryB,EAAI,IAAEC,GAASkG,KAAKwrB,WAAU,GACR,UAAxBxrB,KAAK7L,QAAQoS,SACRylB,IACDnyB,EAAM,GAELoyB,IACDnyB,EAAMkG,KAAK+qB,YAAYh4B,OAAS,IAGxCiN,KAAKnG,IAAMA,EACXmG,KAAKlG,IAAMA,CACf,CACA,UAAAioC,GACI,MAAMloC,EAAMmG,KAAKnG,IACXC,EAAMkG,KAAKlG,IACXuM,EAASrG,KAAK7L,QAAQkS,OACtBtG,EAAQ,GACd,IAAI+qB,EAAS9qB,KAAK+qB,YAClBD,EAAiB,IAARjxB,GAAaC,IAAQgxB,EAAO/3B,OAAS,EAAI+3B,EAASA,EAAOl5B,MAAMiI,EAAKC,EAAM,GACnFkG,KAAKivD,YAAcv4D,KAAKoD,IAAIgxB,EAAO/3B,QAAUsT,EAAS,EAAI,GAAI,GAC9DrG,KAAKgvD,YAAchvD,KAAKnG,KAAOwM,EAAS,GAAM,GAC9C,IAAI,IAAIjV,EAAQyI,EAAKzI,GAAS0I,EAAK1I,IAC/B2O,EAAMrK,KAAK,CACPtE,UAGR,OAAO2O,CACX,CACA,gBAAAysB,CAAiBp7B,GACb,OAAO09D,GAAkBn9D,KAAKqO,KAAM5O,EACxC,CACH,SAAAwxB,GACOmN,MAAMnN,YACD5iB,KAAKk3B,iBACNl3B,KAAK8xB,gBAAkB9xB,KAAK8xB,eAEpC,CACA,gBAAA3B,CAAiB/+B,GAIb,MAHqB,iBAAVA,IACPA,EAAQ4O,KAAKuqB,MAAMn5B,IAEN,OAAVA,EAAiBm6B,IAAMvrB,KAAKinC,oBAAoB71C,EAAQ4O,KAAKgvD,aAAehvD,KAAKivD,YAC5F,CACA,eAAApwB,CAAgBtrC,GACZ,MAAMwM,EAAQC,KAAKD,MACnB,OAAIxM,EAAQ,GAAKA,EAAQwM,EAAMhN,OAAS,EAC7B,KAEJiN,KAAKmwB,iBAAiBpwB,EAAMxM,GAAOnC,MAC9C,CACA,gBAAA41C,CAAiBl+B,GACb,OAAOpS,KAAKiB,MAAMqI,KAAKgvD,YAAchvD,KAAKmnC,mBAAmBr+B,GAAS9I,KAAKivD,YAC/E,CACA,YAAAz9B,GACI,OAAOxxB,KAAKkG,MAChB,EAuGJ,SAASspD,GAAkBp+D,EAAOq+D,GAAY,WAAEv6B,EAAW,YAAE1tB,IACzD,MAAM4C,EAAM7R,EAAUiP,GAChBkoD,GAASx6B,EAAax+B,KAAKqF,IAAIqO,GAAO1T,KAAKsG,IAAIoN,KAAS,KACxDrX,EAAS,IAAO08D,GAAc,GAAKr+D,GAAO2B,OAChD,OAAO2D,KAAKmD,IAAI41D,EAAaC,EAAO38D,EACxC,CACA,MAAM48D,WAAwBzwB,GAC1B,WAAA39B,CAAY6f,GACR2O,MAAM3O,GACLphB,KAAK5G,WAAQuI,EACb3B,KAAK3G,SAAMsI,EACX3B,KAAKgvD,iBAAcrtD,EACnB3B,KAAK4vD,eAAYjuD,EAClB3B,KAAKivD,YAAc,CACvB,CACA,KAAA1kC,CAAMwC,EAAKx5B,GACP,OAAIpC,EAAc47B,KAGE,iBAARA,GAAoBA,aAAeh7B,UAAYC,UAAU+6B,GAF1D,MAKHA,CACZ,CACA,sBAAA8iC,GACI,MAAM,YAAEvpD,GAAiBtG,KAAK7L,SACxB,WAAE63B,EAAW,WAAEC,GAAgBjsB,KAAKksB,gBAC1C,IAAI,IAAEryB,EAAI,IAAEC,GAASkG,KACrB,MAAM8vD,EAAUh7D,GAAI+E,EAAMmyB,EAAanyB,EAAM/E,EACvCi7D,EAAUj7D,GAAIgF,EAAMmyB,EAAanyB,EAAMhF,EAC7C,GAAIwR,EAAa,CACb,MAAM0pD,EAAU54D,EAAKyC,GACfo2D,EAAU74D,EAAK0C,GACjBk2D,EAAU,GAAKC,EAAU,EACzBF,EAAO,GACAC,EAAU,GAAKC,EAAU,GAChCH,EAAO,EAEf,CACA,GAAIj2D,IAAQC,EAAK,CACb,IAAIuM,EAAiB,IAARvM,EAAY,EAAIpD,KAAKa,IAAU,IAANuC,GACtCi2D,EAAOj2D,EAAMuM,GACRC,GACDwpD,EAAOj2D,EAAMwM,EAErB,CACArG,KAAKnG,IAAMA,EACXmG,KAAKlG,IAAMA,CACf,CACA,YAAAo2D,GACI,MAAMhvB,EAAWlhC,KAAK7L,QAAQ4L,MAC9B,IACIowD,GADA,cAAEhyB,EAAc,SAAEiyB,GAAclvB,EAepC,OAbIkvB,GACAD,EAAWz5D,KAAKonC,KAAK99B,KAAKlG,IAAMs2D,GAAY15D,KAAKoB,MAAMkI,KAAKnG,IAAMu2D,GAAY,EAC1ED,EAAW,MACX3gD,QAAQC,KAAK,UAAUzP,KAAK9O,sBAAsBk/D,mCAA0CD,8BAC5FA,EAAW,OAGfA,EAAWnwD,KAAKqwD,mBAChBlyB,EAAgBA,GAAiB,IAEjCA,IACAgyB,EAAWz5D,KAAKmD,IAAIskC,EAAegyB,IAEhCA,CACX,CACH,gBAAAE,GACO,OAAOt+D,OAAO+E,iBAClB,CACA,UAAAirC,GACI,MAAM11B,EAAOrM,KAAK7L,QACZ+sC,EAAW70B,EAAKtM,MACtB,IAAIowD,EAAWnwD,KAAKkwD,eACpBC,EAAWz5D,KAAKoD,IAAI,EAAGq2D,GACvB,MAcMpwD,EA9Ld,SAAyBuwD,EAAmBC,GACxC,MAAMxwD,EAAQ,IAER,OAAEwG,EAAO,KAAEmiC,EAAK,IAAE7uC,EAAI,IAAEC,EAAI,UAAE02D,EAAU,MAAEp0C,EAAM,SAAE+zC,EAAS,UAAEM,EAAU,cAAEC,GAAmBJ,EAC5FK,EAAOjoB,GAAQ,EACfkoB,EAAYT,EAAW,GACrBt2D,IAAKg3D,EAAO/2D,IAAKg3D,GAAUP,EAC7BvkC,GAAc76B,EAAc0I,GAC5BoyB,GAAc96B,EAAc2I,GAC5Bi3D,GAAgB5/D,EAAcirB,GAC9BqzC,GAAcqB,EAAOD,IAASJ,EAAY,GAChD,IACI5vC,EAAQmwC,EAASC,EAASC,EAD1BvzB,EAAUnmC,GAASs5D,EAAOD,GAAQD,EAAYD,GAAQA,EAE1D,GAAIhzB,EAXgB,QAWU3R,IAAeC,EACzC,MAAO,CACH,CACI76B,MAAOy/D,GAEX,CACIz/D,MAAO0/D,IAInBI,EAAYx6D,KAAKonC,KAAKgzB,EAAOnzB,GAAWjnC,KAAKoB,MAAM+4D,EAAOlzB,GACtDuzB,EAAYN,IACZjzB,EAAUnmC,EAAQ05D,EAAYvzB,EAAUizB,EAAYD,GAAQA,GAE3Dx/D,EAAcq/D,KACf3vC,EAASnqB,KAAKmB,IAAI,GAAI24D,GACtB7yB,EAAUjnC,KAAKonC,KAAKH,EAAU9c,GAAUA,GAE7B,UAAXta,GACAyqD,EAAUt6D,KAAKoB,MAAM+4D,EAAOlzB,GAAWA,EACvCszB,EAAUv6D,KAAKonC,KAAKgzB,EAAOnzB,GAAWA,IAEtCqzB,EAAUH,EACVI,EAAUH,GAEV9kC,GAAcC,GAAcyc,GDtmTpC,SAAqB3zC,EAAGuC,GACpB,MAAM65D,EAAUz6D,KAAKiB,MAAM5C,GAC3B,OAAOo8D,EAAU75D,GAAWvC,GAAKo8D,EAAU75D,GAAWvC,CAC1D,CCmmT4Cq8D,EAAat3D,EAAMD,GAAO6uC,EAAM/K,EAAU,MAC9EuzB,EAAYx6D,KAAKiB,MAAMjB,KAAKmD,KAAKC,EAAMD,GAAO8jC,EAASwyB,IACvDxyB,GAAW7jC,EAAMD,GAAOq3D,EACxBF,EAAUn3D,EACVo3D,EAAUn3D,GACHi3D,GACPC,EAAUhlC,EAAanyB,EAAMm3D,EAC7BC,EAAUhlC,EAAanyB,EAAMm3D,EAC7BC,EAAY90C,EAAQ,EACpBuhB,GAAWszB,EAAUD,GAAWE,IAEhCA,GAAaD,EAAUD,GAAWrzB,EAE9BuzB,EADA75D,EAAa65D,EAAWx6D,KAAKiB,MAAMu5D,GAAYvzB,EAAU,KAC7CjnC,KAAKiB,MAAMu5D,GAEXx6D,KAAKonC,KAAKozB,IAG9B,MAAMG,EAAgB36D,KAAKoD,IAAIrB,EAAeklC,GAAUllC,EAAeu4D,IACvEnwC,EAASnqB,KAAKmB,IAAI,GAAI1G,EAAcq/D,GAAaa,EAAgBb,GACjEQ,EAAUt6D,KAAKiB,MAAMq5D,EAAUnwC,GAAUA,EACzCowC,EAAUv6D,KAAKiB,MAAMs5D,EAAUpwC,GAAUA,EACzC,IAAIuR,EAAI,EAgBR,IAfIpG,IACI0kC,GAAiBM,IAAYn3D,GAC7BkG,EAAMrK,KAAK,CACPtE,MAAOyI,IAEPm3D,EAAUn3D,GACVu4B,IAEA/6B,EAAaX,KAAKiB,OAAOq5D,EAAU5+B,EAAIuL,GAAW9c,GAAUA,EAAQhnB,EAAK21D,GAAkB31D,EAAK41D,EAAYa,KAC5Gl+B,KAEG4+B,EAAUn3D,GACjBu4B,KAGFA,EAAI8+B,IAAa9+B,EAAE,CACrB,MAAMtyB,EAAYpJ,KAAKiB,OAAOq5D,EAAU5+B,EAAIuL,GAAW9c,GAAUA,EACjE,GAAIoL,GAAcnsB,EAAYhG,EAC1B,MAEJiG,EAAMrK,KAAK,CACPtE,MAAO0O,GAEf,CAcA,OAbImsB,GAAcykC,GAAiBO,IAAYn3D,EACvCiG,EAAMhN,QAAUsE,EAAa0I,EAAMA,EAAMhN,OAAS,GAAG3B,MAAO0I,EAAK01D,GAAkB11D,EAAK21D,EAAYa,IACpGvwD,EAAMA,EAAMhN,OAAS,GAAG3B,MAAQ0I,EAEhCiG,EAAMrK,KAAK,CACPtE,MAAO0I,IAGPmyB,GAAcglC,IAAYn3D,GAClCiG,EAAMrK,KAAK,CACPtE,MAAO6/D,IAGRlxD,CACX,CA2FsBuxD,CAdkB,CAC5BnB,WACA5pD,OAAQ8F,EAAK9F,OACb1M,IAAKwS,EAAKxS,IACVC,IAAKuS,EAAKvS,IACV02D,UAAWtvB,EAASsvB,UACpB9nB,KAAMxH,EAASkvB,SACfh0C,MAAO8kB,EAAS9kB,MAChBq0C,UAAWzwD,KAAK4qC,aAChB1V,WAAYl1B,KAAKk3B,eACjB1vB,YAAa05B,EAAS15B,aAAe,EACrCkpD,eAA0C,IAA3BxvB,EAASwvB,eAEV1wD,KAAKy/B,QAAUz/B,MAajC,MAXoB,UAAhBqM,EAAK9F,QDzvTb,SAA4B3L,EAAOjH,EAAQwmB,GAC3C,IAAIvnB,EAAGO,EAAM/B,EACb,IAAIwB,EAAI,EAAGO,EAAOyH,EAAM7H,OAAQH,EAAIO,EAAMP,IACtCxB,EAAQwJ,EAAMhI,GAAGunB,GACZ9hB,MAAMjH,KACPuC,EAAOkG,IAAMnD,KAAKmD,IAAIlG,EAAOkG,IAAKzI,GAClCuC,EAAOmG,IAAMpD,KAAKoD,IAAInG,EAAOmG,IAAK1I,GAG9C,CCivTYmgE,CAAmBxxD,EAAOC,KAAM,SAEhCqM,EAAK1Z,SACLoN,EAAMpN,UACNqN,KAAK5G,MAAQ4G,KAAKlG,IAClBkG,KAAK3G,IAAM2G,KAAKnG,MAEhBmG,KAAK5G,MAAQ4G,KAAKnG,IAClBmG,KAAK3G,IAAM2G,KAAKlG,KAEbiG,CACX,CACH,SAAA6iB,GACO,MAAM7iB,EAAQC,KAAKD,MACnB,IAAI3G,EAAQ4G,KAAKnG,IACbR,EAAM2G,KAAKlG,IAEf,GADAi2B,MAAMnN,YACF5iB,KAAK7L,QAAQkS,QAAUtG,EAAMhN,OAAQ,CACrC,MAAMsT,GAAUhN,EAAMD,GAAS1C,KAAKoD,IAAIiG,EAAMhN,OAAS,EAAG,GAAK,EAC/DqG,GAASiN,EACThN,GAAOgN,CACX,CACArG,KAAKgvD,YAAc51D,EACnB4G,KAAK4vD,UAAYv2D,EACjB2G,KAAKivD,YAAc51D,EAAMD,CAC7B,CACA,gBAAAozB,CAAiBp7B,GACb,OAAO0N,GAAa1N,EAAO4O,KAAKC,MAAM9L,QAAQ6K,OAAQgB,KAAK7L,QAAQ4L,MAAML,OAC7E,EAGJ,MAAM8xD,WAAoB7B,GACtBjpC,UAAY,SACfA,gBAAkB,CACX3mB,MAAO,CACH3N,SAAU2O,GAAMpB,WAAWE,UAGnC,mBAAA2hC,GACI,MAAM,IAAE3nC,EAAI,IAAEC,GAASkG,KAAKwrB,WAAU,GACtCxrB,KAAKnG,IAAM/H,EAAe+H,GAAOA,EAAM,EACvCmG,KAAKlG,IAAMhI,EAAegI,GAAOA,EAAM,EACvCkG,KAAK6vD,wBACT,CACH,gBAAAQ,GACO,MAAMn7B,EAAal1B,KAAKk3B,eAClBnkC,EAASmiC,EAAal1B,KAAKqH,MAAQrH,KAAKuJ,OACxC/B,EAAcjP,EAAUyH,KAAK7L,QAAQ4L,MAAMyH,aAC3CkoD,GAASx6B,EAAax+B,KAAKqF,IAAIyL,GAAe9Q,KAAKsG,IAAIwK,KAAiB,KACxE8+B,EAAWtmC,KAAK2mC,wBAAwB,GAC9C,OAAOjwC,KAAKonC,KAAK/qC,EAAS2D,KAAKmD,IAAI,GAAIysC,EAAS9jC,WAAaktD,GACjE,CACA,gBAAAv/B,CAAiB/+B,GACb,OAAiB,OAAVA,EAAiBm6B,IAAMvrB,KAAKinC,oBAAoB71C,EAAQ4O,KAAKgvD,aAAehvD,KAAKivD,YAC5F,CACA,gBAAAjoB,CAAiBl+B,GACb,OAAO9I,KAAKgvD,YAAchvD,KAAKmnC,mBAAmBr+B,GAAS9I,KAAKivD,WACpE,EAoEkBluD,GAAMpB,WAAWgB,YAsXjBI,GAAMpB,WAAWE,O,yDC/jVvC,MAAM4xD,EAAsB,QAC5B,SAASC,EAAaC,EAAKvgE,GACJ,mBAARugE,EACPA,EAAIvgE,GACGugE,IACPA,EAAIl9D,QAAUrD,EAEtB,CAOA,SAASwgE,EAAUC,EAAaC,GAC5BD,EAAY/mC,OAASgnC,CACzB,CACA,SAASC,EAAYF,EAAaG,GAC9B,IAAIC,EAAe3iC,UAAUv8B,OAAS,QAAsB,IAAjBu8B,UAAU,GAAgBA,UAAU,GAAKmiC,EACpF,MAAMS,EAAgB,GACtBL,EAAY/vD,SAAWkwD,EAAat+D,IAAKy+D,IAErC,MAAMC,EAAiBP,EAAY/vD,SAASuwD,KAAMrqC,GAAUA,EAAQiqC,KAAkBE,EAAYF,IAElG,OAAKG,GAAmBD,EAAY5pD,OAAQ2pD,EAAcpxD,SAASsxD,IAKnEF,EAAcx8D,KAAK08D,GACnB5gE,OAAOkP,OAAO0xD,EAAgBD,GACvBC,GANI,IACAD,IAOnB,CACA,SAASG,EAAU/pD,GACf,IAAI0pD,EAAe3iC,UAAUv8B,OAAS,QAAsB,IAAjBu8B,UAAU,GAAgBA,UAAU,GAAKmiC,EACpF,MAAMc,EAAW,CACbznC,OAAQ,GACRhpB,SAAU,IAId,OAFA8vD,EAAUW,EAAUhqD,EAAKuiB,QACzBinC,EAAYQ,EAAUhqD,EAAKzG,SAAUmwD,GAC9BM,CACX,CAgCA,SAASC,EAAe3jD,EAAO8iD,GAC3B,MAAM,OAAEpoD,EAAS,IAAG,MAAElC,EAAQ,IAAG,OAAEorD,GAAS,EAAK,aAAER,EAAY,KAAE1gE,EAAI,KAAEgX,EAAI,QAAEpU,EAAO,QAAEqP,EAAU,GAAE,gBAAEkvD,EAAe,WAAEC,KAAeC,GAAgB/jD,EAC9IgkD,GAAY,IAAAC,QAAO,MACnBC,GAAW,IAAAD,QAAO,MAClBE,EAAc,KACXH,EAAUp+D,UACfs+D,EAASt+D,QAAU,IAAI,KAAQo+D,EAAUp+D,QAAS,CAC9ClD,OACAgX,KAAM+pD,EAAU/pD,EAAM0pD,GACtB99D,QAASA,GAAW,IACbA,GAEPqP,YAEJkuD,EAAaC,EAAKoB,EAASt+D,WAEzBw+D,EAAe,KACjBvB,EAAaC,EAAK,MACdoB,EAASt+D,UACTs+D,EAASt+D,QAAQ+iD,UACjBub,EAASt+D,QAAU,OAqD3B,OAlDA,IAAAy+D,WAAU,MACDT,GAAUM,EAASt+D,SAAWN,GA3F3C,SAAoB8L,EAAOkzD,GACvB,MAAMh/D,EAAU8L,EAAM9L,QAClBA,GAAWg/D,GACX3hE,OAAOkP,OAAOvM,EAASg/D,EAE/B,CAuFYC,CAAWL,EAASt+D,QAASN,IAElC,CACCs+D,EACAt+D,KAEJ,IAAA++D,WAAU,MACDT,GAAUM,EAASt+D,SACpBm9D,EAAUmB,EAASt+D,QAAQguB,OAAOla,KAAMA,EAAKuiB,SAElD,CACC2nC,EACAlqD,EAAKuiB,UAET,IAAAooC,WAAU,MACDT,GAAUM,EAASt+D,SAAW8T,EAAKzG,UACpCiwD,EAAYgB,EAASt+D,QAAQguB,OAAOla,KAAMA,EAAKzG,SAAUmwD,IAE9D,CACCQ,EACAlqD,EAAKzG,YAET,IAAAoxD,WAAU,KACDH,EAASt+D,UACVg+D,GACAQ,IACArf,WAAWof,IAEXD,EAASt+D,QAAQstB,OAAO4wC,KAE7B,CACCF,EACAt+D,EACAoU,EAAKuiB,OACLviB,EAAKzG,SACL6wD,KAEJ,IAAAO,WAAU,KACDH,EAASt+D,UACdw+D,IACArf,WAAWof,KACZ,CACCzhE,KAEJ,IAAA2hE,WAAU,KACNF,IACO,IAAIC,KACZ,IACkB,gBAAoB,SAAU,CAC/CtB,IAAKkB,EACLQ,KAAM,MACN9pD,OAAQA,EACRlC,MAAOA,KACJurD,GACJF,EACP,CACA,MAAMlgB,GAAsB,IAAA8gB,YAAWd,GAEvC,SAASe,EAAiBhiE,EAAMiiE,GAE5B,OADA,KAAQvoB,SAASuoB,IACI,IAAAF,YAAW,CAACzkD,EAAO8iD,IAAoB,gBAAoBnf,EAAO,IAC5E3jC,EACH8iD,IAAKA,EACLpgE,KAAMA,IAElB,CACA,MAAMkiE,EAAuBF,EAAiB,OAAQ,K","sources":["webpack://automata-neural-nexus-portal/./node_modules/chart.js/dist/chunks/helpers.dataset.js","webpack://automata-neural-nexus-portal/./node_modules/chart.js/dist/chart.js","webpack://automata-neural-nexus-portal/./node_modules/react-chartjs-2/dist/index.js"],"sourcesContent":["/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nfunction getDatasetClipArea(chart, meta) {\n    const clip = meta._clip;\n    if (clip.disabled) {\n        return false;\n    }\n    const area = getDatasetArea(meta, chart.chartArea);\n    return {\n        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),\n        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),\n        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),\n        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)\n    };\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, getStyle as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, getRtlAdapter as aA, overrideTextDirection as aB, _textX as aC, restoreTextDirection as aD, drawPointLegend as aE, distanceBetweenPoints as aF, noop as aG, _setMinAndMaxByKey as aH, niceNum as aI, almostWhole as aJ, almostEquals as aK, _decimalPlaces as aL, Ticks as aM, log10 as aN, _longestText as aO, _filterBetween as aP, _lookup as aQ, isPatternOrGradient as aR, getHoverColor as aS, clone as aT, _merger as aU, _mergerIf as aV, _deprecated as aW, _splitKey as aX, toFontString as aY, splineCurve as aZ, splineCurveMonotone as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, getDatasetClipArea as ah, _elementsEqual as ai, _isClickEvent as aj, _isBetween as ak, _normalizeAngle as al, _readValueToProps as am, _updateBezierControlPoints as an, _computeSegments as ao, _boundSegments as ap, _steppedInterpolation as aq, _bezierInterpolation as ar, _pointInLine as as, _steppedLineTo as at, _bezierCurveTo as au, drawPoint as av, addRoundedRectPath as aw, toTRBL as ax, toTRBLCorners as ay, _boundSegment as az, isArray as b, fontString as b0, toLineHeight as b1, PITAU as b2, INFINITY as b3, RAD_PER_DEG as b4, QUARTER_PI as b5, TWO_THIRDS_PI as b6, _angleDiff as b7, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.dataset.js.map\n","/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getAxisCount() {\n        return this._getAxis().length;\n    }\n    getFirstScaleIdForIndexAxis() {\n        const scales = this.chart.scales;\n        const indexScaleId = this.chart.options.indexAxis;\n        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();\n    }\n    _getAxis() {\n        const axis = {};\n        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n        for (const dataset of this.chart.data.datasets){\n            axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n        }\n        return Object.keys(axis);\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        const axisCount = this._getAxisCount();\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n            const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.5.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipSelf(ctx, element, endAngle) {\n    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n    if (innerRadius > 0) {\n        const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n    } else {\n        const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n        if (borderJoinStyle === 'round') {\n            ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n        } else if (borderJoinStyle === 'bevel') {\n            const r = 2 * clipWidth * clipWidth;\n            const endX = -r * Math.cos(endAngle + PI / 2) + x;\n            const endY = -r * Math.sin(endAngle + PI / 2) + y;\n            const startX = r * Math.cos(startAngle + PI / 2) + x;\n            const startY = r * Math.sin(startAngle + PI / 2) + y;\n            ctx.lineTo(endX, endY);\n            ctx.lineTo(startX, startY);\n        }\n    }\n    ctx.closePath();\n    ctx.moveTo(0, 0);\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n        clipSelf(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true,\n        selfJoin: false\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    let fillColor = below;\n    if (below !== above) {\n        if (property === 'x') {\n            clipVertical(ctx, target, area.top);\n            fill(ctx, {\n                line,\n                target,\n                color: above,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipVertical(ctx, target, area.bottom);\n        } else if (property === 'y') {\n            clipHorizontal(ctx, target, area.left);\n            fill(ctx, {\n                line,\n                target,\n                color: below,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipHorizontal(ctx, target, area.right);\n            fillColor = above;\n        }\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: fillColor,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(clipX, firstPoint.y);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(clipX, lastPoint.y);\n        }\n    }\n    ctx.lineTo(clipX, target.first().y);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = 'label';\nfunction reforwardRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins = [], fallbackContent, updateMode, ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef(null);\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", {\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width,\n        ...canvasProps\n    }, fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, {\n            ...props,\n            ref: ref,\n            type: type\n        }));\n}\nconst Line = /* #__PURE__ */ createTypedChart('line', LineController);\nconst Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\nconst Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart('doughnut', DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart('polarArea', PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart('bubble', BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart('scatter', ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["noop","uid","id","isNullOrUndef","value","isArray","Array","type","Object","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","callback","fn","args","thisArg","apply","each","loopable","reverse","i","len","keys","length","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","clone","source","map","target","create","klen","k","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","v","x","o","y","resolveObjectKey","obj","resolver","parts","split","tmp","part","endsWith","push","_splitKey","_getKeyResolver","_capitalize","str","charAt","toUpperCase","defined","isFunction","setsEqual","a","b","size","item","has","PI","Math","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","round","niceRange","pow","floor","fraction","isNumber","n","Symbol","toPrimitive","isNonPrimitive","isNaN","parseFloat","toRadians","degrees","_decimalPlaces","e","p","distanceBetweenPoints","pt1","pt2","sqrt","_angleDiff","_normalizeAngle","_angleBetween","angle","start","end","sameAngleIsFullCircle","s","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","min","max","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","array","listener","stub","_chartjs","listeners","splice","forEach","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","atEdge","t","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","m","d","easeInOutBounce","isPatternOrGradient","color","getHoverColor","saturate","darken","hexString","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","set","getNumberFormat","format","formatters","values","numeric","tickValue","ticks","this","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","assign","logarithmic","remain","significand","includes","Ticks","overrides","descriptors","getScope$1","node","root","scope","Defaults","constructor","_descriptors","_appliers","animation","undefined","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","weight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","from","loop","to","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","w","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","rotate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","h","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","ret","objProps","read","prop","toTRBLCorners","toPadding","toTRBL","toFont","fallback","parseInt","console","warn","toFontString","resolve","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","configurable","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","points","skip","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","capControlPoint","pt","_updateBezierControlPoints","controlPoints","spanGaps","cubicInterpolationMode","valueAxis","pointsLen","deltaK","mK","pointBefore","pointCurrent","pointAfter","slopeDelta","alphaK","betaK","tauK","squaredMagnitude","monotoneAdjust","iPixel","vPixel","monotoneCompute","splineCurveMonotone","prev","tension","capBezierPoints","inArea","inAreaPrev","inAreaNext","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","shadowRoot","useOffsetPos","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","property","el","getPropertyValue","getStyle","_pointInLine","p1","p2","_steppedInterpolation","_bezierInterpolation","cp1","cp2","c","getRtlAdapter","rtl","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","propertyFn","between","compare","normalize","normalizeSegment","count","_boundSegment","segment","startBound","endBound","getSegment","prevValue","inside","subStart","shouldStart","shouldStop","_boundSegments","segments","sub","readStyle","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","styleChanged","prevStyle","replacer","getSizeForArea","chartArea","field","getDatasetClipArea","meta","_clip","disabled","xScale","yScale","getDatasetArea","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","transparent","interpolators","boolean","factor","c0","c1","valid","mix","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","isStacked","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","r","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","iAxisKey","vAxisKey","adata","convertObjectDataToArray","isExtensible","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","sorted","_sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","l","toClip","defaultClip","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","_index_","_value_","super","_dataset","animationsDisabled","pointCount","getPixelForValue","distanceToDefinedLo","findIndex","distanceToDefinedHi","_getStartAndCountOfVisiblePoints","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","changed","_scaleRangesChanged","_datasetIndex","_decimated","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","getBasePixel","lastPoint","updateControlPoints","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestItems","distanceMetric","useX","useY","deltaX","deltaY","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestCartesianItems","startAngle","endAngle","getProps","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","atan2","getAngleFromPoint","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","sort","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","params","layout","horizontal","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","fullSize","setBoxDims","placeBoxes","userPadding","placed","stackWeight","layouts","addBox","_layers","z","removeBox","layoutItem","minPadding","availableWidth","availableHeight","layoutBoxes","isHorizontal","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","vBoxMaxWidth","hBoxMaxHeight","buildStacks","setLayoutDims","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","aspectRatio","releaseContext","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","bbWidth","bbHeight","margins","maxHeight","containerSize","containerStyle","containerBorder","containerPadding","clientHeight","getContainerSize","isConnected","Element","tooltipPosition","hasValue","final","newTicks","spacing","majorStart","majorEnd","ceil","offsetFromEdge","edge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_length","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","dimension","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","determinedMaxTicks","_tickSize","maxScale","maxChart","determineMaxTicks","ticksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","proto","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","setStyle","lineCap","lineJoin","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","getLineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","usePath2D","Path2D","LineElement","_fullLoop","_path","_points","_segments","_pointsUpdated","segmentOptions","findStartAndEnd","chartContext","baseStyle","addStyle","st","dir","p0","p0DataIndex","p1DataIndex","doSplitByStyles","splitByStyles","solidSegments","_computeSegments","interpolate","_interpolate","_getInterpolationMethod","interpolated","segmentMethod","path","strokePathWithCache","strokePathDirect","inRange$1","hitRadius","PointElement","hoverBorderWidth","hoverRadius","mouseX","mouseY","inXRange","inYRange","_getBounds","_findSegmentEnd","_getEdge","_createBoundaryLine","boundary","linePoints","_pointsFromSegments","_shouldApplyFill","_resolveTarget","propagate","visited","_decodeFill","fillOption","parseFillOption","firstCh","decodeTargetIndex","addPointsBelow","sourcePoint","linesBelow","postponed","findPoint","unshift","pointValue","firstValue","lastValue","simpleArc","_drawfill","getLineByIndex","sourcePoints","below","getLinesBelow","_buildStackLine","getPointPositionForValue","startValue","_getTargetValue","circular","getDistanceFromCenterForValue","computeCircularBoundary","_getTargetPixel","computeLinearBoundary","computeBoundary","lineOpts","above","fillColor","clipVertical","clipHorizontal","doFill","clipY","lineLoop","clipX","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","_args","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","lineDash","drawOptions","SQRT2","centerX","yBoxTop","xBoxLeft","borderRadius","drawLegendBox","_textX","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","sameItem","plugin_legend","_element","legend","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","centerY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","addedLabels","addIfString","lastIndexOf","findOrAddLabel","relativeLabelSize","minSpacing","ratio","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","rounded","almostWhole","decimalPlaces","generateTicks$1","_setMinAndMaxByKey","LinearScale","defaultDatasetIdKey","reforwardRef","ref","setLabels","currentData","nextLabels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","nextDataset","currentDataset","find","cloneData","nextData","ChartComponent","redraw","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","destroyChart","useEffect","nextOptions","setOptions","role","forwardRef","createTypedChart","registerables","Line"],"sourceRoot":""}